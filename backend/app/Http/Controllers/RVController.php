<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;
use App\Models\Receive_voucher_master;
use App\Models\Receive_voucher_detail;
use App\Models\Receive_voucher_detail_copy;
use App\Models\Accounts_receivable;
use App\Models\Receive_voucher_master_invoices;
use App\Models\Invoice_master;
use App\Models\Charts_of_account;
use App\Models\ISSettings;
use App\Models\Customer;
use App\Models\Account_customer_cn;

use App\Events\ProductEvent;
use App\Events\AllocationEvent;
use App\Events\InventoryEvent;
use App\Events\CustInvoiceEvent;
use App\Events\ShipmentEvent;
use App\Events\CustomerEvent;
use App\Events\PreorderEvent;
use App\Events\SOEvent;
use App\Events\LogEvent;
use App\Events\RVEvent;

use Illuminate\Http\Request;
use App\Services\AutoGenerated;

class RVController extends Controller{

    public function getAllRVList(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $customerCodes = $request->input('customer_codes', []);
        $poStatus = $request->input('rvstatus', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        if ($search) {
            // Base query with eager loading
            $query = Receive_voucher_master::with([
                'customer:id,source_id,customer_type,user_id,account_name_en,account_name_cn,customer_code',
                'bankAccount:account_code,account_name_en,account_name_cn',
                'chartsAccount:account_code,account_name_en,account_name_cn',
                'customer.source:id,description_en,description_cn',
                'rvDetails.product:id,product_code,product_title_en,product_title_cn',
                'rvDetailsCopy.product:id,product_code,product_title_en,product_title_cn',
                'rvDetails.account:id,account_code,account_name_en,account_name_cn',
                'rvDetailsCopy.account:id,account_code,account_name_en,account_name_cn',
                'invoiceStatus:id,status_value_en,status_value_cn',
            ])->orderByDesc('id');
        }
        else{
            // Base query with eager loading
            $query = Receive_voucher_master::with([
                'customer:id,source_id,customer_type,user_id,account_name_en,account_name_cn,customer_code',
                'bankAccount:account_code,account_name_en,account_name_cn',
                'chartsAccount:account_code,account_name_en,account_name_cn',
                'customer.source:id,description_en,description_cn',
                'rvDetails.product:id,product_code,product_title_en,product_title_cn',
                'rvDetailsCopy.product:id,product_code,product_title_en,product_title_cn',
                'rvDetails.account:id,account_code,account_name_en,account_name_cn',
                'rvDetailsCopy.account:id,account_code,account_name_en,account_name_cn',
                'invoiceStatus:id,status_value_en,status_value_cn',
            ])->orderByDesc('id');
        }

        // Filters
        if (!empty($customerCodes)) {
            $query->whereIn('customer_id', $customerCodes);
        }
        if (!empty($poStatus)) {
            $query->whereIn('rv_status_id', $poStatus);
        }
        if ($categoryDates === 'InvoiceDate' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(rv_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('rv_number', 'like', "%{$search}%")
                    ->orWhere('account_code', 'like', "%{$search}%")
                    ->orWhereHas('customer', function ($q) use ($search) {
                        $q->where('account_name_en', 'like', "%{$search}%")
                        ->orWhere('account_name_cn', 'like', "%{$search}%")
                        ->orWhere('customer_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceStatus', function ($q) use ($search) {
                        $q->where('status_value_en', 'like', "%{$search}%")
                        ->orWhere('status_value_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('rvDetails.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('rvDetailsCopy.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();

        // Transform all orders (master data)
        $allDataTransformed = $allData->map(fn($order) => $this->transformOrderData($order));

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allDataTransformed->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $allDataTransformed->sum('base_total') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();

        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data (master + details data)
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

        if ($perPage === -1) {
            // No pagination — return all
            $result = $query->get();
            $paginatedData = $result->map(fn($item) => $this->transformOrderData($item));

            $data = $paginatedData->map(function($order) {
                return array_merge(
                    $this->getOrderMasterData($order),
                    ['details' => $this->getOrderDetailsData($order)],
                );
            });

            $response = [
                'current_page' => 1,
                'data' => $data,
                'footer2' => $footer2,
                'last_page' => 1,
                'per_page' => $data->count(),
                'total' => $data->count(),
            ];
        } else {
            // Paginated
            $result = $query->paginate($perPage);

            $paginatedData = tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

            $data = $paginatedData->map(function($order) {
                return array_merge(
                    $this->getOrderMasterData($order),
                    ['details' => $this->getOrderDetailsData($order)],
                );
            });

            $response = [
                'current_page' => $result->currentPage(),
                'data' => $data,
                'footer2' => $footer2,
                'last_page' => $result->lastPage(),
                'per_page' => $result->perPage(),
                'total' => $result->total(),
            ];
        }

        // Final return
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $response,
        ]);

    }
    public function getRVInfo($id){
        $list = Receive_voucher_master::with([
            'customer.salesPerson',
            'customer.shippingTerms',
            'rvDetails.product',
            'rvDetails.account',
            'rvDetailsCopy.product',
            'rvDetailsCopy.account',
        ])->where('id', $id)->first();

        if (!$list) {
            return [];
        }

        $account_name_en = $list->customer->account_name_en ?? '';
        $account_name_cn = $list->customer->account_name_cn ?? '';
        $account_name_cn = $account_name_cn === '' ? $account_name_en : $account_name_cn;

        $billing_address_en = $list->customer->billing_address_en ?? '';
        $billing_address_cn = $list->customer->billing_address_cn ?? '';
        $billing_address_cn = $billing_address_cn === '' ? $billing_address_en : $billing_address_cn;

        $delivery_address_en = $list->customer->delivery_address_en ?? '';
        $delivery_address_cn = $list->customer->delivery_address_cn ?? '';
        $delivery_address_cn = $delivery_address_cn === '' ? $delivery_address_en : $delivery_address_cn;

        $currency = $list->currency;
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $operator = GlobalController::getOperator( $currency . $baseCurrency);

        $mergedDetailsModels = $list->rvDetails->merge($list->rvDetailsCopy);

        // Map merged collection to arrays
        $mergedDetails = $mergedDetailsModels->map(function ($detail) {
            $product_code = optional($detail->product)->product_code;
            $product_title_en = optional($detail->product)->product_title_en;
            $product_title_cn = optional($detail->product)->product_title_cn;
            $account_name_en = optional($detail->account)->account_name_en;
            $account_name_cn = optional($detail->account)->account_name_cn;
            return [
                'id'                    => $detail->id,
                'product_id'            => $detail->product_id ?? 0,
                'product_code'          => $product_code,
                'product_title_en'      => $product_title_en,
                'product_title_cn'      => $product_title_cn,
                'account_name_en'       => $account_name_en,
                'account_name_cn'       => $account_name_cn,
                'rv_number'             => $detail->rv_number,
                'qty'                   => $detail->qty,
                'rv_date'               => $detail->rv_date,
                'amount'                => $detail->amount,
                'amount_paid'           => $detail->amount_paid,
                'base_amount'           => $detail->base_amount,
                'currency'              => $detail->currency,
                'ex_rate'               => $detail->ex_rate,
                'particulars'           => $detail->particulars,
                'customer_id'           => $detail->customer_id,
                'invoice_no'            => $detail->invoice_no,
                'account_code'          => $detail->account_code,
                'ex_rate_diff'          => $detail->ex_rate_diff,
                'order_id'              => $detail->order_id,
                'is_deleted'            => 0,
                'indexInt'              => $detail->id . rand(1, 100),
                'age_type'              => 'old',
                'delete_type'           => '',
            ];
        })->values();

        $list = [
            'id'                    => $list->id,
            'customer_id'           => $list->customer_id,
            'customer_code'         => $list->customer->customer_code ?? '',
            'account_name_en'       => $account_name_en,
            'account_name_cn'       => $account_name_cn,
            'billing_address_en'    => $billing_address_en,
            'billing_address_cn'    => $billing_address_cn,
            'delivery_address_en'   => $delivery_address_en,
            'delivery_address_cn'   => $delivery_address_cn,
            'operator'              => $operator,
            'ex_rate'               => $list->ex_rate,
            'rv_number'             => $list->rv_number,
            'rv_date'               => $list->rv_date,
            'rv_status_id'          => $list->rv_status_id,
            'account_code'          => $list->account_code,
            'bank'                  => $list->bank,
            'currency'              => $list->currency,
            'amount_paid'           => $list->amount_paid,
            'base_amount_paid'      => $list->base_amount_paid,
            'total'                 => $list->total,
            'base_total'            => $list->base_total,
            'bank_charges'          => $list->bank_charges,
            'base_bank_charges'     => $list->base_bank_charges,
            'excess_amount'         => $list->excess_amount,
            'base_excess_amount'    => $list->base_excess_amount,
            'invoice_deposit'       => $list->invoice_deposit,
            'credit_used'           => $list->credit_used,
            'details'               => $mergedDetails,
        ];
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    private function transformOrderData($list){
        $account_name_en = optional($list->customer)->account_name_en;
        $account_name_cn = optional($list->customer)->account_name_cn ?: $account_name_en;
        $list->source_en = optional(optional($list->customer)->source)->description_en ?? '';
        $list->source_cn = optional(optional($list->customer)->source)->description_cn ?? '';
        $list->customer_code = optional($list->customer)->customer_code;
        $list->customer_type = optional($list->customer)->customer_type;
        $list->user_id = optional($list->customer)->user_id;
        $list->account_name_en = $account_name_en;
        $list->account_name_cn = $account_name_cn;
        $list->ex_rate = number_format($list->ex_rate, 4);
        $list->status_value_en = optional($list->invoiceStatus)->status_value_en;
        $list->status_value_cn = optional($list->invoiceStatus)->status_value_cn;
        $list->account_code = optional($list->bankAccount)->account_code;
        $list->bank_name_en = optional($list->bankAccount)->account_name_en;
        $list->bank_name_cn = optional($list->bankAccount)->account_name_cn;
        $list->charts_en = optional($list->chartsAccount)->account_name_en;
        $list->charts_cn = optional($list->chartsAccount)->account_name_cn;
        return $list;
    }
    private function getOrderMasterData($list){
        $rvMasterInvoices = Receive_voucher_master_invoices::where('rv_master_id', $list->id)->get();
        $count = $rvMasterInvoices->count();

        $trans_detail_en = "";
        $trans_detail_cn = "";

        if ($count === 0) {
            $trans_detail_en = $list->charts_en;
            $trans_detail_cn = $list->charts_cn;
        } else if ($count === 1) {
            // ✅ Safely access the first record's invoice_master_id
            $invoiceMasterId = $rvMasterInvoices->first()->invoice_master_id;
            $invoice_no = Invoice_master::where('id', $invoiceMasterId)->value('invoice_no');

            $trans_detail_en = $invoice_no;
            $trans_detail_cn = $invoice_no;
        } else {
            $trans_detail_en = "Multiple";
            $trans_detail_cn = "Multiple";
        }

        return [
            'id' => $list->id,
            'rv_number' => $list->rv_number,
            'rv_date' => $list->rv_date,
            'customer_code' => $list->customer_code,
            'customer_id' => $list->customer_id,
            'account_name_en' => $list->account_name_en,
            'account_name_cn' => $list->account_name_cn,
            'status_value_en' => $list->status_value_en,
            'status_value_cn' => $list->status_value_cn,
            'bank_name_en' => $list->bank_name_en,
            'bank_name_cn' => $list->bank_name_cn,
            'charts_en' => $list->charts_en,
            'charts_cn' => $list->charts_cn,
            'currency' => $list->currency,
            'ex_rate' => $list->ex_rate,
            'total' => $list->total,
            'amount_paid' => $list->amount_paid,
            'count' => $count,
            'trans_detail_en' => $trans_detail_en,
            'trans_detail_cn' => $trans_detail_cn,
            'rv_status_id' => $list->rv_status_id,
        ];
    }
    private function getOrderDetailsData($list){
        if($list->rv_status_id != 5){
            $details = $list->rvDetails->map(function($detail) {
                $product_code = optional($detail->product)->product_code;
                $product_title_en = optional($detail->product)->product_title_en;
                $product_title_cn = optional($detail->product)->product_title_cn;
                $account_code = optional($detail->account)->account_code;
                $account_name_en = optional($detail->account)->account_name_en;
                $account_name_cn = optional($detail->account)->account_name_cn;
                return [
                    'id' => $detail->id,
                    'account_code' => $detail->account_code,
                    'invoice_no' => $detail->invoice_no,
                    'ex_rate' => $detail->ex_rate,
                    'currency' => $detail->currency,
                    'qty' => $detail->qty,
                    'amount_paid' => $detail->amount_paid,
                    'amount' => $detail->amount,
                    'base_amount' => $detail->base_amount,
                    'particulars' => $detail->particulars,
                    'ex_rate_diff' => $detail->ex_rate_diff,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'account_code' => $account_code,
                    'account_name_en' => $account_name_en,
                    'account_name_cn' => $account_name_cn,
                    'source' => 'main',
                ];
            });
            return $details;
        }
        else{
            $detailsCopy = $list->rvDetailsCopy->map(function($detail) {
                $product_code = optional($detail->product)->product_code;
                $product_title_en = optional($detail->product)->product_title_en;
                $product_title_cn = optional($detail->product)->product_title_cn;
                $account_code = optional($detail->account)->account_code;
                $account_name_en = optional($detail->account)->account_name_en;
                $account_name_cn = optional($detail->account)->account_name_cn;
                return [
                    'id' => $detail->id,
                    'account_code' => $detail->account_code,
                    'invoice_no' => $detail->invoice_no,
                    'ex_rate' => $detail->ex_rate,
                    'currency' => $detail->currency,
                    'qty' => $detail->qty,
                    'amount_paid' => $detail->amount_paid,
                    'amount' => $detail->amount,
                    'base_amount' => $detail->base_amount,
                    'particulars' => $detail->particulars,
                    'ex_rate_diff' => $detail->ex_rate_diff,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'account_code' => $account_code,
                    'account_name_en' => $account_name_en,
                    'account_name_cn' => $account_name_cn,
                    'source' => 'main',
                ];
            });
            return $detailsCopy;
        }
    }
    public function voidReceiveVoucher(Request $request){
        DB::beginTransaction();

        try {
            if (!$request->has('details') || empty($request->details)) {
                return response()->json([
                    'token'   => 'Error',
                    'message' => 'No details found.',
                    'action'  => 'update'
                ]);
            }

            foreach ($request->details as $list) {
                // Ensure $list is an array (in case it's a JSON string)
                if (is_string($list)) {
                    $list = json_decode($list, true);
                }

                if (!is_array($list) || !isset($list['rv_number'])) {
                    throw new \Exception('Invalid RV detail format.');
                }

                $rv_number = $list['rv_number'];

                $rv = Receive_voucher_master::where('rv_number', $rv_number)->first();
                if ($rv) {
                    $rv->rv_status_id = 5;
                    $rv->save(); // ✅ This will fire `updated()` in the observer
                }
                // Call logAction from a service, not controller
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Receive Voucher',
                    't_rv_master',
                    'void',
                    'Void RV Number: ' . $rv_number
                );
            }

            // Fire related events
            event(new RVEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new CustInvoiceEvent('insert'));
            event(new PreorderEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit();

            return response()->json([
                'token'   => 'Success',
                'message' => 'Successfully Voided',
                'action'  => 'update'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();

            return response()->json([
                'token'   => 'Error',
                'message' => $e->getMessage(),
                'action'  => 'update'
            ]);
        }
    }
    public function getAllRVChartsOfAccounts(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');
        $accountCode = $request->input('accountCode');

        if($accountCode === '' || !$accountCode){
            $query = Charts_of_account::whereNotIn('account_code', function($subquery) {
                    $subquery->select('root_name')->from('m_charts_of_account');
                })->where('root_name', '!=', 0);
        }
        else{
            $query = Charts_of_account::whereNotIn('account_code', function($subquery) {
                    $subquery->select('root_name')->from('m_charts_of_account');
                })->where('root_name', '!=', 0)
                ->where('account_code','LIKE',"%{$accountCode}%");
        }
        // Apply search filter BEFORE paginate or get
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('account_code', 'like', "%{$search}%")
                ->orWhere('account_name_en', 'like', "%{$search}%")
                ->orWhere('account_name_cn', 'like', "%{$search}%");
            });
        }

        $query->orderBy('account_code');

        if ($perPage === -1) {
            $data = $query->get();
            $result = [
                'current_page' => 1,
                'data'         => $data,
                'last_page'    => 1,
                'per_page'     => $data->count(),
                'total'        => $data->count(),
            ];
        } else {
            $result = $query->paginate($perPage);
        }

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'  => $result,
        ]);
    }
    public function getRVExists($customer_id){
        // Fetch all records matching the customer ID
        $list = Accounts_receivable::with(['chartsAccount'])
            ->where('balance', '>', 0)
            ->where('customer_id', $customer_id)
            ->get();

        // If no data is found, return an empty array
        if ($list->isEmpty()) {
            return response()->json([
                'success' => false,
                'message' => 'No records found',
                'list'    => [],
            ]);
        }

        // Iterate over the list and prepare the data
        $data = $list->map(function ($item) {
            return [
                'id'                    => $item->id,
                'account_code'          => $item->account_code,
                'account_name_en'       => $item->chartsAccount->account_name_en ?? '',
                'account_name_cn'       => $item->chartsAccount->account_name_cn ?? '',
                'transaction_date'      => $item->transaction_date,
                'invoice_no'            => $item->invoice_no,
                'invoice_id'            => $item->invoice_id,
                'currency'              => $item->currency,
                'ex_rate'               => $item->ex_rate,
                'debit'                 => $item->debit,
                'credit'                => $item->credit,
                'amount_paid'           => $item->amount_paid,
                'base_amount'           => $item->base_amount,
                'balance'               => $item->balance,
            ];
        });

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $data,
        ]);
    }
    public function getCountExistCustomer($customer_code){
        return Customer::where('customer_code', $customer_code)->count();
    }
    public function updateReceiveVoucher(Request $request, $id){

        $OrigID = $id;
        $GlobalTableNo = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');

        $countCustomer = $this->getCountExistCustomer($request->customer_code);
        if($countCustomer === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Customer Account does not exist',
                'id'        => $id,
                'action'    => $Action
            ]);
        }

        if($request->ex_rate === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Exchange Rate is Required',
                'action'    => 'Insert'
            ]);
        }

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            $account_code = "";
            $flag = 0;
            $arrayInvoiceNo = [];
            $rv_status_id = $request->rv_status_id;

            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                        if($list['account_code'] === '12200'){
                            $flag = 1;
                            $arrayInvoiceNo[] = $list['invoice_no'];
                        }
                        $account_code = $list['account_code'];
                    }
                }
            }

            $rvMaster = Receive_voucher_master::whereHas('rvDetails', function ($q) use ($arrayInvoiceNo) {
                    $q->whereIn('invoice_no', $arrayInvoiceNo); // $invoiceNos = ['INV-001', 'INV-002', ...]
                })
                ->selectRaw('COALESCE(SUM(amount_paid), 0) as amount')
                ->orderByDesc('id')
                ->limit(1)
                ->first();

            $total_amount_paid = $rvMaster->amount;

            if($flag === 0){
                if((float) $request->amount_paid === 0){
                    $rv_status_id = 2;
                }
                if((float) $request->amount_paid > (float) $request->total){
                    $rv_status_id = 1;
                }
                if((float) $request->amount_paid > (float) $request->total){
                    $rv_status_id = 3;
                }
            }
            if($flag === 1){
                if($total_amount_paid >= $request->total){
                    $rv_status_id = 1;
                }
                if($total_amount_paid < $request->total){
                    $rv_status_id = 3;
                }
            }

            if ((int) $id === 0) {
                $AutoGenerated = new AutoGenerated();
                $rv_number = $AutoGenerated->getNextNo("rv_number","RV","t_rv_master");
                $inserMaster = [
                    'rv_number' => $rv_number,
                    'account_code' => $account_code,
                    'bank' => $request->bank,
                    'customer_id' => $request->customer_id,
                    'rv_date' => $request->rv_date,
                    'rv_status_id' => $rv_status_id,
                    'ex_rate' => $request->ex_rate,
                    'currency' => $request->currency,
                    'total' => $request->total,
                    'base_total' => $request->base_total,
                    'amount_paid' => $request->amount_paid,
                    'base_amount_paid' => $request->base_amount_paid,
                    'bank_charges' => $request->bank_charges,
                    'base_bank_charges' => $request->base_bank_charges,
                    'excess_amount' => $request->excess_amount,
                    'base_excess_amount' => $request->base_excess_amount,
                    'invoice_deposit' => $request->invoice_deposit,
                    'credit_used' => $request->credit_used,
                ];
                $master = Receive_voucher_master::create($inserMaster);
                $OrigID = $master->id;
                $GlobalTableNo = $rv_number;
            }
            else{
                $master = Receive_voucher_master::find($request['id']);
                if ($master) {
                    $master->account_code = $account_code;
                    $master->bank = $request->bank;
                    $master->customer_id = $request->customer_id;
                    $master->rv_date = $request->rv_date;
                    $master->rv_status_id = $rv_status_id;
                    $master->ex_rate = $request->ex_rate;
                    $master->currency = $request->currency;
                    $master->total = $request->total;
                    $master->base_total = $request->base_total;
                    $master->amount_paid = $request->amount_paid;
                    $master->base_amount_paid = $request->base_amount_paid;
                    $master->bank_charges = $request->bank_charges;
                    $master->base_bank_charges = $request->base_bank_charges;
                    $master->excess_amount = $request->excess_amount;
                    $master->base_excess_amount = $request->base_excess_amount;
                    $master->invoice_deposit = $request->invoice_deposit;
                    $master->credit_used = $request->credit_used;
                    $master->save();
                }
                $GlobalTableNo = $master->rv_number;
            }
            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }
                    $recordID = $list['id'];
                    $detail_id = 0;
                    if ((int) $list['is_deleted'] === 1) {
                        $detail = Receive_voucher_detail::find($recordID);
                        if ($detail) {
                            $detail->delete();
                        }
                    }
                    if((int) $list['is_deleted'] === 0){
                        if ((int) $recordID === 0) {
                            $insertDetail = [
                                'rv_number' => $GlobalTableNo,
                                'rv_date' => $request->rv_date,
                                'customer_id' => $request->customer_id,
                                'account_code' => $list['account_code'],
                                'currency' => $request->currency,
                                'ex_rate' => $request->ex_rate,
                                'amount' => $list['amount'],
                                'base_amount' => $list['base_amount'],
                                'amount_paid' => $list['amount_paid'],
                                'particulars' => $list['particulars'],
                                'invoice_no' => $list['invoice_no'],
                                'remarks' => ""
                            ];
                            $detail = Receive_voucher_detail::create($insertDetail);
                            $detail_id = $detail->id;
                        }
                        else{
                            $detail = Receive_voucher_detail::find($recordID);
                            if ($detail) {
                                $detail->rv_date = $request->rv_date;
                                $detail->customer_id = $request->customer_id;
                                $detail->account_code = $list['account_code'];
                                $detail->currency = $request->currency;
                                $detail->ex_rate = $request->ex_rate;
                                $detail->amount = $list['amount'];
                                $detail->base_amount = $list['base_amount'];
                                $detail->amount_paid = $list['amount_paid'];
                                $detail->particulars = $list['particulars'];
                                $detail->invoice_no = $list['invoice_no'];
                                $detail->save();
                                $detail_id = $detail->id;
                            }
                        }
                    }
                }   
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Receive Voucher', 't_rv_master',
                $Action,
                'RV No : ' . $GlobalTableNo
            );

            event(new RVEvent($Action));
            event(new CustomerEvent($Action));
            event(new CustInvoiceEvent($Action));
            event(new SOEvent($Action));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Successfully Saved',
                'id'        => $OrigID,
                'action'    => $Action
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }

    }
    public function doGetButtonValue($customer_id){
        // 1. Current Credit
        $allCredits = Account_customer_cn::where('customer_id', $customer_id)->get();
        $current_credit = $allCredits->sum(function ($item) {
            return $item->credit - $item->debit;
        });

        // 2. Invoices with status = 2
        $invoices = Invoice_master::where('customer_id', $customer_id)
            ->where('invoice_status_id', 2)
            ->get();

        $total = $invoices->sum('total');
        $credit_used = $invoices->sum('credit_used');
        $total_payment = $invoices->sum(function ($item) {
            return $item->total_deposit + $item->credit_used + $item->payment;
        });

        // Format result
        $data = [
            'current_credit' => $current_credit,
            'total'          => $total,
            'credit_used'    => $credit_used,
            'total_payment'  => $total_payment,
        ];

        // Return JSON response
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $data,
        ]);
    }
}
