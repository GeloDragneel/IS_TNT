<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;
use App\Models\Grn_details;
use App\Models\Grn_master;
use App\Models\Products;
use App\Models\POrder_detail;
use App\Models\Orders;
use App\Models\Order_Voucher;
use App\Models\Supplier;
use App\Models\Price_setup;
use App\Models\ISSettings;
use App\Models\Inventory_allocation;
use App\Models\Sales_order_qty_ids;
use App\Models\Customer;
use App\Models\Receive_voucher_master;
use App\Models\Receive_voucher_detail;
use App\Models\Account_customer_cn;
use App\Models\Payment_orders_cn;
use App\Models\Sales_order_master;
use App\Models\Sales_order_detail;
use App\Models\Inventory_tblmaster;

use Carbon\Carbon;
use Illuminate\Http\Request;
use App\Events\ProductEvent;
use App\Events\LogEvent;
use App\Events\POEvent;
use App\Events\PVEvent;
use App\Events\PreorderEvent;
use App\Events\GRNEvent;
use App\Events\AllocationEvent;
use App\Events\SOEvent;
use App\Services\AutoGenerated;
class ReceiveGoodsController extends Controller{

    public function getAllReceiveGoods(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $supplierCodes = $request->input('supplier_codes', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        // Base query with eager loading
        $query = Grn_master::with([
            'supplier:id,suppliername_en,suppliername_cn,supplier_code',
            'grnDetails.product:id,product_code,product_title_en,product_title_cn,item_weight,pcs_per_carton',
            'grnStatus:id,grn_status_en,grn_status_cn',
        ])->orderByDesc('id');


        // Filters
        if (!empty($supplierCodes)) {
            $query->whereIn('supplier_id', $supplierCodes);
        }
     
        if ($categoryDates === 'PurchaseDate' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(grn_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('grn_no', 'like', "%{$search}%")
                    ->orWhereHas('supplier', function ($q) use ($search) {
                        $q->where('suppliername_en', 'like', "%{$search}%")
                        ->orWhere('suppliername_cn', 'like', "%{$search}%")
                        ->orWhere('supplier_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('grnStatus', function ($q) use ($search) {
                        $q->where('grn_status_en', 'like', "%{$search}%")
                        ->orWhere('grn_status_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('grnDetails.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();
        // Transform all orders
        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];
        // Get all active currencies

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allData->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $allData->sum('base_total') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();
    
        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

        // Footer for current page
        $footer = [
            'total' => $paginatedData->sum('total'),
        ];

        // Return JSON
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result->currentPage(),
                'data' => $paginatedData,
                'footer' => $footer,
                'footer2' => $footer2, // Assuming you handle this part separately
                'last_page' => $result->lastPage(),
                'per_page' => $result->perPage(),
                'total' => $result->total(),
            ]
        ]);
    }
    private function transformOrderData($list){
        $suppliername_en = optional($list->supplier)->suppliername_en;
        $suppliername_cn = optional($list->supplier)->suppliername_cn ?: $suppliername_en;

        $list->supplier_code = optional($list->supplier)->supplier_code;
        $list->suppliername_en = $suppliername_en;
        $list->suppliername_cn = $suppliername_cn;
        $list->ex_rate = number_format($list->ex_rate, 4);
        $list->grn_status_en = optional($list->grnStatus)->grn_status_en;
        $list->grn_status_cn = optional($list->grnStatus)->grn_status_cn;

        return $list;
    }
    public function getGRNInfo($id){
        $grn = Grn_master::with(['supplier', 'grnDetails.product'])->where('id', $id)->first();
        if (!$grn) {
            return [];
        }

        $suppliername_en = $grn->supplier->suppliername_en ?? '';
        $suppliername_cn = $grn->supplier->suppliername_cn ?? '';
        $suppliername_cn = $suppliername_cn === '' ? $suppliername_en : $suppliername_cn;

        $supplier_address_en = $grn->supplier->supplier_address_en ?? '';
        $supplier_address_cn = $grn->supplier->supplier_address_cn ?? '';
        $supplier_address_cn = $supplier_address_cn === '' ? $supplier_address_en : $supplier_address_cn;

        $mergedDetailsModels = $grn->grnDetails;

        // Map merged collection to arrays
        $mergedDetails = $mergedDetailsModels->map(function ($detail) {
            $countOrder = Orders::where('product_id',$detail->product_id)->where('show_category','orders')->count();
            return [
                'id'                    => $detail->id,
                'grn_no'                => $detail->grn_no,
                'po_number'             => $detail->po_number,
                'po_id'                 => $detail->po_id,
                'product_id'            => $detail->product_id,
                'supplier_id'           => $detail->supplier_id,
                'qty'                   => $detail->qty,
                'orig_qty'              => $detail->qty,
                'price'                 => $detail->price,
                'total'                 => $detail->total,
                'base_total'            => $detail->base_total,
                'currency'              => $detail->currency,
                'ex_rate'               => $detail->ex_rate,
                'item_cost'             => $detail->item_cost,
                'cartons'               => $detail->cartons,
                'lcm'                   => $detail->lcm,
                'bcm'                   => $detail->bcm,
                'vweight'               => $detail->vweight,
                'cbm'                   => $detail->cbm,
                'nw'                    => $detail->nw,
                'cnt_weight'            => $detail->cnt_weight,
                'net_weight'            => $detail->cnt_weight * $detail->cartons,
                'hcm'                   => $detail->hcm,
                'received_qty'          => $detail->received_qty,
                'invoice_deposit'       => $detail->invoice_deposit,
                'allocation'            => $detail->allocation,
                'imported'              => $detail->imported,
                'warehouse'             => $detail->warehouse,
                'ap_invoice_no'         => $detail->ap_invoice_no,
                'advance_payment'       => $detail->advance_payment,
                'base_advance_payment'  => $detail->base_advance_payment,
                'product_code'          => optional($detail->product)->product_code,
                'product_title_en'      => optional($detail->product)->product_title_en,
                'product_title_cn'      => optional($detail->product)->product_title_cn,
                'item_weight'           => optional($detail->product)->item_weight,
                'pcs_per_carton'        => optional($detail->product)->pcs_per_carton,
                'is_deleted'            => 0,
                'indexInt'              => $detail->id . rand(1, 100),
                'age_type'              => 'old',
                'countOrder'            => $countOrder
            ];
        })->values();

        $totalCountOrder = $mergedDetails->sum('countOrder');

        $list = [
            'id'                    => $grn->id,
            'supplier_id'           => $grn->supplier_id,
            'supplier_code'         => $grn->supplier->supplier_code ?? '',
            'suppliername_en'       => $suppliername_en,
            'suppliername_cn'       => $suppliername_cn,
            'supplier_address_en'   => $supplier_address_en,
            'supplier_address_cn'   => $supplier_address_cn,
            'warehouse'             => $grn->warehouse,
            'grn_no'                => $grn->grn_no,
            'grn_date'              => $grn->grn_date,
            'ex_rate'               => $grn->ex_rate,
            'grn_status_id'         => $grn->grn_status_id,
            'currency'              => $grn->currency,
            'shipper_id'            => $grn->shipper_id,
            'company_id'            => $grn->company_id,
            'total'                 => $grn->total,
            'base_total'            => $grn->base_total,
            'details'               => $mergedDetails,
            'countOrders'           => $totalCountOrder,
        ];
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function delReceiveGoods(Request $request){
        $ids = $request->input('ids');

        if (!is_array($ids) || empty($ids)) {
            return response()->json(['message' => 'No GRN IDs provided'], 400);
        }

        // Start the transaction
        DB::beginTransaction();

        try {
            foreach ($ids as $id) {
                $grn = Grn_master::find($id);

                // If GRN is not found, continue with the next ID
                if (!$grn) continue;

                // Log the deletion action
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Receive Goods', 't_grn_master',
                    'delete',
                    'GRN No : ' . $grn->grn_no
                );

                // Delete the GRN
                $grn->delete();
            }

            // Trigger events after successful deletion
            event(new ProductEvent('delete'));
            event(new LogEvent('delete'));
            event(new GRNEvent('delete'));
            event(new AllocationEvent('delete'));

            // Commit the transaction
            DB::commit();

            // Return success response
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Record has been Deleted'
            ]);
            
        } catch (\Exception $e) {
            // Rollback the transaction if something goes wrong
            DB::rollBack();

            // Return error response with exception message
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage()
            ]);
        }
    }
    public function grnGRNProductInfo($productCode){
        $product = Products::where('product_code', 'like', "%{$productCode}%")->get();
        $count = $product->count();
        if ($count === 0) {
            return response()->json([
                'success' => true,
                'token'   => 'ProductNotExists',
                'message' => 'Product Code is not exists',
                'list'    => [],
            ]);
        }
        if ($count > 1) {
            return response()->json([
                'success' => true,
                'token'   => 'MultipleProducts',
                'message' => 'Multiple Products',
                'list'    => [],
            ]);
        }
      
        $product = $product->first(); // 🔑 get the model from the collection
        $retail_price = Price_setup::where('product_id',$product->id)->where('customer_group_id',6)->value('retail_price');

        $porderDetails = POrder_detail::where('product_id', $product->id)
            ->whereRaw('qty - receive_qty > 0')->get(['id','qty', 'receive_qty','deposit','base_deposit','po_number']);
        $count = $porderDetails->count();

        $remPOQty = $porderDetails->reduce(function ($carry, $item) {
            return $carry + ($item->qty - $item->receive_qty);
        }, 0);

        $deposit = $porderDetails->reduce(function ($carry, $item) {
            return $carry + $item->deposit;
        }, 0);

        $base_deposit = $porderDetails->reduce(function ($carry, $item) {
            return $carry + $item->base_deposit;
        }, 0);

        $po_number = $porderDetails->reduce(function ($carry, $item) {
            return $item->po_number;
        }, 0);

        $po_id = $porderDetails->reduce(function ($carry, $item) {
            return $item->id;
        }, 0);


        $cartons = $remPOQty / $product->pcs_per_carton;
        $total = $remPOQty * $product->offered_cost;

        $list = [
            'count'             => $count,
            'product_id'        => $product->id,
            'product_code'      => $product->product_code,
            'product_title_en'  => $product->product_title_en,
            'product_title_cn'  => $product->product_title_cn,
            'price'             => $product->offered_cost,
            'total'             => $total,
            'qty'               => $remPOQty,
            'cartons'           => $cartons,
            'retail_price'      => $retail_price,
            'deposit'           => $deposit,
            'base_deposit'      => $base_deposit,
            'po_id'             => $po_id,
            'po_number'         => $po_number === 0 ? '' : $po_number,
            'item_cost'         => $product->item_cost,
            'item_weight'       => $product->item_weight,
            'pcs_per_carton'    => $product->pcs_per_carton,
        ];

        return response()->json([
            'success' => true,
            'token'   => 'Success',
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function getAllGRNProducts(Request $request) {
        // Get the pagination parameters from the request
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');
        $sortId = $request->input('sortId', []);

        // If sortId is not an array, convert it to an array
        if (!is_array($sortId)) {
            $sortId = explode(',', $sortId);  // Convert comma-separated string to array
        }

        // Define the query, eager loading the product relationship
        $query = POrder_detail::with(['product']) // Load the related product
            ->whereRaw('qty - receive_qty > 0') // Filter where qty - receive_qty > 0
            ->whereHas('product'); // Ensure only records with an associated product are returned

        // If 'sortId' is provided, modify the order query to prioritize these IDs
        if (!empty($sortId)) {
            // Apply the FIELD(id, ...) sorting first, without the second `orderBy('id', 'desc')`
            $query->orderByRaw("FIELD(id, " . implode(',', $sortId) . ") DESC");
        } else {
            // If no sortId is provided, use default descending order by `id`
            $query->orderBy('id', 'desc');
        }

        // Apply search filters if any
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('po_number', 'like', "%{$search}%")
                    ->orWhereHas('product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Check if pagination is needed, or if we need all data (when perPage is -1)
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Define the transformation function to shape the output as needed
        $transform = function ($porderDetail) {
            $product = $porderDetail->product; // Get the related product
            $qty = $porderDetail->qty - $porderDetail->receive_qty ?? 0;
            $cartons = $qty / $product->pcs_per_carton ?? 0;
            // Return only the necessary fields
            return [
                'id'                => $porderDetail->id,
                'product_id'        => $product->id ?? 0,
                'product_code'      => $product->product_code ?? '',
                'product_title_en'  => $product->product_title_en ?? '',
                'product_title_cn'  => $product->product_title_cn ?? '',
                'pcs_per_carton'    => $product->pcs_per_carton ?? 0,
                'item_weight'       => $product->item_weight ?? 0,
                'item_cost'         => $product->item_cost ?? 0,
                'retail_price'      => $product->priceSetup->retail_price ?? 0, // Assuming priceSetup relation exists
                'po_number'         => $porderDetail->po_number ?? '',
                'deposit'           => $porderDetail->deposit ?? 0,
                'base_deposit'      => $porderDetail->base_deposit ?? 0,
                'qty'               => $qty,
                'cartons'           => $cartons,
                'receive_qty'       => $porderDetail->receive_qty ?? 0,
                'price'             => $porderDetail->price ?? 0,
                'po_qty'            => $porderDetail->po_qty ?? 0,
                'new_qty'           => $porderDetail->new_qty ?? 0, // Ensure this field exists on POrder_detail
            ];
        };

        // If perPage is -1, return all data, otherwise, paginate
        $data = $perPage === -1
            ? $result->map($transform)
            : tap($result)->getCollection()->transform($transform);

        // Return the response with the formatted data
        return response()->json([
            'success' => true,
            'message' => 'success',
            'product' => $perPage === -1
                ? [
                    'current_page' => 1,
                    'data' => $data,
                    'last_page' => 1,
                    'per_page' => $data->count(),
                    'total' => $data->count(),
                ]
                : $result,
        ]);
    }
    public function getCountExistSupplier($supplier_code){
        return Supplier::where('supplier_code', $supplier_code)->count();
    }
    public function updateReceiveGoods(Request $request, $id){
        $OrigID = $id;
        $GlobalGRNNo = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');

        $countSupplier = $this->getCountExistSupplier($request->supplier_code);
        if($countSupplier === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Supplier Code is not exists',
                'id'        => $id,
                'action'    => $Action
            ]);
        }

        if($request->ex_rate === 0){
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Exchange Rate is Required',
                'action'    => 'Insert'
            ]);
        }

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            if ((int) $id === 0) {
                $AutoGenerated = new AutoGenerated();
                $grn_no = $AutoGenerated->getNextNo("grn_no","GRN-","t_grn_master");
                $inserMaster = [
                    'grn_no'        => $grn_no,
                    'supplier_id'   => $request->supplier_id,
                    'warehouse'     => $request->warehouse,
                    'grn_status_id' => $request->grn_status_id,
                    'shipper_id'    => $request->shipper_id,
                    'grn_date'      => $request->grn_date,
                    'ex_rate'       => $request->ex_rate,
                    'company_id'    => $request->company_id,
                    'currency'      => $request->currency,
                    'total'         => $request->total,
                    'base_total'    => $request->base_total,
                    'imported'      => 0
                ];
                $poMaster = Grn_master::create($inserMaster);
                $OrigID = $poMaster->id;
                $GlobalGRNNo = $grn_no;
            }
            else{
                $master = Grn_master::find($request['id']);
                if ($master) {
                    $master->grn_no = $request->grn_no;
                    $master->supplier_id = $request->supplier_id;
                    $master->warehouse = $request->warehouse;
                    $master->grn_status_id = $request->grn_status_id;
                    $master->shipper_id = $request->shipper_id;
                    $master->grn_date = $request->grn_date;
                    $master->ex_rate = $request->ex_rate;
                    $master->company_id = $request->company_id;
                    $master->currency = $request->currency;
                    $master->total = $request->total;
                    $master->base_total = $request->base_total;
                    $master->save();
                }
                $GlobalGRNNo = $master->grn_no;
            }

            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }
                    $base_total = 0;
                    if($baseCurrency != $currency){
                        $base_total = (float) $list['total'];
                    }
                    else{
                        if($operator === 'Divide'){
                            $base_total = (float) $list['total'] / (float) $request->ex_rate;
                        }
                        if($operator === 'Multiply'){
                            $base_total = (float) $list['total'] * (float) $request->ex_rate;
                        }
                    }

                    $recordID = $list['id'];
                    $grn_detail_id = 0;

                    if((int) $list['is_deleted'] === 1){
                        Grn_details::where('id', $recordID)->delete();
                    }

                    if((int) $list['is_deleted'] === 0){
                        if ((int) $recordID === 0) {
                            $insertDetail = [
                                'grn_no'                => $GlobalGRNNo,
                                'grn_date'              => $request->grn_date,
                                'product_id'            => $list['product_id'],
                                'cnt_weight'            => $list['cnt_weight'],
                                'cartons'               => $list['cartons'],
                                'lcm'                   => $list['lcm'],
                                'bcm'                   => $list['bcm'],
                                'hcm'                   => $list['hcm'],
                                'cbm'                   => $list['cbm'],
                                'vweight'               => $list['vweight'],
                                'nw'                    => $list['nw'],
                                'qty'                   => $list['qty'],
                                'price'                 => $list['price'],
                                'total'                 => $list['total'],
                                'base_total'            => $base_total,
                                'po_id'                 => $list['po_id'],
                                'warehouse'             => $request->warehouse,
                                'currency'              => $request->currency,
                                'received_qty'          => $list['qty'],
                                'po_number'             => $list['po_number'],
                                'ex_rate'               => $request->ex_rate,
                                'supplier_id'           => $request->supplier_id,
                                'advance_payment'       => $list['advance_payment'],
                                'base_advance_payment'  => $list['base_advance_payment'],
                                'imported'              => 0,
                                'grn_status_id'         => $request->grn_status_id,
                                'item_cost'             => $list['item_cost'],
                                'ap_invoice_no'         => ''
                            ];
                            $poDetails = Grn_details::create($insertDetail);
                            $grn_detail_id = $poDetails->id;

                            Products::where('id', $list['product_id'])->update(['item_weight' => $list['item_weight']]);
                        }
                        else{
                            $detail = Grn_details::find($list['id']);
                            if ($detail) {
                                $detail->grn_date = $request->grn_date;
                                $detail->product_id = $list['product_id'];
                                $detail->cnt_weight = $list['cnt_weight'];
                                $detail->cartons = $list['cartons'];
                                $detail->lcm = $list['lcm'];
                                $detail->bcm = $list['bcm'];
                                $detail->hcm = $list['hcm'];
                                $detail->cbm = $list['cbm'];
                                $detail->vweight = $list['vweight'];
                                $detail->nw = $list['nw'];
                                $detail->qty = $list['qty'];
                                $detail->price = $list['price'];
                                $detail->total = $list['total'];
                                $detail->po_id = $list['po_id'];
                                $detail->warehouse = $request->warehouse;
                                $detail->currency = $request->currency;
                                $detail->received_qty = $list['qty'];
                                $detail->po_number = $list['po_number'];
                                $detail->ex_rate = $request->ex_rate;
                                $detail->supplier_id = $request->supplier_id;
                                $detail->base_total = $base_total;
                                $detail->advance_payment = $list['advance_payment'];
                                $detail->base_advance_payment = $list['base_advance_payment'];
                                $detail->grn_status_id = $request->grn_status_id;
                                $detail->item_cost = $list['item_cost'];
                                $detail->save();
                                $grn_detail_id = $detail->id;

                                Products::where('id', $list['product_id'])->update(['item_weight' => $list['item_weight']]);
                            }
                        }
                    }
                }
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Receive Goods', 't_grn_master',
                $Action,
                'GRN No : ' . $request->grn_no
            );

            event(new POEvent($Action));
            event(new PVEvent($Action));
            event(new PreorderEvent($Action));
            event(new LogEvent($Action));
            event(new ProductEvent($Action));
            event(new AllocationEvent($Action));
            event(new GRNEvent($Action));
            event(new SOEvent($Action));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'GRN Details Successfully Saved',
                'id'        => $OrigID,
                'action'    => $Action
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }
    }
    public function getAllocationList(Request $request, $grnNo){
        // Get the pagination parameters from the request
        $perPage = (int) $request->input('per_page', 5);
        $search = $request->input('search', '');

        // Define the query, eager loading the product relationship
        $query = Inventory_allocation::with(['product', 'customer', 'shippingStat'])
            ->where('grn_no', $grnNo);

        $countAlloc = $query->count();

        if ($countAlloc === 0) {
            // Get all product_ids from GRN
            $productIds = Grn_details::where('grn_no', $grnNo)->pluck('product_id');

            // Only run query if there are product IDs
            if ($productIds->isNotEmpty()) {
                $query = Orders::with(['product', 'customer'])
                    ->where('show_category','orders')
                    ->whereIn('product_id', $productIds);
            } else {
                // Set query to empty if no product IDs found
                $query = Orders::whereRaw('1 = 0'); // or use empty collection
            }
        }

        // Apply search filters if any
        if ($search && $countAlloc > 0) {
            $query->where(function ($q) use ($search) {
                $q->where('so_number', 'like', "%{$search}%")
                    ->orWhereHas('product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })->orWhereHas('customer', function ($q) use ($search) {
                        $q->where('customer_code', 'like', "%{$search}%")
                            ->orWhere('account_name_en', 'like', "%{$search}%")
                            ->orWhere('account_name_cn', 'like', "%{$search}%");
                    });
            });
        }
        if ($search && $countAlloc === 0) {
            $query->where(function ($q) use ($search) {
                $q->whereHas('product', function ($q) use ($search) {
                    $q->where('product_code', 'like', "%{$search}%")
                    ->orWhere('product_title_en', 'like', "%{$search}%")
                    ->orWhere('product_title_cn', 'like', "%{$search}%");
                })->orWhereHas('customer', function ($q) use ($search) {
                    $q->where('customer_code', 'like', "%{$search}%")
                    ->orWhere('account_name_en', 'like', "%{$search}%")
                    ->orWhere('account_name_cn', 'like', "%{$search}%");
                });
            });
        }
        // Paginate the query
        $result = $query->paginate($perPage);

        // Define the transformation function to shape the output as needed
        $transform = function ($list) {

            $account_name_en = optional($list->customer)->account_name_en ?? '';
            $account_name_cn = optional($list->customer)->account_name_cn ?? '';
            $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);

            $total = $list->qty * $list->price;
            return [
                'id'                => $list->id,
                'currency'          => $list->currency ?? '',
                'qty'               => $list->qty ?? 0,
                'price'             => $list->price ?? 0,
                'total'             => $total ?? 0,
                // Avoid full `product` and `customer` objects, just select the necessary fields
                'product_code'      => optional($list->product)->product_code ?? '',
                'product_title_en'  => optional($list->product)->product_title_en ?? '',
                'product_title_cn'  => optional($list->product)->product_title_cn ?? '',
                'customer_code'     => optional($list->customer)->customer_code ?? '',
                'account_name_en'   => $account_name_en,
                'account_name_cn'   => $account_name_cn,
                // Optionally include `shippingStat` details
                'shipping_stat_en'  => optional($list->shippingStat)->shipping_stat_en ?? '',
                'shipping_stat_cn'  => optional($list->shippingStat)->shipping_stat_cn ?? ''
            ];
        };

        // Transform paginated data
        $paginatedData = $result->getCollection()->transform(fn($item) => $transform($item));

        // Return the response with the formatted data
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result->currentPage(),
                'data' => $paginatedData,
                'last_page' => $result->lastPage(),
                'per_page' => $result->perPage(),
                'total' => $result->total(),
            ]
        ]);
    }
    public function getOrders(Request $request){
        $arrayResult = [];
        $getArray = [];
        $grn_no = $request->grn_no;
        $warehouse = $request->warehouse;
        $countLoop = 0;

        DB::beginTransaction();

        try {

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');

            Grn_master::where('grn_no', $grn_no)->update(['grn_status_id' => 2]);
            Grn_details::where('grn_no', $grn_no)->update(['grn_status_id' => 2]);

            foreach ($request->details as $list) {
                if (is_string($list)) {
                    $list = json_decode($list, true);
                    $list['grn_date'] = Carbon::parse($list['grn_date'])->timezone('Asia/Singapore')->format('M d Y');

                    $orderIds = Sales_order_qty_ids::where('po_detail_id',$list['po_id'])->pluck('order_id');
                    $orders = Orders::with(['customer'])
                        ->whereIn('id', $orderIds)
                        ->where('show_category','orders')
                        ->where('rwareHouse', $list['warehouse'])->get();

                    // Map to your desired "selected item" structure
                    $selectedOrders = $orders->map(function ($order) use ($list) {
                        $account_name_en = optional($order->customer)->account_name_en ?? '';
                        $account_name_cn = optional($order->customer)->account_name_cn ?? '';
                        $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);
                        return [
                            'id' => $order->id,
                            'customer_code' => optional($order->customer)->customer_code ?? '',
                            'account_name_en' => $account_name_en,
                            'account_name_cn' => $account_name_cn,
                            'grn_id' => $list['id'],
                            'grn_no' => $list['grn_no'],
                            'po_id' => $list['po_id'],
                            'warehouse' => $list['warehouse'],
                            'qty' => $order->qty ?? 0,
                            'new_qty' => 0,
                            'allocated_qty' => $order->allocated_qty ?? 0,
                            'remaining_qty' => ($order->qty ?? 0) - ($order->allocated_qty ?? 0),
                        ];
                    });
                    $orderQty = $selectedOrders->sum('remaining_qty');
                    $grnQty = Grn_details::where('id', $list['id'])->get()
                        ->sum(function ($row) {
                            return ($row->qty ?? 0) - ($row->allocation ?? 0);
                        });

                    if($orderQty > $grnQty){
                        $arrayResult[] = [
                            'id' => $list['id'],
                            'grn_id' => $list['id'],
                            'po_id' => $list['po_id'],
                            'product_id' => $list['product_id'],
                            'product_code' => $list['product_code'],
                            'product_title_en' => $list['product_title_en'],
                            'product_title_cn' => $list['product_title_cn'],
                            'orderQty' => $orderQty,
                            'grnQty' => $grnQty,
                            'ordersArr' => $selectedOrders,
                            'allocated_qty' => 0,
                        ];
                    }
                    else{
                        $countLoop++;
                        foreach($orders as $order){
                            $grn = Grn_details::where('id', $list['id'])->first();
                            $availableAllocation = $grn ? ($grn->qty - $grn->allocation) : 0;
                            $aQty = $order->qty - $order->allocated_qty;
                            $qty = 0;
                            $deposit = 0;
                            $voucher_amount = Order_Voucher::where('voucher_no', $order->voucher_code)->value('value') ?? 0;
                            $base_voucher_amount = 0;

                            if($availableAllocation >= $aQty){
                                $qty = $aQty;
                            }
                            else{
                                $qty = $availableAllocation;
                            }

                            if($order->order_status === 1 || $order->order_status === 3){
                                $deposit = $order->item_deposit;
                            }

                            $operator = GlobalController::getOperator( $order->currency . $baseCurrency);
                            
                            if ($baseCurrency == $order->currency){
                                $base_voucher_amount = $voucher_amount;
                            }
                            else{
                                if ($operator == "Divide") { 
                                    $base_voucher_amount = $voucher_amount / $order->ex_rate;
                                }
                                if ($operator == "Multiply"){
                                    $base_voucher_amount = $voucher_amount * $order->ex_rate;
                                }
                            }

                            if($qty > 0){
                                $customer_code = Customer::where('id', $order->customer_id)->value('customer_code') ?? '';
                                $getArray[] = [
                                    'customer_id' => $order->customer_id,
                                    'customer_code' => $customer_code,
                                    'qty' => $qty,
                                    'price' => $order->price,
                                    'currency' => $order->currency,
                                    'sales_person_id' => $order->sales_person_id,
                                    'pod' => $order->pod,
                                    'warehouse' => $order->rwarehouse,
                                    'shipping_stat_id' => $order->shipping_stat_id,
                                    'product_id' => $order->product_id,
                                    'grn_detail_id' => $list['id'],
                                    'order_id' => $order->id,
                                    'po_detail_id' => $list['po_id'],
                                    'grn_no' => $list['grn_no'],
                                    'total' => $qty * $order->price,
                                    'deposit' => $deposit,
                                    'voucher_amount' => $voucher_amount,
                                    'base_voucher_amount' => $base_voucher_amount,
                                ];
                            }
                        }
                    }
                }
            }
            if($countLoop > 0){
                $allocArr = '';
                $countItems = 0;
                usort($getArray, function($a, $b){
                    return strtolower($a['customer_code']) < strtolower($b['customer_code']);
                });
                foreach($getArray as $item){
                    $so_number = "";
                    $unpaidInvoice = $this->doGetUnPaidInvoice($item['customer_id'], $item['currency']);
                    if($unpaidInvoice['id'] > 0){
                        $so_number = $unpaidInvoice['so_number'];
                    }
                    else{
                        $allocationSONumber = $this->doGetAllocationSONumber($item['customer_id'], $item['currency'],$item['grn_no']);
                        if($allocationSONumber['id'] > 0){
                            $so_number = $allocationSONumber['so_number'];
                        }
                        else{
                            $AutoGenerated = new AutoGenerated();
                            $so_number = $AutoGenerated->getNextNo("so_number", "SO", "t_inventory_allocation");
                        }
                    }
                    $insertAlloc = [
                        'customer_id' => $item['customer_id'],
                        'qty' => $item['qty'],
                        'allocated_qty' => $item['qty'],
                        'price' => $item['price'],
                        'currency' => $item['currency'],
                        'sales_person_id' => $item['sales_person_id'],
                        'pod' => $item['pod'],
                        'warehouse' => $item['warehouse'],
                        'shipping_stat_id' => $item['shipping_stat_id'],
                        'product_id' => $item['product_id'],
                        'grn_detail_id' => $item['grn_detail_id'],
                        'order_id' => $item['order_id'],
                        'po_detail_id' => $item['po_detail_id'],
                        'grn_no' => $item['grn_no'],
                        'total' => $item['total'],
                        'deposit' => $item['deposit'],
                        'voucher_amount' => $item['voucher_amount'],
                        'base_voucher_amount' => $item['base_voucher_amount'],
                        'so_number' => $so_number,
                    ];
                    $alloc = Inventory_allocation::create($insertAlloc);
                    $allocated_qty = Inventory_allocation::where('order_id', $order->id)->sum('qty');
                    Orders::where('id', $item['order_id'])->update([
                        'allocated_qty' => $allocated_qty,
                        'show_category' => 'history'
                    ]);
                    $allocArr .= $alloc->id . ',';
                    $countItems++;
                }
                if($countItems > 0){
                    $allocArr = rtrim($allocArr, ','); // removes trailing commas
                    $this->doMakeSOFromAllocation($grn_no,$baseCurrency,$allocArr);
                }
            }

            DB::commit(); // 👍 Success

            return response()->json([
                'token'     => 'Success',
                'message'   => 'Successfully Allocated',
                'action'    => 'insert',
                'array'     => $arrayResult,
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'action'    => 'insert',
                'array'     => $arrayResult,
            ]);
        }
    }
    public function allocatedOrders(Request $request){
        $arrayResult = [];
        DB::beginTransaction();

        $grn_no = $request->grn_no;
        $warehouse = $request->warehouse;
        $allocArr = '';
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');

        try {
            foreach ($request->details as $list) {
                if (is_string($list)) {
                    $list = json_decode($list, true);

                    $orderId = $list['id'];
                    $order = Orders::where('id',$orderId)->first();
                    $voucher_amount = 0;
                    $base_voucher_amount = 0;
                    $operator = GlobalController::getOperator( $order->currency . $baseCurrency);
                    $customer_type = Customer::where('id',$order->customer_id)->value('customer_type');
                    $item_cost = Products::where('id',$order->product_id)->pluck('item_cost')->first();

                    if($list['new_qty'] != $order->qty){

                        $AutoGenerated = new AutoGenerated();
                        $order_id = $AutoGenerated->getNextNo("order_id","WH","t_orders");
                        $newOrderQty = (int) $order->qty - (int) $list['new_qty'];

                        $newOrderDeposit = 0;
                        $newOrderBaseDeposit = 0;
                        $newOrderTotal = $newOrderQty * $order->price;
                        $newOrderBaseTotal = 0;
                        $newOrderETotalSales = 0;
                        $newOrderECostTotal = $item_cost * $newOrderQty;
                        $newOrderUpdateECostTotal = $item_cost * $list['new_qty'];

                        $newOrderUpdateDeposit = 0;
                        $newOrderUpdateBaseDeposit = 0;
                        $newOrderUpdatedTotal = $list['new_qty'] * $order->price;
                        $newOrderUpdatedBaseTotal = 0;
                        $newOrderUpdatedETotalSales = 0;
                        $newOrderUpdatedECostTotal = $item_cost * $list['new_qty'];

                        switch($customer_type){
                            case 'WC':
                                $newOrderDeposit = ($order->price_setup_deposit / $order->pcs_per_carton) * $newOrderQty;
                                $newOrderUpdateDeposit = ($order->price_setup_deposit / $order->pcs_per_carton) * $list['new_qty'];
                            break;
                            case 'RC':
                                $newOrderDeposit = $this->doGetRetailDeposit($order->product_id,$order->currency);
                                $newOrderDeposit = $newOrderDeposit * $newOrderQty;
                                $newOrderUpdateDeposit = $newOrderDeposit * $list['new_qty'];
                            break;
                        }
                        if ($order->ex_rate == 1){
                            $newOrderBaseTotal = $newOrderTotal;
                            $newOrderETotalSales = $newOrderQty * $order->price;
                            $newOrderBaseDeposit = $newOrderDeposit;

                            $newOrderUpdatedBaseTotal = $newOrderUpdatedTotal;
                            $newOrderUpdatedETotalSales = $list['new_qty'] * $order->price;
                            $newOrderUpdateBaseDeposit = $newOrderUpdateDeposit;
                        }
                        else{
                            if ($operator == "Divide") { 
                                $newOrderBaseTotal = $newOrderTotal / $order->ex_rate;
                                $newOrderETotalSales = ($newOrderQty * $order->price) / $order->ex_rate;
                                $newOrderBaseDeposit = $newOrderDeposit / $order->ex_rate;

                                $newOrderUpdatedBaseTotal = $newOrderUpdatedTotal / $order->ex_rate;
                                $newOrderUpdatedETotalSales = ($list['new_qty'] * $order->price) / $order->ex_rate;
                                $newOrderUpdateBaseDeposit = $newOrderUpdateDeposit / $order->ex_rate;
                            }
                            if ($operator == "Multiply"){
                                $newOrderBaseTotal = $newOrderTotal * $order->ex_rate;
                                $newOrderETotalSales = ($newOrderQty * $order->price) * $order->ex_rate;
                                $newOrderBaseDeposit = $newOrderDeposit * $order->ex_rate;

                                $newOrderUpdatedBaseTotal = $newOrderUpdatedTotal * $order->ex_rate;
                                $newOrderUpdatedETotalSales = ($list['new_qty'] * $order->price) * $order->ex_rate;
                                $newOrderUpdateBaseDeposit = $newOrderUpdateDeposit * $order->ex_rate;
                            }
                        }
                        $newOrderEProfit = $newOrderETotalSales - $newOrderECostTotal;
                        $newOrderUpdateEProfit = $newOrderUpdatedETotalSales - $newOrderUpdateECostTotal;

                        $orderInsert = [
                            'order_id' => $order_id,
                            'order_date' => $order->order_date,
                            'order_status' => $order->order_status,
                            'pcs_per_carton' => $order->pcs_per_carton,
                            'customer_id' => $order->customer_id,
                            'customer_group_id' => $order->customer_group_id,
                            'sales_person_id' => $order->sales_person_id,
                            'rwarehouse' => $order->rwarehouse,
                            'pod' => $order->pod,
                            'product_id' => $order->product_id,
                            'qty' => $newOrderQty,
                            'price_setup_deposit' => $order->price_setup_deposit,
                            'price_setup_deposit_currency' => $order->price_setup_deposit_currency,
                            'price' => $order->price,
                            'price_a' => $order->price_a,
                            'price_b' => $order->price_b,
                            'price_c' => $order->price_c,
                            'item_deposit' => $newOrderDeposit,
                            'base_item_deposit' => $newOrderBaseDeposit,
                            'currency' => $order->currency,
                            'ex_rate' => $order->ex_rate,
                            'base_total' => $newOrderBaseTotal,
                            'e_total_sales' => $newOrderETotalSales,
                            'e_total_sales_currency' => $baseCurrency,
                            'e_cost_total' => $newOrderECostTotal,
                            'e_cost_total_currency' => $baseCurrency,
                            'e_profit' => $newOrderEProfit,
                            'e_profit_currency' => $baseCurrency,
                            'show_category' => 'orders'
                        ];
                        $orderDetail = Orders::create($orderInsert);
                        $this->doSaveRV_ByNewOrder(1,$order->customer_id,$newOrderDeposit,$newOrderBaseDeposit,$order->ex_rate,$order->currency,$orderDetail->id,$order->product_id,$newOrderQty,$order->id);
                        Orders::where('id', $orderId)->update([
                            'qty' => $list['new_qty'],
                            'item_deposit' => $newOrderUpdateDeposit,
                            'base_item_deposit' => $newOrderUpdateBaseDeposit,
                            'base_total' => $newOrderUpdatedBaseTotal,
                            'e_total_sales' => $newOrderUpdatedETotalSales,
                            'e_profit' => $newOrderUpdateEProfit,
                            'e_cost_total' => $newOrderUpdateECostTotal,
                        ]);
                    }
                    if($list['new_qty'] > 0){
                        $so_number = "";
                        $unpaidInvoice = $this->doGetUnPaidInvoice($order->customer_id, $order->currency);

                        if($unpaidInvoice['id'] > 0){
                            $so_number = $unpaidInvoice['so_number'];
                        }
                        else{
                            $allocationSONumber = $this->doGetAllocationSONumber($order->customer_id, $order->currency,$list['grn_no']);
                            if($allocationSONumber['id'] > 0){
                                $so_number = $allocationSONumber['so_number'];
                            }
                            else{
                                $AutoGenerated = new AutoGenerated();
                                $so_number = $AutoGenerated->getNextNo("so_number", "SO", "t_inventory_allocation");
                            }
                        }
                        $insertAlloc = [
                            'customer_id' => $order->customer_id,
                            'qty' => $list['new_qty'],
                            'allocated_qty' => $list['new_qty'],
                            'price' => $order->price,
                            'currency' => $order->currency,
                            'sales_person_id' => $order->sales_person_id,
                            'pod' => $order->pod,
                            'warehouse' => $list['warehouse'],
                            'shipping_stat_id' => $order->shipping_stat_id,
                            'product_id' => $order->product_id,
                            'grn_detail_id' => $list['grn_id'],
                            'order_id' => $order->id,
                            'po_detail_id' => $list['po_id'],
                            'grn_no' => $list['grn_no'],
                            'total' => $order->price * $list['new_qty'],
                            'deposit' => $order->item_deposit,
                            'voucher_amount' => 0,
                            'base_voucher_amount' => 0,
                            'so_number' => $so_number,
                        ];
                        $alloc = Inventory_allocation::create($insertAlloc);
                        $allocated_qty = Inventory_allocation::where('order_id', $order->id)->sum('qty');
                        Orders::where('id', $orderId)->update([
                            'allocated_qty' => $allocated_qty,
                            'show_category' => 'history'
                        ]);
                        $allocArr .= $alloc->id . ',';
                    }
                }
            }
            $allocArr = rtrim($allocArr, ','); // removes trailing commas
            $this->doMakeSOFromAllocation($grn_no,$baseCurrency,$allocArr);

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Successfully Allocated',
                'action'    => 'insert'
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'action'    => 'insert'
            ]);
        }
    }
    public function doGetRetailDeposit($productId, $currency){
        $deposit = Price_setup::where('product_id', $productId)
            ->where('currency', $currency)
            ->where('type', 'retail')
            ->value('deposit');
        return $deposit ?? 0;  // If deposit is null, return 0
    }
    public function doGetUnPaidInvoice($customer_id, $currency){
        $result = Sales_order_master::selectRaw('
                COALESCE(id, 0) AS id,
                COALESCE(so_number, "") AS so_number,
                COALESCE(SUM(total), 0) AS total,
                COALESCE(SUM(sub_total_on_cost), 0) AS sub_total_on_cost,
                COALESCE(SUM(total_deposit), 0) AS total_deposit
            ')
            ->where('currency', $currency)
            ->where('customer_id', $customer_id)
            ->where('invoice_status_id', 2)
            ->groupBy('id', 'so_number')
            ->orderBy('id')
            ->limit(1)
            ->first();

        // Default array in case of no result
        $retval = [
            'id' => 0,
            'so_number' => '',
            'total' => 0,
            'sub_total_on_cost' => 0,
            'total_deposit' => 0
        ];

        if ($result) {
            $retval = [
                'id' => $result->ID,
                'so_number' => $result->so_number,
                'total' => $result->total,
                'sub_total_on_cost' => $result->sub_total_on_cost,
                'total_deposit' => $result->total_deposit
            ];
        }
        return $retval;
    }
    public function doGetAllocationSONumber($customer_id, $currency, $grn_no){
        $result = Inventory_allocation::selectRaw('
            COALESCE(id, 0) AS id,
            COALESCE(so_number, "") AS so_number
        ')
        ->where('currency', $currency)
        ->where('customer_id', $customer_id)
        ->where('grn_no', $grn_no)
        ->groupBy('id', 'so_number')
        ->orderBy('id')
        ->limit(1)
        ->first();

        // Default array in case of no result
        $retval = [
            'id' => 0,
            'so_number' => '',
        ];

        if ($result) {
            $retval = [
                'id' => $result->ID,
                'so_number' => $result->so_number,
            ];
        }
        return $retval;
    }
    public function doSaveRV_ByNewOrder($flag, $customer_id, $amount, $base_amount, $ex_rate, $currency, $order_id, $particulars, $qty, $old_order_id){
        DB::beginTransaction();
        try {
            $AutoGenerated = new AutoGenerated();
            $rv_number = $AutoGenerated->getNextNo("rv_number","RV","t_rv_master");

            $old_rv_number = "";
            $old_rv_date = "";
            $old_rv_bank = "";
            $countJV = 0;
            $account_code = '';
            $trasaction_date = '';
            $jv_particulars = '';
            $jv_currency = '';
            $jv_ex_rate = 0;
            $ref_data = '';
            $countRV = 0;

            // Retrieve the Receive_voucher_master for the given order_id via the rvDetails relationship
            $rvMaster = Receive_voucher_master::whereHas('rvDetails', function ($query) use ($old_order_id) {
                $query->where('order_id', $old_order_id);
            })->first();

            if ($rvMaster) {
                $countRV = 1;
                $old_rv_number = $rvMaster->rv_number;
                $old_rv_date = $rvMaster->rv_date;
                $old_rv_bank = $rvMaster->bank;
            } 

            // Query the Account_customer_cn model and get the required data
            $accountCustomerCn = Account_customer_cn::whereHas('paymentOrders', function ($query) use ($old_order_id) {
                $query->where('order_id', $old_order_id);
            })->first(); // You can use `first()` since you expect one result

            // Check if record exists
            if ($accountCustomerCn) {
                // Get count - In Eloquent, `count` is usually performed on collections, so here we just have the first match
                $countJV = 1;
                // Accessing required fields
                $account_code = $accountCustomerCn->account_code;
                $trasaction_date = $accountCustomerCn->transaction_date;
                $jv_particulars = $accountCustomerCn->particulars;
                $jv_currency = $accountCustomerCn->currency;
                $jv_ex_rate = $accountCustomerCn->ex_rate;

                // Generate RefData using Carbon for date manipulation
                $year = Carbon::now()->year;
                $shortYear = $year - 2000;
                $ref_data = 'JV' . $shortYear . Carbon::now()->format('md-His'); // Format as 'JVyyMMdd-HHmmss'
            }

            $finalrvNo = "";

            switch ($flag) {
                case 1:
                    if ($countRV > 0) {
                        // Insert into RVoucher Master
                        Receive_voucher_master::create([
                            'customer_id' => $customer_id,
                            'rv_number' => $rv_number,
                            'rv_date' => $old_rv_date,
                            'rv_status_id' => 1,
                            'account_code' => 21301,
                            'base_amount_paid' => $base_amount,
                            'amount_paid' => $amount,
                            'total' => $amount,
                            'base_total' => $base_amount,
                            'bank' => $old_rv_bank,
                            'ex_rate' => $ex_rate,
                            'currency' => $currency,
                            'bank_charges' => 0,
                            'base_bank_charges' => 0,
                            'excess_amount' => 0,
                            'base_excess_amount' => 0,
                            'invoice_deposit' => 0,
                            'credit_used' => 0,
                        ]);
                        // Insert into RVoucher Detail
                        Receive_voucher_detail::create([
                            'account_code' => 21301,
                            'customer_id' => $customer_id,
                            'rv_number' => $rv_number,
                            'invoice_no' => 'N/A',
                            'ex_rate' => $ex_rate,
                            'currency' => $currency,
                            'remarks' => '',
                            'rv_date' => $old_rv_date,
                            'base_amount' => $base_amount,
                            'amount' => $amount,
                            'ex_rate_diff' => 0,
                            'particulars' => $particulars,
                            'amount_paid' => $amount,
                            'product_id' => $particulars,
                            'order_id' => $order_id,
                            'qty' => $qty
                        ]);
                        $finalrvNo = $rv_number;
                    }
                    if ($countJV > 0) {
                        $accountCustCn = Account_customer_cn::create([
                            'account_code' => $account_code,
                            'customer_id' => $customer_id,
                            'amount' => $amount,
                            'base_amount' => $base_amount,
                            'debit' => $amount,
                            'credit' => 0.00,
                            'transaction_date' => $trasaction_date,
                            'particulars' => $jv_particulars,
                            'currency' => $jv_currency,
                            'ex_rate' => $jv_ex_rate,
                            'ref_data' => $ref_data
                        ]);
                        Payment_orders_cn::create([
                            'account_customer_cn_id' => $accountCustCn->id,
                            'order_id' => $order_id,
                            'payment_order' => $amount,
                        ]);
                    }
                    if ($countJV > 0) {
                        $accountCustomerCn = Account_customer_cn::whereHas('paymentOrders', function ($query) use ($old_order_id) {
                            $query->where('order_id', $old_order_id);
                        })->first(); // You can use `first()` since you expect one result
                        foreach ($accountCustomerCn as $row) {
                            $ex_rate = $row->ex_rate;
                            $jv_amount = $row->amount - $amount;
                            $jv_base_amount = $jv_amount * $ex_rate;
                            $row->update([
                                'amount' => $jv_amount,
                                'debit' => $jv_amount,
                                'base_amount' => $jv_base_amount,
                            ]);
                        }
                    }
                break;
                case 2:
                    if ($countRV > 0) {
                        Receive_voucher_detail::where('order_id', $old_order_id)
                            ->update([
                                'base_amount' => DB::raw("base_amount - $base_amount"),
                                'amount' => DB::raw("amount - $amount"),
                                'amount_paid' => DB::raw("amount_paid - $amount")
                            ]);

                        Receive_voucher_master::where('rv_number', $old_rv_number)
                            ->update([
                                'amount_paid' => DB::raw("amount_paid - $amount"),
                                'base_amount_paid' => DB::raw("base_amount_paid - $base_amount"),
                                'total' => DB::raw("total - $amount"),
                                'base_total' => DB::raw("base_total - $base_amount")
                            ]);

                        $finalrvNo = $old_rv_number;
                    }
                break;
            }

            DB::commit(); // Commit the transaction
            return $finalrvNo;

        } catch (\Exception $e) {
            DB::rollBack(); // Rollback the transaction on error
            throw $e;
        }
    }
    public function doMakeSOFromAllocation($grn_no, $baseCurrency, $allocArr){

        DB::beginTransaction();
        try {
            $allocationIdList = explode(',', $allocArr);
            $allocationIdList = array_map('intval', $allocationIdList);

            $results = Inventory_allocation::with([
                'customer:id,tax_group,sales_person_id,shipping_terms_id,payment_terms_id',
                'product:id,item_cost',
                'salesOrder:so_number,invoice_status_id'
            ])
            ->where('grn_no', $grn_no)
            ->whereIn('id', $allocationIdList)
            ->get()
            ->filter(function ($item) {
                // Keep if there's no sales order or invoice_status_id != 8
                return !$item->salesOrder || $item->salesOrder->invoice_status_id != 8;
            })
            ->groupBy(function ($allocation) {
                return $allocation->customer_id . '-' . $allocation->currency;
            })
            ->map(function ($allocations) {
                // Aggregating within the groups
                $total = $allocations->sum('total');
                $deposit = $allocations->sum('deposit');
                $voucherAmount = $allocations->sum('voucher_amount');
                $baseVoucherAmount = $allocations->sum('base_voucher_amount');
                $subTotalOnCost = $allocations->sum(function ($allocation) {
                    return $allocation->qty * $allocation->product->item_cost;
                });
                return [
                    'allocation_id' => $allocations->pluck('id')->toArray(),
                    'customer_id' => $allocations->first()->customer_id,
                    'currency' => $allocations->first()->currency,
                    'so_number' => $allocations->first()->so_number,
                    'tax_group' => $allocations->first()->customer->tax_group,
                    'sales_person_id' => $allocations->first()->customer->sales_person_id,
                    'shipping_terms_id' => $allocations->first()->customer->shipping_terms_id,
                    'payment_terms_id' => $allocations->first()->customer->payment_terms_id,
                    'item_cost' => $allocations->first()->product->item_cost,
                    'total' => $total,
                    'deposit' => $deposit,
                    'voucher_amount' => $voucherAmount,
                    'base_voucher_amount' => $baseVoucherAmount,
                    'sub_total_on_cost' => $subTotalOnCost,
                ];
            });


            $arrayResult = [];

            foreach ($results as $item) {
                $unpaidInvoice = $this->doGetUnPaidInvoice($item['customer_id'], $item['currency']);

                $data = new Request([
                    'currency' => $item['currency'],
                    'basecurrency' => $baseCurrency
                ]);
                $globalController = new GlobalController();
                $globalResponse = $globalController->getCurrentExRate($data);
                $global = $globalResponse->getData();
                $operator = GlobalController::getOperator( $item['currency'] . $baseCurrency);

                $ex_rate = $global->ex_rate;

                $base_total = 0;
                $base_grand_total = 0;
                $base_total_to_pay = 0;
                $base_tax_amount = 0;
                $base_total_deduction = 0;
                $base_total_deposit = 0;

                $tax_amount = 0;
                $excess_payment = 0;
                $credit_note = 0;

                if($unpaidInvoice['id'] === 0){
                    $so_number = $item['so_number'];

                    $sub_total = $item['total'];
                    $total_deposit = $item['deposit'];
                    $total_deduction = $excess_payment + $credit_note + $total_deposit;
                    $grand_total = $sub_total + $tax_amount;
                    $total_to_pay = $grand_total - $total_deduction;
                    $sub_total_on_cost = $item['sub_total_on_cost'];

                    if ($baseCurrency == $item['currency']){
                        $base_total = $sub_total;
                        $base_grand_total = $grand_total;
                        $base_total_to_pay = $total_to_pay;
                        $base_tax_amount = $base_tax_amount;
                        $base_total_deduction = $total_deduction;
                        $base_total_deposit = $total_deposit;
                    }
                    else{
                        if ($operator == "Divide") { 
                            $base_total = $sub_total / $ex_rate;
                            if ($tax_amount > 0) { $base_tax_amount = $tax_amount / $ex_rate; }
                            if ($grand_total > 0) { $base_grand_total = $grand_total / $ex_rate; }
                            if ($total_deduction > 0) {$base_total_deduction = $total_deduction / $ex_rate; }
                            if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay / $ex_rate; }
                            if ($total_deposit > 0) { $base_total_deposit = $total_deposit / $ex_rate; }
                        }
                        if ($operator == "Multiply"){
                            $base_total = $sub_total * $ex_rate;
                            if ($tax_amount > 0) { $base_tax_amount = $tax_amount * $ex_rate; }
                            if ($grand_total > 0) { $base_grand_total = $grand_total * $ex_rate; }
                            if ($total_deduction > 0) {$base_total_deduction = $total_deduction * $ex_rate; }
                            if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay * $ex_rate; }
                            if ($total_deposit > 0) { $base_total_deposit = $total_deposit * $ex_rate; }
                        }
                    }
                    $insertSOMaster = [
                        'so_number' => $so_number,
                        'invoice_no' => '',
                        'due_date' => '',
                        'delivery_date' => '',
                        'customer_id' => $item['customer_id'],
                        'ex_rate' => $ex_rate,
                        'tax' => $item['tax_group'],
                        'currency' => $item['currency'],
                        'sales_person_id' => $item['sales_person_id'],
                        'shipping_stat_id' => 1,
                        'so_date' => date('M d Y'),
                        'invoice_status_id' => 2,
                        'invoice_type' => 1,
                        'payment_terms_id' => $item['payment_terms_id'],
                        'tax_amount' => $tax_amount,
                        'total_to_pay' => $total_to_pay,
                        'base_total_deposit' => $base_total_deposit,
                        'sub_total_on_cost' => $sub_total_on_cost,
                        'base_tax_amount' => $base_tax_amount,
                        'total' => $item['total'],
                        'sub_total' => $sub_total,
                        'base_total' => $base_total,
                        'total_deposit' => $total_deposit,
                        'base_total_to_pay' => $base_total_to_pay,
                        'base_sub_total' => $base_total,
                        'total_deduction' => $total_deduction,
                        'base_total_deduction' => $base_total_deduction,
                        'voucher_amount' => $item['voucher_amount'],
                        'base_voucher_amount' => $item['base_voucher_amount'],
                        'cnt_products' => 1
                    ];
                    $arrayResult[] = [
                        'so_number' => $so_number,
                        'ex_rate' => $ex_rate,
                        'allocation_id' => $item['allocation_id']
                    ];
                    Sales_order_master::create($insertSOMaster);
                }
                else{
                    $so_number = $unpaidInvoice['so_number'];
                    $exist_total = $unpaidInvoice['total'];
                    $exist_deposit = $unpaidInvoice['total_deposit'];
                    $exist_sub_total_on_cost = $unpaidInvoice['sub_total_on_cost'];

                    $total = $item['total'] + $exist_total;
                    $sub_total = $total;
                    $total_deposit = $item['deposit'] + $exist_deposit;
                    $sub_total_on_cost = $item['sub_total_on_cost'] + $exist_sub_total_on_cost;

                    $total_deduction = $excess_payment + $credit_note + $total_deposit;
                    $grand_total = $sub_total + $tax_amount;
                    $total_to_pay = $grand_total - $total_deduction;

                    if ($baseCurrency == $item['currency']){
                        $base_total = $sub_total;
                        $base_grand_total = $grand_total;
                        $base_total_to_pay = $total_to_pay;
                        $base_total_deduction = $total_deduction;
                        $base_total_deposit = $total_deposit;
                    }
                    else{
                        if ($operator == "Divide") { 
                            $base_total = $sub_total / $ex_rate;
                            if ($grand_total > 0) { $base_grand_total = $grand_total / $ex_rate; }
                            if ($total_deduction > 0) {$base_total_deduction = $total_deduction / $ex_rate; }
                            if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay / $ex_rate; }
                            if ($total_deposit > 0) { $base_total_deposit = $total_deposit / $ex_rate; }
                        }
                        if ($operator == "Multiply"){
                            $base_total = $sub_total * $ex_rate;
                            if ($grand_total > 0) { $base_grand_total = $grand_total * $ex_rate; }
                            if ($total_deduction > 0) {$base_total_deduction = $total_deduction * $ex_rate; }
                            if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay * $ex_rate; }
                            if ($total_deposit > 0) { $base_total_deposit = $total_deposit * $ex_rate; }
                        }
                    }

                    $soMaster = Sales_order_master::where('so_number',$so_number)->first();
                    if ($soMaster) {
                        $soMaster->so_date = date('M d Y');
                        $soMaster->total = $total;
                        $soMaster->total_deposit = $total_deposit;
                        $soMaster->sub_total_on_cost = $sub_total_on_cost;
                        $soMaster->total_deduction = $total_deduction;
                        $soMaster->total_to_pay = $total_to_pay;
                        $soMaster->base_total = $base_total;
                        $soMaster->base_total_to_pay = $base_total_to_pay;
                        $soMaster->base_total_deduction = $base_total_deduction;
                        $soMaster->base_total_deposit = $base_total_deposit;
                        $soMaster->cnt_products = 1;
                        $soMaster->save();
                    }
                    $arrayResult[] = [
                        'so_number' => $so_number,
                        'ex_rate' => $ex_rate,
                        'allocation_id' => $item['allocation_id']
                    ];
                }
            }

            foreach ($arrayResult as $entry) {
                $so_number = $entry['so_number'];
                $ex_rate = $entry['ex_rate'];
                foreach ($entry['allocation_id'] as $allocationId) {
                    $list = Inventory_allocation::find($allocationId);
                    if (!$list) {
                        continue; // ⛔ Skip if not found (avoids error)
                    }

                    $item_cost = 0;
                    if ($list) {
                        $item_cost = Products::find($list->product_id)?->item_cost;
                    }

                    $insertSODetail = [
                        'so_number' => $so_number,
                        'product_id' => $list->product_id,
                        'qty' => $list->qty,
                        'deposit' => $list->deposit,
                        'currency' => $list->currency,
                        'total' => $list->total,
                        'price' => $list->price,
                        'sales_person_id' => $list->sales_person_id,
                        'shipping_stat_id' => $list->shipping_stat_id,
                        'invoice_status_id' => 1,
                        'customer_id' => $list->customer_id,
                        'so_date' => date('M d Y'),
                        'ex_rate' => $ex_rate,
                        'order_id' => $list->order_id,
                        'allocated_id' => $list->id,
                        'base_total' => $list->total * $ex_rate,
                        'item_cost' => $list->item_cost,
                        'grn_detail_id' => $list->grn_detail_id,
                        'product_type' => 0,
                        'shipping_stat_id' => 1,
                        'alloc_type' => '',
                        'warehouse' => '',
                        'particular' => '',
                        'remarks' => '',
                        'service_id' => NULL,
                        'item_cost' => $item_cost,
                    ];
                    Sales_order_detail::create($insertSODetail);
                }
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Receive Goods', 't_grn_master',
                'insert',
                'Get Orders - GRN No : ' . $grn_no
            );

            event(new POEvent( 'insert' ));
            event(new PVEvent( 'insert' ));
            event(new PreorderEvent( 'insert' ));
            event(new LogEvent( 'insert' ));
            event(new ProductEvent('insert' ));
            event(new GRNEvent('insert' ));
            event(new AllocationEvent('insert' ));
            event(new SOEvent('insert' ));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Successfully Allocated',
                'action'    => 'insert'
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'action'    => 'insert'
            ]);
        }

    }

}
