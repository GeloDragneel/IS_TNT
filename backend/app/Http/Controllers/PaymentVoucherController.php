<?php

namespace App\Http\Controllers;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\DB;
use App\Models\Payment_voucher_master;
use App\Models\Payment_voucher_detail;
use App\Models\Payment_voucher_detail_copy;
use App\Models\ISSettings;
use App\Models\Payment_type;
use App\Models\Account_supplier_invoice;
use App\Models\Accounts_payable_master;
use App\Models\Accounts_payable_details;
use App\Models\Accounting_settings;
use App\Models\Charts_of_account;
use App\Models\Supplier;
use App\Models\POrder_master;
use App\Models\POrder_detail;
use App\Models\Account_supplier_cn;

use Illuminate\Http\Request;
use App\Services\AutoGenerated;

use App\Events\POEvent;
use App\Events\PVEvent;
use App\Events\APEvent;
use App\Events\LogEvent;
use App\Events\SupplierEvent;

class PaymentVoucherController extends Controller{

    public function getAllPaymentVoucher(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $supplierCodes = $request->input('supplier_codes', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        // Base query with eager loading
        $query = Payment_voucher_master::with([
            'supplier:id,suppliername_en,suppliername_cn,supplier_code',
            'customer:id,account_name_en,account_name_cn,customer_code',
            'details.product:id,product_code,product_title_en,product_title_cn',
            'detailsCopy.product:id,product_code,product_title_en,product_title_cn',
            'invoiceStatus:id,status_value_en,status_value_cn',
            'paymentType:id,payment_type_en,payment_type_cn',
        ])->orderByDesc('id');

        // Filters
        if (!empty($supplierCodes)) {
            $query->whereIn('supplier_id', $supplierCodes);
        }
        if ($categoryDates === 'Date' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(pv_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('pv_number', 'like', "%{$search}%")
                    ->orWhereHas('supplier', function ($q) use ($search) {
                        $q->where('suppliername_en', 'like', "%{$search}%")
                            ->orWhere('suppliername_cn', 'like', "%{$search}%")
                            ->orWhere('supplier_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceStatus', function ($q) use ($search) {
                        $q->where('status_value_en', 'like', "%{$search}%")
                            ->orWhere('status_value_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('details.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('detailsCopy.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();

        // Transform all orders
        $allDataTransformed = $allData->map(fn($order) => $this->transformOrderData($order));

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];
        // Get all active currencies

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allDataTransformed->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total_amount'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $allDataTransformed->sum('base_currency') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();
    
        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

        // Return JSON
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result instanceof LengthAwarePaginator ? $result->currentPage() : 1,
                'data' => $paginatedData,
                'footer2' => $footer2,
                'last_page' => $result instanceof LengthAwarePaginator ? $result->lastPage() : 1,
                'per_page' => $result instanceof LengthAwarePaginator ? $result->perPage() : $paginatedData->count(),
                'total' => $result instanceof LengthAwarePaginator ? $result->total() : $paginatedData->count(),
            ]
        ]);
    }
    public function getAllOperatingExpenses(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $supplierCodes = $request->input('supplier_codes', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        // Base query with eager loading
        $query = Payment_voucher_master::with([
            'supplier:id,suppliername_en,suppliername_cn,supplier_code',
            'customer:id,account_name_en,account_name_cn,customer_code',
            'details.product:id,product_code,product_title_en,product_title_cn',
            'detailsCopy.product:id,product_code,product_title_en,product_title_cn',
            'invoiceStatus:id,status_value_en,status_value_cn',
            'paymentType:id,payment_type_en,payment_type_cn',
        ])->where('payment_type_id',2)
        ->orderByDesc('id');

        // Filters
        if (!empty($supplierCodes)) {
            $query->whereIn('supplier_id', $supplierCodes);
        }
        if ($categoryDates === 'Date' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(pv_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('pv_number', 'like', "%{$search}%")
                    ->orWhereHas('supplier', function ($q) use ($search) {
                        $q->where('suppliername_en', 'like', "%{$search}%")
                            ->orWhere('suppliername_cn', 'like', "%{$search}%")
                            ->orWhere('supplier_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceStatus', function ($q) use ($search) {
                        $q->where('status_value_en', 'like', "%{$search}%")
                            ->orWhere('status_value_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('details.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('detailsCopy.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();

        // Transform all orders
        $allDataTransformed = $allData->map(fn($order) => $this->transformOrderData($order));

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];
        // Get all active currencies

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allDataTransformed->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total_amount'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $allDataTransformed->sum('base_currency') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();
    
        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

        // Return JSON
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result instanceof LengthAwarePaginator ? $result->currentPage() : 1,
                'data' => $paginatedData,
                'footer2' => $footer2,
                'last_page' => $result instanceof LengthAwarePaginator ? $result->lastPage() : 1,
                'per_page' => $result instanceof LengthAwarePaginator ? $result->perPage() : $paginatedData->count(),
                'total' => $result instanceof LengthAwarePaginator ? $result->total() : $paginatedData->count(),
            ]
        ]);
    }
    private function transformOrderData($list){
        $supplier = optional($list->supplier);
        $customer = optional($list->customer);
        $suppliername_en = $supplier->suppliername_en ?? '';
        $suppliername_cn = $supplier->suppliername_cn ?: $suppliername_en;
        $account_name_en = $customer->account_name_en ?? '';
        $account_name_cn = $customer->account_name_cn ?: $account_name_en;
        $details = ($list->pv_status_id == 5) ? $list->detailsCopy : $list->details;
        return [
            'id' => $list->id,
            'pv_number' => $list->pv_number,
            'pv_date' => $list->pv_date,
            'pay_to_en' => $list->pay_to_en,
            'pay_to_cn' => $list->pay_to_cn,
            'particular_en' => $list->particular_en,
            'particular_cn' => $list->particular_cn,
            'currency' => $list->currency,
            'ex_rate' => $list->ex_rate,
            'supplier_id' => $list->supplier_id,
            'bank' => $list->bank,
            'total_amount' => $list->total_amount,
            'base_total_amount' => $list->total_amount,
            'credit_used' => $list->credit_used,
            'pv_status_id' => $list->pv_status_id,
            'payment_type_id' => $list->payment_type_id,
            'status_value_en' => optional($list->invoiceStatus)->status_value_en,
            'status_value_cn' => optional($list->invoiceStatus)->status_value_cn,
            'payment_type_en' => optional($list->paymentType)->payment_type_en,
            'payment_type_cn' => optional($list->paymentType)->payment_type_cn,
            'supplier_code' => $supplier->supplier_code,
            'customer_code' => $customer->customer_code,
            'suppliername_en' => $suppliername_en,
            'suppliername_cn' => $suppliername_cn,
            'account_name_en' => $account_name_en,
            'account_name_cn' => $account_name_cn,
            'details' => $details->map(function ($detail) {
                $product = optional($detail->product);
                $paymentType = optional($detail->paymentType);
                $chartOfAccount = optional($detail->chartOfAccount);
                
                $product_code = $product->product_code;
                $product_title_en = $product->product_title_en;
                $product_title_cn = $product->product_title_cn;
                $product_title_cn = ($product_title_cn === '' ? $product_title_en : $product_title_cn);

                $account_name_en = $chartOfAccount->account_name_en;
                $account_name_cn = $chartOfAccount->account_name_cn;
                $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);

                return [
                    'id' => $detail->id,
                    'qty' => $detail->qty,
                    'amount' => $detail->amount,
                    'base_amount' => $detail->base_amount,
                    'currency' => $detail->currency,
                    'product_id' => $detail->product_id,
                    'ex_rate' => $detail->ex_rate,
                    'ref_data' => $detail->ref_data,
                    'ap_invoice_no' => $detail->ap_invoice_no,
                    'account_code' => $detail->account_code,
                    'payment_type_id' => $detail->payment_type_id,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'account_name_en' => $account_name_en,
                    'account_name_cn' => $account_name_cn,
                    'payment_type_en' => $paymentType->payment_type_en,
                    'payment_type_cn' => $paymentType->payment_type_cn,
                ];
            })->values(),
        ];
    }
    public function getPVInfo($id){
        $list = Payment_voucher_master::with([
            'supplier',
            'customer',
            'details.product',
            'detailsCopy.product',
        ])->where('id', $id)->first();

        if (!$list) {
            return [];
        }

      
        $cust_address_en = $list->customer->billing_address_en ?? '';
        $cust_address_cn = $list->customer->billing_address_cn ?? '';
        $cust_address_cn = $cust_address_cn === '' ? $cust_address_en : $cust_address_cn;

        $supp_address_en = $list->supplier->supplier_address_en ?? '';
        $supp_address_cn = $list->supplier->supplier_address_cn ?? '';
        $supp_address_cn = $supp_address_cn === '' ? $supp_address_en : $supp_address_cn;

        $address_en = "";
        $address_cn = "";

        if($list->payment_type_id === 5 || $list->payment_type_id === 1){
            $address_en = $supp_address_en;
            $address_cn = $supp_address_cn;
        }
        if($list->payment_type_id === 2){
            $address_en = "";
            $address_cn = "";
        }
        if($list->payment_type_id === 3){
            $address_en = $cust_address_en;
            $address_cn = $cust_address_cn;
        }
        if($list->payment_type_id === 4){
            $address_en = $supp_address_en;
            $address_cn = $supp_address_cn;
        }
        $currency = $list->currency;
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $operator = GlobalController::getOperator( $currency . $baseCurrency);

        $mergedDetailsModels = $list->details->merge($list->detailsCopy);

        // Map merged collection to arrays
        $mergedDetails = $mergedDetailsModels->map(function ($detail) {
            $product_code = optional($detail->product)->product_code;
            $product_title_en = optional($detail->product)->product_title_en;
            $product_title_cn = optional($detail->product)->product_title_cn;
            $account_name_en = optional($detail->chartOfAccount)->account_name_en;
            $account_name_cn = optional($detail->chartOfAccount)->account_name_cn;
            return [
                'id' => $detail->id,
                'pv_number' => $detail->pv_number ?? "",
                'pv_date' => $detail->pv_date ?? "",
                'account_code' => $detail->account_code ?? "",
                'product_code' => $product_code ?? "",
                'product_title_en' => $product_title_en ?? "",
                'product_title_cn' => $product_title_cn ?? "",
                'account_name_en' => $account_name_en,
                'account_name_cn' => $account_name_cn,
                'product_id' => $detail->product_id ?? 0,
                'payment_type_id' => $detail->payment_type_id ?? 0,
                'po_detail_id' => $detail->po_detail_id ?? 0,
                'ap_detail_id' => $detail->ap_detail_id ?? 0,
                'qty' => $detail->qty ?? 0,
                'account_no' => $detail->account_no ?? "",
                'ap_invoice_no' => $detail->ap_invoice_no ?? "",
                'ref_data' => $detail->ref_data ?? "",
                'currency' => $detail->currency ?? "",
                'ex_rate' => $detail->ex_rate ?? 0,
                'amount' => $detail->amount ?? 0,
                'base_amount' => $detail->base_amount ?? 0,
                'ex_rate_diff' => $detail->ex_rate_diff ?? 0,
                'is_deleted' => 0,
                'indexInt' => $detail->id . rand(1, 100),
                'age_type' => 'old',
                'delete_type' => '',
            ];
        })->values();

        $list = [
            'id' => $list->id,
            'customer_id' => $list->customer_id,
            'supplier_id' => $list->supplier_id,
            'pay_to_en' => $list->pay_to_en,
            'pay_to_cn' => $list->pay_to_cn,
            'particular_en' => $list->particular_en,
            'particular_cn' => $list->particular_cn,
            'customer_code' => $list->customer->customer_code ?? '',
            'supplier_code' => $list->supplier->supplier_code ?? '',
            'address_en' => $address_en,
            'address_cn' => $address_cn,
            'operator' => $operator,
            'ex_rate' => $list->ex_rate,
            'pv_number' => $list->pv_number,
            'pv_date' => $list->pv_date,
            'pv_status_id' => $list->pv_status_id,
            'bank' => $list->bank,
            'currency' => $list->currency,
            'total_amount' => $list->total_amount,
            'base_total_amount' => $list->base_total_amount,
            'sub_total' => $list->sub_total,
            'base_sub_total' => $list->base_sub_total,
            'tax_amount' => $list->tax_amount,
            'base_tax_amount' => $list->base_tax_amount,
            'bank_charges' => $list->bank_charges,
            'base_bank_charges' => $list->base_bank_charges,
            'credit_used' => $list->credit_used,
            'deposits' => $list->deposits,
            'tax_group' => $list->tax_group,
            'payment_type_id' => $list->payment_type_id,
            'ref_data' => $list->ref_data,
            'invoice_no' => $list->invoice_no,
            'chart_fix_code' => $list->chart_fix_code,
            'details' => $mergedDetails,
        ];
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function voidPaymentVoucher(Request $request){
        DB::beginTransaction();

        try {
            if (!$request->has('details') || empty($request->details)) {
                return response()->json([
                    'token'   => 'Error',
                    'message' => 'No details found.',
                    'action'  => 'update'
                ]);
            }

            foreach ($request->details as $list) {
                // Ensure $list is an array (in case it's a JSON string)
                if (is_string($list)) {
                    $list = json_decode($list, true);
                }

                if (!is_array($list) || !isset($list['pv_number'])) {
                    throw new \Exception('Invalid RV detail format.');
                }

                $pv_number = $list['pv_number'];

                $rv = Payment_voucher_master::where('pv_number', $pv_number)->first();
                if ($rv) {
                    $rv->pv_status_id = 5;
                    $rv->save(); // ✅ This will fire `updated()` in the observer

                    Payment_voucher_detail::where('pv_number', $pv_number)
                        ->get()
                        ->each(function ($detail) {
                            Payment_voucher_detail_copy::create($detail->toArray());
                        });

                }
                // Call logAction from a service, not controller
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Payment Voucher',
                    't_pv_master',
                    'void',
                    'Void PV Number: ' . $pv_number
                );
            }

            // Fire related events
            event(new PVEvent('insert'));
            event(new POEvent('insert'));
            event(new LogEvent('insert'));

            DB::commit();

            return response()->json([
                'token'   => 'Success',
                'message' => 'Successfully Voided',
                'action'  => 'update'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();

            return response()->json([
                'token'   => 'Error',
                'message' => $e->getMessage(),
                'action'  => 'update'
            ]);
        }
    }
    public function getChartAccount($chart_fix_code){
        $setting = Accounting_settings::where('chart_fix_code', $chart_fix_code)->first();
        if ($setting) {
            return $setting->account_code . '|' . $setting->account_name_en;
        }
        return '|';
    }
    public function doGetSupplierInvoice($supplier_id){
        // First, get the aggregated balances (Credit - Debit) grouped by invoice number
        $balances = Account_supplier_invoice::selectRaw('ap_invoice_no, ap_detail_id, COALESCE(SUM(credit),0) - COALESCE(SUM(debit),0) AS balance')
            ->where('supplier_id', $supplier_id)
            ->groupBy('ap_invoice_no', 'ap_detail_id')
            ->orderBy('ap_invoice_no')
            ->get();

        $resultArray = [];

        // Fetch chart account data (assuming it returns something like "code|something")
        $chartData = explode('|', $this->getChartAccount('SUPTADVPAY'));
        $accountCode = $chartData[0] ?? null;

        foreach ($balances as $bal) {
            // Only consider those with positive balance
            if ($bal->balance > 0) {
                // Fetch the related AP master record
                $apMaster = Accounts_payable_master::where('ap_number', $bal->ap_invoice_no)
                    ->select('deposit', 'credit_used')
                    ->first();

                $row = [
                    'ap_invoice_no' => $bal->ap_invoice_no,
                    'ap_detail_id' => $bal->ap_detail_id,
                    'balance' => $bal->balance,
                    'account_code' => $accountCode,
                ];

                // If we found the master record, include it
                if ($apMaster) {
                    $row['deposit'] = $apMaster->deposit;
                    $row['credit_used'] = $apMaster->credit_used;
                } else {
                    // Otherwise defaults
                    $row['deposit'] = null;
                    $row['credit_used'] = null;
                }

                $resultArray[] = $row;
            }
        }
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $resultArray,
        ]);
    }
    public function doGetAPInvoiceDetail($ap_number, $account_code){
        $details = Accounts_payable_details::with([
            'product',
            'service',
        ])->where('ap_number', $ap_number)->get();

        // Pre-fetch the chart account once, outside the loop
        $charts = Charts_of_account::where('account_code', $account_code)->first();
        $account_name_en = $charts->account_name_en ?? '';
        $account_name_cn = $charts->account_name_cn ?? $account_name_en;

        $mapped = $details->map(function ($detail) use ($account_code, $account_name_en, $account_name_cn) {
            $product = optional($detail->product);
            $service = optional($detail->service);

            $product_code = $product->product_code ?? $service->product_code ?? '';
            $product_title_en = $product->product_title_en ?? $service->product_title_en ?? '';
            $product_title_cn = $product->product_title_cn ?? $service->product_title_cn ?? $product_title_en;

            return [
                'id' => $detail->id,
                'account_code' => $account_code,
                'account_name_en' => $account_name_en,
                'account_name_cn' => $account_name_cn,
                'product_code' => $product_code,
                'product_title_en' => $product_title_en,
                'product_title_cn' => $product_title_cn,
                'product_id' => $detail->product_id,
                'currency' => $detail->currency,
                'ex_rate' => $detail->ex_rate,
                'total' => $detail->total,
                'qty' => $detail->qty,
                'ap_number' => $detail->ap_number,
                'po_detail_id' => $detail->po_detail_id,
                'is_deleted' => 0,
                'indexInt' => $detail->id . rand(1, 100),
                'age_type' => 'old',
                'delete_type' => '',
            ];
        })->values();

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $mapped,
        ]);
    }
    public function getCountExistSupplier($supplier_code){
        return Supplier::where('supplier_code', $supplier_code)->count();
    }
    public function updatePaymentVoucher(Request $request, $id){
        $OrigID = $id;
        $GlobalTableNo = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');

        if($request->ex_rate === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Exchange Rate is Required',
                'action'    => 'Insert'
            ]);
        }

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            $chart_fix_code = "";
            $refDataArray = [];
            $invoiceNoArray = [];

            if ($request->has('details')) {
                $paymentTypeId = (int) $request->payment_type_id;

                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }

                    if (!is_array($list) || !isset($list['ref_data'])) {
                        continue;
                    }

                    if ($paymentTypeId === 1) {
                        $chart_fix_code = "SUPTADVPAY";
                        $refDataArray[] = $list['ref_data'];
                        $invoiceNoArray[] = $list['ref_data'];
                    }

                    if ($paymentTypeId === 5) {
                        $chart_fix_code = "DEPSUP";
                        $refDataArray[] = $list['ref_data'];
                    }
                }
            }

            // Remove duplicates and build pipe-separated strings
            $ref_data = implode('|', array_unique($refDataArray)) . (count($refDataArray) > 0 ? '|' : '');
            $invoice_no = implode('|', array_unique($invoiceNoArray)) . (count($invoiceNoArray) > 0 ? '|' : '');

            $customer_id = ((int) $request->customer_id === 0 ? null : $request->customer_id);
            $supplier_id = ((int) $request->supplier_id === 0 ? null : $request->supplier_id);
            if ((int) $id === 0) {
                $AutoGenerated = new AutoGenerated();
                $pv_number = $AutoGenerated->getNextNo("pv_number","PV","t_pv_master");
                $inserMaster = [
                    'pv_number' => $pv_number,
                    'pv_date' => $request->pv_date,
                    'pay_to_en' => $request->pay_to_en,
                    'pay_to_cn' => $request->pay_to_cn,
                    'particular_en' => $request->particular_en,
                    'particular_cn' => $request->particular_cn,
                    'currency' => $request->currency,
                    'ex_rate' => $request->ex_rate,
                    'total_amount' => $request->total_amount,
                    'base_total_amount' => $request->base_total_amount,
                    'sub_total' => $request->sub_total,
                    'base_sub_total' => $request->base_sub_total,
                    'tax_amount' => $request->tax_amount,
                    'base_tax_amount' => $request->base_tax_amount,
                    'bank_charges' => $request->bank_charges,
                    'base_bank_charges' => $request->base_bank_charges,
                    'credit_used' => $request->credit_used,
                    'deposits' => $request->deposits,
                    'tax_group' => $request->tax_group,
                    'bank' => $request->bank,
                    'customer_id' => $customer_id,
                    'pv_status_id' => 7,
                    'supplier_id' => $supplier_id,
                    'payment_type_id' => $request->payment_type_id,
                    'ref_data' => $ref_data,
                    'invoice_no' => $invoice_no,
                    'chart_fix_code' => $chart_fix_code,
                ];
                $master = Payment_voucher_master::create($inserMaster);
                $OrigID = $master->id;
                $GlobalTableNo = $pv_number;
            }
            else{
                $master = Payment_voucher_master::find($request['id']);
                if ($master) {
                    $master->pv_date = $request->pv_date;
                    $master->pay_to_en = $request->pay_to_en;
                    $master->pay_to_cn = $request->pay_to_cn;
                    $master->particular_en = $request->particular_en;
                    $master->particular_cn = $request->particular_cn;
                    $master->currency = $request->currency;
                    $master->ex_rate = $request->ex_rate;
                    $master->total_amount = $request->total_amount;
                    $master->base_total_amount = $request->base_total_amount;
                    $master->sub_total = $request->sub_total;
                    $master->base_sub_total = $request->base_sub_total;
                    $master->tax_amount = $request->tax_amount;
                    $master->base_tax_amount = $request->base_tax_amount;
                    $master->bank_charges = $request->bank_charges;
                    $master->base_bank_charges = $request->base_bank_charges;
                    $master->credit_used = $request->credit_used;
                    $master->deposits = $request->deposits;
                    $master->tax_group = $request->tax_group;
                    $master->bank = $request->bank;
                    $master->customer_id = $customer_id;
                    $master->pv_status_id = 7;
                    $master->supplier_id = $supplier_id;
                    $master->payment_type_id = $request->payment_type_id;
                    $master->ref_data = $ref_data;
                    $master->invoice_no = $invoice_no;
                    $master->chart_fix_code = $chart_fix_code;
                    $master->save();
                }
                $GlobalTableNo = $master->pv_number;
            }
            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }
                    $recordID = $list['id'];
                    $detail_id = 0;
                    if ((int) $list['is_deleted'] === 1) {
                        $detail = Payment_voucher_detail::find($recordID);
                        if ($detail) {
                            $detail->delete();
                        }
                    }
                    $product_id = ((int) $request->product_id === 0 ? null : $request->product_id);
                    $po_detail_id = ((int) $request->po_detail_id === 0 ? null : $request->po_detail_id);
                    $ap_detail_id = ((int) $request->ap_detail_id === 0 ? null : $request->ap_detail_id);
                    if((int) $list['is_deleted'] === 0){
                        if ((int) $recordID === 0) {
                            $insertDetail = [
                                'pv_number' => $GlobalTableNo,
                                'pv_date' => $request->pv_date,
                                'account_code' => $list['account_code'],
                                'product_id' => $product_id,
                                'payment_type_id' => $request->payment_type_id,
                                'po_detail_id' => $po_detail_id,
                                'ap_detail_id' => $ap_detail_id,
                                'ap_invoice_no' => $list['ap_invoice_no'],
                                'ref_data' => $list['ref_data'],
                                'currency' => $request->currency,
                                'ex_rate' => $request->ex_rate,
                                'amount' => $list['amount'],
                                'base_amount' => $list['base_amount'],
                            ];
                            $detail = Payment_voucher_detail::create($insertDetail);
                            $detail_id = $detail->id;
                        }
                        else{
                            $detail = Payment_voucher_detail::find($recordID);
                            if ($detail) {
                                $detail->pv_date = $request->pv_date;
                                $detail->account_code = $list['account_code'];
                                $detail->product_id = $product_id;
                                $detail->payment_type_id = $request->payment_type_id;
                                $detail->po_detail_id = $po_detail_id;
                                $detail->ap_detail_id = $ap_detail_id;
                                $detail->ap_invoice_no = $list['ap_invoice_no'];
                                $detail->ref_data = $list['ref_data'];
                                $detail->currency = $request->currency;
                                $detail->ex_rate = $request->ex_rate;
                                $detail->amount = $list['amount'];
                                $detail->base_amount = $list['base_amount'];
                                $detail->save();
                                $detail_id = $detail->id;
                            }
                            $this->doUpdatePODeposit($list['ref_data'],$product_id);
                        }
                    }
                }   
            }

            $accSuppinvoiceInvoice = Account_supplier_invoice::where('pv_number', $GlobalTableNo)
                ->where('pv_detail_id', $OrigID)->first();
            $isExistCount = $accSuppinvoiceInvoice ? 1 : 0;

            if($isExistCount > 0){
                $accSuppinvoiceInvoice->delete();

                $invoiceNoArray = array_unique($invoiceNoArray); // remove duplicates
                foreach ($invoiceNoArray as $value) {
                    $this->insertSupplierInvoiceAndUpdateStatus($value,$GlobalTableNo,$OrigID,12404);
                }
            }
            else{
                $invoiceNoArray = array_unique($invoiceNoArray); // remove duplicates
                foreach ($invoiceNoArray as $value) {
                    $this->insertSupplierInvoiceAndUpdateStatus($value,$GlobalTableNo,$OrigID,12404);
                }
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Payment Voucher', 't_pv_master',
                $Action,
                'PV Number : ' . $GlobalTableNo
            );

            event(new SupplierEvent($Action));
            event(new POEvent($Action));
            event(new PVEvent($Action));
            event(new APEvent($Action));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Payment Voucher Successfully Saved',
                'id'        => $OrigID,
                'action'    => $Action
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }

    }
    public function doUpdatePODeposit($refData, $itemCode){
        // Step 1: Get sum of deposits from pvoucher_detail
        $depositData = Payment_voucher_detail::where('ref_data', $refData)
            ->where('product_id', $itemCode)
            ->selectRaw('ref_data, product_id, SUM(amount) as deposit, SUM(base_amount) as base_deposit')
            ->groupBy('ref_data', 'product_id')
            ->first();

        if (!$depositData) {
            return 0; // nothing to update
        }

        // Step 2: Update porder_detail with deposit values
        POrder_detail::where('po_number', $depositData->ref_data)
            ->where('product_id', $depositData->product_id)
            ->update([
                'deposit' => $depositData->deposit,
                'base_deposit' => $depositData->base_deposit,
            ]);

        // Step 3: Recalculate total deposits for the PO and update master
        $poTotals = POrder_detail::where('po_number', $depositData->ref_data)
            ->selectRaw('SUM(deposit) as total_deposit, SUM(base_deposit) as total_base_deposit')
            ->first();

        if ($poTotals) {
            POrder_master::where('po_number', $depositData->ref_data)
                ->update([
                    'deposit' => $poTotals->total_deposit,
                    'base_deposit' => $poTotals->total_base_deposit,
                ]);
        }
        return 1;
    }
    public function insertSupplierInvoiceAndUpdateStatus($invoiceNo, $pvoucherNo, $pvoucherId, $SUPTADVPAY){
        // Wrap entire logic in DB transaction
        DB::transaction(function() use ($invoiceNo, $pvoucherNo, $pvoucherId, $SUPTADVPAY) {
            // 1. Insert into account_supplierinvoice
            $ap = Accounts_payable_master::where('ap_number', $invoiceNo)->firstOrFail();

            Account_supplier_invoice::create([
                'supplier_id' => $ap->supplier_id,
                'account_code' => $SUPTADVPAY,   // assuming $SUPTADVPAY is the literal code
                'transaction_date' => $ap->ap_date,
                'ap_invoice_no' => $ap->ap_number,
                'ex_rate' => $ap->ex_rate,
                'currency' => $ap->currency,
                'sub_total' => $ap->total,
                'base_sub_total' => $ap->base_total,
                'tax_amount' => $ap->tax,
                'base_tax_amount' => $ap->base_tax,
                'deposit' => 0,
                'base_deposit' => 0,
                'base_amount' => $ap->base_total,
                'amount' => $ap->total,
                'debit' => $ap->total,
                'credit' => 0,
                'pv_number' => $pvoucherNo,
                'pv_detail_id' => $pvoucherId,
            ]);

            // 2. Compute CreditUsed from account_supplier_cn
            $creditUsed = Account_supplier_cn::where('ap_invoice_no', $invoiceNo)
                ->sum('amount');

            // 3. Compute APInvoiceBalance from account_supplierinvoice
            $apInvoiceBalance = Account_supplier_invoice::where('ap_invoice_no', $invoiceNo)
                ->selectRaw('COALESCE(SUM(credit),0) - COALESCE(SUM(debit),0) as balance')
                ->value('balance');  // value returns the single column result

            // 4. Compute APInvoiceAmountToPay from apinvoice_master
            $apInvoiceAmountToPay = Accounts_payable_master::where('ap_number', $invoiceNo)
                ->sum('total');

            // 5. Compute adjusted balance
            $apInvoiceBalance2 = $apInvoiceBalance - $creditUsed;

            // 6. Update invoice status based on conditions
            if ($apInvoiceBalance2 == 0) {
                $ap->update(['invoice_status_id' => 1]);
            } elseif ($apInvoiceBalance2 > 0 && $apInvoiceBalance2 < $apInvoiceAmountToPay) {
                $ap->update(['invoice_status_id' => 3]);
            } elseif ($apInvoiceBalance2 == $apInvoiceAmountToPay) {
                $ap->update(['invoice_status_id' => 2]);
            }
        });
    }
    public function getAllChartsExpenses(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');
        $accountCode = $request->input('accountCode');

        if($accountCode === '' || !$accountCode){
            $query = Charts_of_account::whereNotIn('account_code', function($subquery) {
                    $subquery->select('root_name')->from('m_charts_of_account');
                })->where('account_code','LIKE','6%')
                ->where('root_name', '!=', 0);
        }
        else{
            $query = Charts_of_account::whereNotIn('account_code', function($subquery) {
                    $subquery->select('root_name')->from('m_charts_of_account');
                })->where('root_name', '!=', 0)
                ->where('account_code','LIKE','6%')
                ->where('account_code','LIKE',"%{$accountCode}%");
        }
        // Apply search filter BEFORE paginate or get
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('account_code', 'like', "%{$search}%")
                ->orWhere('account_name_en', 'like', "%{$search}%")
                ->orWhere('account_name_cn', 'like', "%{$search}%");
            });
        }

        $query->orderBy('account_code');

        if ($perPage === -1) {
            $data = $query->get();
            $result = [
                'current_page' => 1,
                'data'         => $data,
                'last_page'    => 1,
                'per_page'     => $data->count(),
                'total'        => $data->count(),
            ];
        } else {
            $result = $query->paginate($perPage);
        }

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'  => $result,
        ]);
    }

}
