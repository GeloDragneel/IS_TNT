<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Pagination\LengthAwarePaginator;
use App\Models\Orders;
use App\Models\Price_setup;
use App\Models\Products;
use App\Models\Customer;
use App\Models\POrder_detail;
use App\Models\Sales_order_qty_ids;
use App\Models\ISSettings;
use App\Models\Operator;
use App\Models\Account_customer_cn;
use App\Models\Accounts_receivable;
use App\Models\Receive_voucher_detail;
use App\Models\Payment_orders_cn;
use App\Models\Credit_note_customer;
use App\Models\Credit_note_customer_detail;
use App\Models\Receive_voucher_master;
use App\Models\Accounting_settings;
use App\Models\General_ledger;
use App\Models\General_entries;
use App\Models\Payment_voucher_master;
use App\Models\Payment_voucher_detail;
use App\Models\Grn_details;
use App\Models\Sales_order_master;
use App\Models\Inventory_allocation;
use App\Models\Sales_order_detail;
use App\Models\Invoice_master;
use App\Models\Invoice_detail;
use App\Models\Order_Voucher;
use App\Models\Product_images;

use Carbon\Carbon;
use App\Events\PreorderEvent;
use App\Events\CustomerEvent;
use App\Events\ProductEvent;
use App\Events\LogEvent;
use App\Events\InventoryEvent;

use App\Services\AutoGenerated;
use App\Services\ProductStatusService;
use App\Services\TriggerServices;
class PreorderController extends Controller{

    public function getAllPreorder(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');

        $customerCodes = $request->input('customer_codes', []);
        $customerGroups = $request->input('customer_groups', []);
        $productCodes = $request->input('product_codes', []);
        $categoryDates = $request->input('category_dates');
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');

        // Base query optimized
        $query = Orders::with(['customer.source', 'product', 'status'])
            ->where('show_category', 'orders')
            ->orderByRaw("FIELD(order_status, 3) DESC")
            ->orderByRaw("DATE_FORMAT(STR_TO_DATE(order_date, '%b %d %Y'), '%Y%m%d') DESC")
            ->orderByDesc('id');

        // Apply filters
        if (!empty($customerCodes)) {
            $query->whereHas('customer', fn($q) => $q->whereIn('id', $customerCodes));
        }

        if (!empty($customerGroups)) {
            $query->whereHas('customer', fn($q) => $q->whereIn('group_id', $customerGroups));
        }

        if (!empty($productCodes)) {
            $query->whereHas('product', fn($q) => $q->whereIn('id', $productCodes));
        }

        // Date filters
        if ($categoryDates && $dateFrom && $dateTo) {
            $dateField = $this->getCategoryDateField($categoryDates);

            if ($dateField) {
                $query->whereBetween(DB::raw("STR_TO_DATE($dateField, '%b %d %Y')"), [$dateFrom, $dateTo]);
            }
        }

        // Search filter
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('order_id', 'like', "%{$search}%")
                    ->orWhere('rvoucher_no', 'like', "%{$search}%")
                    ->orWhere('po_number', 'like', "%{$search}%")
                    ->orWhere('rwarehouse', 'like', "%{$search}%")
                    ->orWhere('pod', 'like', "%{$search}%")
                    ->orWhereHas('product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('customer', function ($q) use ($search) {
                        $q->where('customer_code', 'like', "%{$search}%");
                    });
            });
        }

        // ✅ FAST: Calculate footer2 using DB aggregation (NO GET ALL)
        $footer2 = $this->calculateFooterFromQuery(clone $query);

        // Paginate the results
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform data after pagination
        $data = $result->map($this->transformOrderData());

        // Calculate footer for current page
        $footer = $this->calculateFooter($data);

        // Filter specific columns
        $filteredData = $data->map(fn($item) => [
            'id' => $item->id,
            'order_id' => $item->order_id,
            'order_date' => $item->order_date,
            'customer_id' => $item->customer_id,
            'product_id' => $item->product_id,
            'currency' => $item->currency,
            'ex_rate' => $item->ex_rate,
            'qty' => $item->qty,
            'price' => $item->price,
            'base_total' => $item->base_total,
            'item_deposit' => $item->item_deposit,
            'base_item_deposit' => $item->base_item_deposit,
            'e_total_sales' => $item->e_total_sales,
            'e_total_sales_currency' => $item->e_total_sales_currency,
            'e_profit' => $item->e_profit,
            'e_profit_currency' => $item->e_profit_currency,
            'e_cost_total' => $item->e_cost_total,
            'e_cost_total_currency' => $item->e_cost_total_currency,
            'pod' => $item->pod,
            'rwarehouse' => $item->rwarehouse,
            'order_status' => $item->order_status,
            'status_en' => $item->status_en,
            'status_cn' => $item->status_cn,
            'customer_code' => $item->customer_code,
            'account_name_en' => $item->account_name_en,
            'account_name_cn' => $item->account_name_cn,
            'product_code' => $item->product_code,
            'product_title_en' => $item->product_title_en,
            'product_title_cn' => $item->product_title_cn,
            'source_en' => $item->source_en,
            'source_cn' => $item->source_cn,
            'total' => $item->total,
            'deposit' => $item->deposit,
            'base_deposit' => $item->base_deposit,
            'sales_person_name' => $item->customer->salesPerson->full_name,
        ]);

        // Preparing the response
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result->currentPage(),
                'data' => $filteredData,
                'footer' => $footer,
                'footer2' => $footer2,
                'last_page' => $result->lastPage(),
                'per_page' => $result->perPage(),
                'total' => $result->total(),
            ]
        ]);
    }
    private function calculateFooterFromQuery($query){
        $aggregates = $query->selectRaw('
            SUM(qty) as total_qty,
            SUM(qty * price) as total_amount,
            SUM(base_total) as total_base_total,
            SUM(e_cost_total) as total_e_cost_total,
            SUM(e_profit) as total_e_profit,
            SUM(CASE WHEN order_status = 2 THEN 0 ELSE base_item_deposit END) as total_base_deposit
        ')->first();

        return [
            'qty' => $aggregates->total_qty ?? 0,
            'total' => $aggregates->total_amount ?? 0,
            'orig_total' => $aggregates->total_amount ?? 0,
            'base_total' => $aggregates->total_base_total ?? 0,
            'e_cost_total' => $aggregates->total_e_cost_total ?? 0,
            'e_profit' => $aggregates->total_e_profit ?? 0,
            'base_deposit' => $aggregates->total_base_deposit ?? 0,
        ];
    }
    private function getCategoryDateField($categoryDates){
        $fields = [
            'OrderDate' => 'order_date',
            'ReleaseDate' => 'release_date',
            'ClosingDate' => 'preorder_end_date',
        ];

        return $fields[$categoryDates] ?? null;
    }
    private function calculateFooter($data){
        return [
            'qty' => $data->sum('qty'),
            'total' => $data->sum('total'),
            'orig_total' => $data->sum('total'),
            'base_total' => $data->sum('base_total'),
            'e_cost_total' => $data->sum('e_cost_total'),
            'e_profit' => $data->sum('e_profit'),
            'base_deposit' => $data->sum('base_deposit'),
        ];
    }
    private function calculateTotal($data){
        $currency = $data->pluck('currency')->unique()->first();
        return $currency && $data->every(fn($item) => $item->currency === $currency) ? $data->sum('total') : 0;
    }
    private function transformOrderData(){
        return function ($list) {
            $account_name_en = optional($list->customer)->account_name_en;
            $account_name_cn = optional($list->customer)->account_name_cn;
            $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);

            $list->sales_person_name = optional($list->salesPerson)->full_name ?? '';
            $list->status_en = optional($list->status)->status_en;
            $list->status_cn = optional($list->status)->status_cn;
            $list->customer_code = optional($list->customer)->customer_code;
            $list->account_name_en = $account_name_en;
            $list->account_name_cn = $account_name_cn;
            $list->product_code = optional($list->product)->product_code;
            $list->product_title_en = optional($list->product)->product_title_en;
            $list->product_title_cn = optional($list->product)->product_title_cn;
            $list->source_en = optional($list->customer)->source->description_en ?? null;
            $list->source_cn = optional($list->customer)->source->description_cn ?? null;
            $list->customer_type = optional($list->customer)->customer_type;
            $list->total = $list->qty * $list->price;
            $list->deposit = $list->order_status == 2 ? 0 : $list->item_deposit;
            $list->base_deposit = $list->order_status == 2 ? 0 : $list->base_item_deposit;
            return $list;
        };
    }
    public function delPreorder(Request $request){
        $ids = $request->input('ids');

        if (!is_array($ids) || empty($ids)) {
            return response()->json(['message' => 'No Orders IDs provided'], 400);
        }

        foreach ($ids as $id) {
            $order = Orders::with(['product', 'customer'])->find($id);

            if (!$order) continue; // skip if not found

            // Log the action
            $globalController = new GlobalController();
            $globalController->logAction(
                'Preorder',
                't_orders',
                'delete',
                'Customer Code : ' . ($order->customer->customer_code ?? 'N/A') .
                ' - Product Code : ' . ($order->product->product_code ?? 'N/A')
            );
            $order->delete(); // delete the order
            $this->getUpdateProductStatus($order->product_id);
        }
        // Trigger events
        event(new PreorderEvent('delete'));
        event(new CustomerEvent('delete'));
        event(new ProductEvent('delete'));
        event(new LogEvent( 'insert'));
        return response()->json(['message' => 'Preorder deleted']);
    }
    public function delVoucher(Request $request){
        $ids = $request->input('ids');

        if (!is_array($ids) || empty($ids)) {
            return response()->json(['message' => 'No Vouchers IDs provided'], 400);
        }

        foreach ($ids as $id) {
            $voucher = Order_Voucher::find($id);

            if (!$voucher) continue; // skip if not found

            // Log the action
            $globalController = new GlobalController();
            $globalController->logAction(
                'Preorder',
                't_orders',
                'delete',
                'Voucher Code : ' . ($voucher->voucher_no)
            );
            $voucher->delete(); // delete the order
        }
        // Trigger events
        return response()->json(['message' => 'Voucher deleted']);
    }
    public function getPreorderInfo($id){
        $order = Orders::with(['customer.source', 'product', 'salesPerson', 'podList', 'rwarehouseList', 'customerGroup'])
            ->where('id', $id)
            ->first();

        if (!$order) {
            return response()->json([
                'success' => true,
                'message' => 'Order is empty',
            ]);
        }

        $voucher_value = 0;
        if ($order && $order->voucher_code) {
            $voucher_value = Order_Voucher::where('voucher_no', $order->voucher_code)->value('value');
        }

        // load price setup used for some returned fields
        $product_id = optional($order->product)->id;
        $currency = $order->currency;
        $priceSetup = Price_setup::with(['customerGroup'])
            ->where('product_id', $product_id)
            ->where('currency', $currency)
            ->where('type', 'retail')
            ->first();

        // return the flat list directly (no intermediate $list variable)
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'id'                          => $order->id,
                'order_id'                    => $order->order_id ?? '',
                'order_date'                  => $order->order_date ?? '',
                'customer_id'                 => $order->customer_id ?? null,
                'product_id'                  => $order->product_id ?? null,
                'currency'                    => $order->currency ?? '',
                'ex_rate'                     => $order->ex_rate ?? 0,
                'qty'                         => $order->qty ?? 0,
                'allocated_qty'               => $order->allocated_qty ?? 0,
                'price'                       => $order->price ?? 0,
                'base_total'                  => $order->base_total ?? 0,
                'item_deposit'                => $order->item_deposit ?? 0,
                'base_item_deposit'           => $order->base_item_deposit ?? 0,
                'e_total_sales'               => $order->e_total_sales ?? 0,
                'e_total_sales_currency'      => $order->e_total_sales_currency ?? '',
                'e_profit'                    => $order->e_profit ?? 0,
                'e_profit_currency'           => $order->e_profit_currency ?? '',
                'e_cost_total'                => $order->e_cost_total ?? 0,
                'e_cost_total_currency'       => $order->e_cost_total_currency ?? '',
                'po_number'                   => $order->po_number ?? '',
                'price_a'                     => $order->price_a ?? 0,
                'price_b'                     => $order->price_b ?? 0,
                'price_c'                     => $order->price_c ?? 0,
                'price_setup_deposit'         => $order->price_setup_deposit ?? 0,
                'price_setup_deposit_currency'=> $order->price_setup_deposit_currency ?? '',
                'pcs_per_carton'              => $order->pcs_per_carton ?? 0,
                'pod'                         => $order->pod ?? '',
                'rwarehouse'                  => $order->rwarehouse ?? '',
                'rvoucher_no'                 => $order->rvoucher_no ?? '',
                'order_status'                => $order->order_status ?? null,
                'sales_person_id'             => $order->sales_person_id ?? null,
                'customer_group_id'           => $order->customer_group_id ?? null,
                'po_detail_id'                => $order->po_detail_id ?? null,
                'po_received_qty'             => $order->po_received_qty ?? 0,
                'voucher_code'                => $order->voucher_code ?? '',
                'customer_group_currency'     => $order->customer_group_currency ?? '',
                'on_po'                       => $order->on_po ?? 0,
                'show_category'               => $order->show_category ?? '',
                'created_at'                  => $order->created_at ?? '',
                'updated_at'                  => $order->updated_at ?? '',
                // Transformed scalar fields (pulling values from relations inline)
                'sales_person_name'           => optional($order->salesPerson)->full_name ?? '',
                'customer_code'               => optional($order->customer)->customer_code ?? '',
                'account_name_en'             => optional($order->customer)->account_name_en ?? '',
                'account_name_cn'             => optional($order->customer)->account_name_cn ?? '',
                'product_code'                => optional($order->product)->product_code ?? '',
                'release_date'                => optional($order->product)->release_date ?? '',
                'closing_date'                => optional($order->product)->preorder_dateline ?? '',
                'item_cost_currency'          => optional($order->product)->item_cost_currency ?? '',
                'item_cost'                   => optional($order->product)->item_cost ?? 0,
                'product_title_en'            => optional($order->product)->product_title_en ?? '',
                'product_title_cn'            => optional($order->product)->product_title_cn ?? '',
                'source_en'                   => optional(optional($order->customer)->source)->description_en ?? '',
                'source_cn'                   => optional(optional($order->customer)->source)->source_cn ?? '',
                'customer_type'               => (optional($order->customer)->customer_type == 'WC') ? 'Wholesale Customer' : 'Retail Customer',
                'pod_en'                      => optional($order->podList)->warehouse_en ?? '',
                'pod_cn'                      => optional($order->podList)->warehouse_cn ?? '',
                'rwarehouse_en'               => optional($order->rwarehouseList)->warehouse_en ?? '',
                'rwarehouse_cn'               => optional($order->rwarehouseList)->warehouse_cn ?? '',
                'customer_group_en'           => optional($order->customerGroup)->customer_group_en ?? '',
                'customer_group_cn'           => optional($order->customerGroup)->customer_group_cn ?? '',
                'series_en'                   => optional(optional($order->product)->series)->series_en ?? '',
                'series_cn'                   => optional(optional($order->product)->series)->series_cn ?? '',
                'supplier_code'               => optional(optional($order->product)->supplier)->supplier_code ?? '',
                'po_dateline'                 => optional($order->product)->po_dateline ?? '',
                'offered_cost'                => optional($order->product)->offered_cost ?? 0,
                'offered_cost_currency'       => optional($order->product)->supplier_currency ?? '',
                'voucher_value'               => $voucher_value ?? 0,
                'deposit_currency'            => $priceSetup->currency ?? '',
                'retail_price_currency'       => $priceSetup->currency ?? '',
                'preorder_price_currency'     => $priceSetup->currency ?? '',
                'preorder_price'              => $priceSetup->preorder_price ?? 0,
                'retail_price'                => $priceSetup->retail_price ?? 0,
                'price_deposit'               => $priceSetup->deposit ?? 0,
            ],
        ]);
    }
    public function getWholesalePricingByProduct($productId, $customerGroupId, $currency, $qty){
        $priceSetup = Price_setup::where('product_id', $productId)
            ->where('customer_group_id', $customerGroupId)
            ->where('currency', $currency)
            ->first();


        if (!$priceSetup) {
            return response()->json([
                'success' => false,
                'message' => 'No pricing setup found.'
            ], 404);
        }

        $price = 0;


        if ($priceSetup->pcs_or_crtn == 1) {
            if ($qty >= $priceSetup->price_a_pcs_crtn) {
                $price = $priceSetup->price_a;
            } elseif ($qty >= $priceSetup->price_b_pcs_crtn && $qty <= $priceSetup->price_b_to_pcs_crtn) {
                $price = $priceSetup->price_b;
            } elseif ($qty < $priceSetup->price_b_pcs_crtn) {
                $price = $priceSetup->price_c;
            }
        }

        return response()->json([
            'success' => true,
            'data' => [
                'price' => $price
            ]
        ]);
    }
    function getRetailPriceByProduct(int $productId, string $currency)
    {
        $product = Products::with('priceList')->find($productId);

        if (!$product) return 0;

        $status = $this->getProductStatus($productId); // 'Retail' or 'Preorder'

        $type = ($status === 'Retail' ? 'retail' : 'wholesale');
        $priceSetup = $product->priceList->where('currency', $currency)->where('type', $type) ->first();

        if (!$priceSetup) return 0;
        if ($status === 'Retail') {
            return $priceSetup->retail_price;
        }
        if ($status === 'Preorder') {
            return $priceSetup->preorder_price;
        }
        return 0;
    }
    function getProductStatus(int $productId): string|null
    {
        $product = Products::find($productId);

        if (!$product) return null;

        $hasGRN = DB::table('t_grn_detail')->where('product_id', $productId)->exists();

        $today = Carbon::today();
        $preorderEnd = null;

        if (!empty($product->preorder_end_date)) {
            try {
                $preorderEnd = Carbon::createFromFormat('M d Y', $product->preorder_end_date);
            } catch (\Exception $e) {
                return 'Retail'; // fallback in case of bad format
            }
        }

        if (!$hasGRN && $preorderEnd && $today->lessThanOrEqualTo($preorderEnd)) {
            return 'Preorder';
        }
        return 'Retail';
    }
    function checkPOOrderQty(int $productId, int $currentOrderId, int $newQty): int
    {
        // Sum of PO quantities where PO status is NOT 3
        $poQty = POrder_detail::where('product_id', $productId)
            ->where('postatus_id', '!=', 3)
            ->sum('qty');

        // Sum of all other orders for this product, excluding current order ID
        $existingOrderQty = Orders::where('product_id', $productId)
            ->where('id', '!=', $currentOrderId)
            ->where('show_category','=','orders')
            ->sum('qty');

        // Total order qty = existing + new input qty
        $totalOrderQty = $existingOrderQty + $newQty;

        // Check if total orders exceed PO quantity
        return ($poQty > 0 && $totalOrderQty > $poQty) ? 1 : 0;
    }
    function getProductIfExists(int $customerId, int $productId): int
    {
        return Orders::where('customer_id', $customerId)
            ->where('product_id', $productId)
            ->count();
    }

    public function updatePreorder(Request $request, $id){
        $OrigID = $id;
        $productId = $request->product_id;
        $customer_id = $request->customer_id;
        $qty = $request->qty;
        $Action = ($OrigID === 0 ? 'insert' : 'update');
        $order_status = 2;

        DB::beginTransaction();

        try {

            $count_checkPOOrderQty = $this->checkPOOrderQty($productId,$OrigID,$qty);
            if($count_checkPOOrderQty > 0){
                return response()->json([
                    'token'     => 'Error',
                    'message'   => 'Ordered Qty is greater than PO Qty',
                    'message2'  => '',
                    'id'        => $id,
                    'action'    => $Action
                ]);
            }
            if ((int) $id === 0) {
                $countIsSuccess = 0;
                $unsoldQty = 0;

                $getUnsoldOrdersByProductId = $this->getUnsoldOrdersByProductId($productId);
                $countUnsoldOrders = count($getUnsoldOrdersByProductId);

                if ($countUnsoldOrders > 0) {
                    foreach ($getUnsoldOrdersByProductId as $list) {
                        // Ensure you're using object properties or cast to array if needed
                        $listUnsoldQty = is_array($list) ? $list['UnsoldQty'] : $list->UnsoldQty ?? 0;

                        if ($qty > $listUnsoldQty && $OrigID == 0) {
                            $unsoldQty = $listUnsoldQty;
                            $countIsSuccess++;
                        }
                    }

                    if ($countIsSuccess > 0) {
                        return response()->json([
                            'token'    => 'Error',
                            'message'  => 'Remaining quantity is ',
                            'message2' => $unsoldQty,
                            'id'       => $id,
                            'action'   => $Action
                        ]);
                    }
                }

                $count_getProductIfExists = $this->getProductIfExists($customer_id,$productId);
                
                if($count_getProductIfExists > 0){
                    return response()->json([
                        'token'    => 'Error',
                        'message'  => 'Order Exist',
                        'message2' => '',
                        'id'       => $id,
                        'action'   => $Action
                    ]);
                }
                $order_status = 2;
            }
            else{
                $oldOrder = Orders::find($id);
                $oldOrder_qty = (int) $oldOrder->qty;
                $oldOrder_price = (float) $oldOrder->price;
                $oldOrder_item_deposit = (float) $oldOrder->item_deposit;

                $newOrder_qty = (int) $request->qty;
                $newOrder_price = (float) $request->price;
                $newOrder_item_deposit = (float) $request->item_deposit;

                $order_status =  (int) $oldOrder->order_status;

                if( $order_status === 1 && ($oldOrder_qty != $newOrder_qty || $oldOrder_price != $newOrder_price || $oldOrder_item_deposit != $oldOrder_item_deposit )){
                    $order_status = 3;
                }
            }

            // If product ID is 0, create a new product
            if ((int) $id === 0) {
                // Create product with status
                $AutoGenerated = new AutoGenerated();
                $order_id = $AutoGenerated->getNextNo("order_id","WH","t_orders");
                $orderData = [
                    'order_id' => $order_id,
                    'order_date' => $request->order_date,
                    'order_status' => $order_status,
                    'pcs_per_carton' => $request->pcs_per_carton,
                    'customer_id' => $customer_id,
                    'customer_group_id' => $request->customer_group_id,
                    'sales_person_id' => $request->sales_person_id,
                    'rwarehouse' => $request->rwarehouse,
                    'pod' => $request->pod,
                    'product_id' => $productId,
                    'currency' => $request->currency,
                    'ex_rate' => $request->ex_rate,
                    'qty' => $request->qty,
                    'price' => $request->price,
                    'item_deposit' => $request->item_deposit,
                    'base_item_deposit' => $request->base_item_deposit,
                    'base_total' => $request->base_total,
                    'e_total_sales' => $request->e_total_sales,
                    'e_total_sales_currency' => $request->e_total_sales_currency,
                    'e_cost_total' => $request->e_cost_total,
                    'e_cost_total_currency' => $request->e_cost_total_currency,
                    'e_profit' => $request->e_profit,
                    'e_profit_currency' => $request->e_profit_currency,
                    'price_a' => $request->price,
                    'price_b' => $request->price_b,
                    'price_c' => $request->price_c,
                    'price_setup_deposit' => $request->price_setup_deposit,
                    'price_setup_deposit_currency' => $request->price_setup_deposit_currency,
                    'voucher_code' => $request->voucher_code,
                ];
                $order = Orders::create($orderData);
                $id = $order->id;
            } else {
                // Otherwise, find existing product
                $order = Orders::find($id);
                if (!$order) {
                    return response()->json([
                        'token'    => 'Error',
                        'message'  => 'No Order',
                        'message2' => '',
                        'id'       => $id,
                        'action'   => $Action
                    ]);
                }
                $orderData = [
                    'order_date' => $request->order_date,
                    'order_status' => $order_status,
                    'pcs_per_carton' => $request->pcs_per_carton,
                    'customer_id' => $customer_id,
                    'customer_group_id' => $request->customer_group_id,
                    'sales_person_id' => $request->sales_person_id,
                    'rwarehouse' => $request->rwarehouse,
                    'pod' => $request->pod,
                    'product_id' => $productId,
                    'currency' => $request->currency,
                    'ex_rate' => $request->ex_rate,
                    'qty' => $request->qty,
                    'price' => $request->price,
                    'item_deposit' => $request->item_deposit,
                    'base_item_deposit' => $request->base_item_deposit,
                    'base_total' => $request->base_total,
                    'e_total_sales' => $request->e_total_sales,
                    'e_total_sales_currency' => $request->e_total_sales_currency,
                    'e_cost_total' => $request->e_cost_total,
                    'e_cost_total_currency' => $request->e_cost_total_currency,
                    'e_profit' => $request->e_profit,
                    'e_profit_currency' => $request->e_profit_currency,
                    'price_a' => $request->price,
                    'price_b' => $request->price_b,
                    'price_c' => $request->price_c,
                    'price_setup_deposit' => $request->price_setup_deposit,
                    'price_setup_deposit_currency' => $request->price_setup_deposit_currency,
                    'voucher_code' => $request->voucher_code,
                ];
                $order->update($orderData);
            }

            Order_Voucher::where('voucher_no', $request->voucher_code)->update(['status' => 1]);
            $this->getUpdatePOonOrder($productId,$id);
            $this->getUpdateProductStatus($productId);

            $globalController = new GlobalController();
            $globalController->logAction(
                'Preorder', 't_orders',
                $Action,
                'Customer Code : ' . $request->customer_code . 
                ' - Product Code : ' . $request->product_code
            );

            event(new PreorderEvent( $Action));
            event(new LogEvent( 'insert'));

            DB::commit(); // 👍 Success

            return response()->json([
                'token'     => 'Success',
                'message'   => 'Order(s) Successfully Saved',
                'message2'  => '',
                'id'        => $id,
                'action'    => $Action
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }
    }

    public function updateVoucher(Request $request, $id){
        $OrigID = $id;
        $voucher_no = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');

        // If product ID is 0, create a new product
        if ((int) $id === 0) {
            // Create product with status
            $AutoGenerated = new AutoGenerated();
            $voucher_no = $AutoGenerated->getNextNo("voucher_no","VC","t_order_voucher");
            $orderData = [
                'voucher_no' => $voucher_no,
                'voucher_date' => $request->voucher_date,
                'customer_id' => $request->customer_id,
                'expiry_date' => $request->expiry_date,
                'currency' => $request->currency,
                'value' => $request->value,
            ];
            $order = Order_Voucher::create($orderData);
            $id = $order->id;
            $voucher_no = $order->voucher_no;
        } else {
            // Otherwise, find existing product
            $order = Order_Voucher::find($id);
            if (!$order) {
                return response()->json([
                    'token'    => 'Error',
                    'message'  => 'No Order',
                    'message2' => '',
                    'id'       => $id,
                    'action'   => $Action
                ]);
            }
            $orderData = [
                'voucher_date' => $request->voucher_date,
                'customer_id' => $request->customer_id,
                'expiry_date' => $request->expiry_date,
                'currency' => $request->currency,
                'value' => $request->value,
            ];
            $order->update($orderData);
            $id = $order->id;
            $voucher_no = $order->voucher_no;
        }

        $globalController = new GlobalController();
        $globalController->logAction(
            'Preorder', 't_orders',
            $Action,
            'Voucher Code : ' . $voucher_no
        );

        return response()->json([
            'token'         => 'Success',
            'message'       => 'Successfully Saved',
            'message2'      => '',
            'id'            => $id,
            'voucher_no'    => $voucher_no,
            'action'        => $Action
        ]);
    }

    public function getUnsoldOrdersByProductId($productId)
    {
        $poQuery = DB::table('t_porder_master as A')
            ->join('t_porder_detail as B', 'B.po_number', '=', 'A.po_number')
            ->join('m_products as C', 'C.id', '=', 'B.product_id')
            ->select([
                'B.ID',
                'C.id as product_id',
                'C.product_code',
                'C.product_title_en',
                'C.product_title_cn',
                'A.po_number',
                'A.po_date',
                'A.ex_rate',
                'A.currency',
                'B.price',
                DB::raw('B.qty AS POQty'),
                'C.hold_qty',
                'B.ID as po_detail_id',
            ])
            ->whereColumn('B.qty', '!=', 'B.receive_qty');

        $grnQuery = DB::table('t_grn_master as A')
            ->join('t_grn_detail as B', 'B.grn_no', '=', 'A.grn_no')
            ->join('m_products as C', 'C.id', '=', 'B.product_id')
            ->join('t_porder_detail as D', 'D.ID', '=', 'B.po_id')
            ->join('t_porder_master as E', 'E.po_number', '=', 'D.po_number')
            ->select([
                'B.ID',
                'C.id as product_id',
                'C.product_code',
                'C.product_title_en',
                'C.product_title_cn',
                'B.po_number',
                'E.po_date',
                'A.ex_rate',
                'A.currency',
                'B.price',
                DB::raw('B.qty AS POQty'),
                'C.hold_qty',
                'D.ID as po_detail_id',
            ])
            ->where('A.grn_status_id', '=', 1);

        // Combine both queries with UNION ALL
        $combined = $poQuery->unionAll($grnQuery);

        // Wrap in subquery and filter by product_id
        $rows = DB::table(DB::raw("({$combined->toSql()}) as a"))
            ->mergeBindings($combined)
            ->where('a.product_id', $productId)
            ->orderByDesc('a.po_number')
            ->get();

        $final = [];

        foreach ($rows as $row) {
            $poDetailId = $row->po_detail_id ?? $row->ID;

            // Fetch related order IDs via Eloquent model
            $orderIds = Sales_order_qty_ids::where('po_detail_id', $poDetailId)
                ->pluck('order_id')
                ->toArray();

            if (empty($orderIds)) {
                continue;
            }

            // Calculate OrderQty from orders table
            $orderQty = DB::table('orders')
                ->whereIn('ID', $orderIds)
                ->selectRaw("CASE 
                                WHEN Qty <> Qty - AllocatedQty 
                                THEN COALESCE(SUM(Qty - AllocatedQty), 0) 
                                ELSE COALESCE(SUM(Qty), 0) 
                            END as OrderQty")
                ->value('OrderQty');

            $poQty = $row->POQty;
            $holdQty = $row->hold_qty ?? 0;
            $unsoldQty = $poQty - $orderQty - $holdQty;

            if ($unsoldQty > 0) {
                $row->OrderQty = $orderQty;
                $row->UnsoldQty = $unsoldQty;
                $final[] = $row;
            }
        }

        return $final;
    }

    public function getUpdatePOonOrder($productId,$orderId){
        $countPO = POrder_detail::where('product_id', $productId)
            ->whereColumn('qty', '!=', 'receive_qty')
            ->count();

        if($countPO > 0){
            $poDetail = POrder_detail::where('product_id', $productId)
                ->whereColumn('qty', '!=', 'receive_qty')
                ->first();

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $sumPOQty = $poDetail->qty ?? 0;
            $poNumber   = $poDetail->po_number ?? null;
            $poDetailID = $poDetail->id ?? null;
            $receiveQty = $poDetail->receive_qty ?? 0;
            $price = $poDetail->price ?? 0;
            $currency = $poDetail->currency ?? '';
            $exRate = $poDetail->ex_rate ?? '';
            $total = $sumPOQty * $price;
            $base_total = 0;
            $operator = Operator::where('convertion', $currency.$baseCurrency)->value('operator') ?? '';
            $sumOrderQty = Orders::where('product_id', $productId)->sum('qty');

            if ((int) $sumOrderQty <= (int) $sumPOQty) {
                if($baseCurrency != $currency){
                    $base_total = $total;
                }
                else{
                    if($operator === 'Divide'){
                        $base_total = $total / $exRate;
                    }
                    if($operator === 'Multiply'){
                        $base_total = $total * $exRate;
                    }
                }

                POrder_detail::where('id', $poDetailID)->update([
                    'qty'       => $sumPOQty,
                    'total'     => $total,
                    'base_total'=> $base_total,
                ]);

                $exists = Sales_order_qty_ids::where('po_detail_id', $poDetailID)
                    ->where('order_id', $orderId)
                    ->exists();

                if (!$exists) {
                    Sales_order_qty_ids::create([
                        'order_id' => $orderId,
                        'po_detail_id' => $poDetailID,
                    ]);
                }

                $orderIds = Orders::where('product_id', $productId)
                    ->orderByDesc('id')
                    ->pluck('id')
                    ->toArray(); 

                Orders::whereIn('id', $orderIds)->update([
                    'on_po' => 1,
                    'po_number' => $poNumber,
                    'po_detail_id'  => $poDetailID,
                    'po_received_qty' => $receiveQty,
                ]);
            }
        }

    }
    public function getUpdateProductStatus($productId){
        $ProductStatusService = new ProductStatusService;
        $ProductStatus = $ProductStatusService->getProductStatus($productId);

        Products::where('id', $productId)->update([
            'product_status' => $ProductStatus,
        ]);

        $this->getUpdateProductRemQty($productId);
    }
    public function getUpdateProductRemQty($productId){
        $orderQty = Orders::where('product_id', $productId)->sum('qty');
        $poQty = POrder_detail::where('product_id', $productId)
            ->whereIn('postatus_id', [1, 2])
            ->sum('qty');

        $remPOQty = POrder_detail::where('product_id', $productId)
            ->whereIn('postatus_id', [1, 2])
            ->selectRaw('COALESCE(SUM(qty - receive_qty), 0) AS qty')
            ->value('qty');

        $product_status = Products::where('id', $productId)
            ->value('product_status');

        switch($product_status){
            case 'Pre-order': 
                Products::where('id', $productId)->update([
                    'rem_qty' => $orderQty,
                    'is_po_qty' => 0
                ]);
            break;
            case 'Coming Soon': 
                
                if((int) $poQty > 0){
                    Products::where('id', $productId)->update([
                        'rem_qty' => $poQty,
                        'is_po_qty' => 1
                    ]);
                }
                else{
                    Products::where('id', $productId)->update([
                        'rem_qty' => $orderQty,
                        'is_po_qty' => 0
                    ]);
                }
                
            break;
            case 'Partial Received':
                Products::where('id', $productId)->update([
                    'rem_qty' => $remPOQty,
                    'is_po_qty' => 0
                ]);
            break;
            case 'No Order': 
                Products::where('id', $productId)->update([
                    'rem_qty' => $poQty,
                    'is_po_qty' => 0
                ]);
            break;
            case 'Sold Out': 
                Products::where('id', $productId)->update([
                    'rem_qty' => 0,
                    'is_po_qty' => 0
                ]);
            break;
        }

    }
    public function getSelectedPreorder(Request $request)
    {
        // Get the selected IDs from the request
        $ids = $request->input('ids');
        $lang = $request->input('lang');

        // Fetch the orders with the customer relationship
        $orders = Orders::with('customer','product')  // Eager load customer relationship
            ->whereIn('id', $ids)  // Filter by selected order IDs
            ->get();

        // Initialize totals
        $totalAmount = 0;
        $totalItemDeposit = 0;
        $totalBaseItemDeposit = 0;
        $company = '';
        $accountName = '';
        $customerType = '';
        $customerCode = '';
        $customerId = '';
        $currency = '';

        // Initialize an array to hold the order list
        $orderList = [];

        // Loop through the orders and calculate totals
        foreach ($orders as $order) {
            $totalAmount += $order->qty * $order->price;
            $totalItemDeposit += $order->item_deposit;
            $totalBaseItemDeposit += $order->base_item_deposit;

            // Add each order to the order list
            $orderList[] = [
                'id' => $order->id,
                'order_id' => $order->order_id,
                'order_date' => $order->order_date,
                'product_code' => $order->product->product_code,
                'product_title_en' => $order->product->product_title_en,
                'product_title_cn' => $order->product->product_title_cn,
                'qty' => $order->qty,
                'price' => $order->price,
                'total' => $order->qty * $order->price,
                'item_deposit' => $order->item_deposit,
                'base_item_deposit' => $order->base_item_deposit,
                'currency' => $order->currency,
                'customer_id' => $order->customer_id,
                'customer_name' => $order->customer->account_name_en,
            ];

            // Set customer-related columns (set once assuming all orders have same customer)
            $customer = $order->customer;
            if (!$company) $company = $customer->company_en;  // Only set once
            if (!$customerId) $customerId = $customer->id;
            if (!$accountName) $accountName = $customer->account_name_en;
            if (!$customerType) $customerType = $customer->customer_type;
            if (!$customerCode) $customerCode = $customer->customer_code;
            if (!$currency) $currency = $customer->currency;
        }

        $currentCredit = $this->getCurrentCreditCustomer($customerId,$currency);

        $orderRVDetails = $this->getPaymentInformation($ids,$lang);
        // $totalPaidDeposit = $orderRVDetails['total'];

        $sumRV = Receive_voucher_detail::whereIn('order_id', $ids)->sum('amount');
        $sumJV = Payment_orders_cn::whereIn('order_id', $ids)->get()
            ->groupBy('order_id')
            ->reduce(function ($carry, $group) {
                $amount = $group->contains('is_combined', 1)
                    ? $group->where('is_combined', 1)->max('payment_order')
                    : $group->where('is_combined', 0)->sum('payment_order');

                return $carry + $amount;
            }, 0);

        $totalPaidDeposit = $sumRV + $sumJV;

        $totalToPay = $totalItemDeposit - $totalPaidDeposit;
        $creditDetails = $this->getCreditsDetail(
            $customerId,$currency,$totalToPay);

        // Construct the result array with totals and the order list
        $resultArray = [
            'customer_code' => $customerCode,
            'customer_id' => $customerId,
            'company' => $company,
            'account_name_en' => $accountName,
            'customer_type' => $customerType,
            'current_credit' => $currentCredit,
            'total' => $totalAmount,
            'total_item_deposit' => $totalItemDeposit,
            'total_base_item_deposit' => $totalBaseItemDeposit,
            'currency' => $currency,
            'list' => $orderList,
            'rvs' => $orderRVDetails['data'],
            'crDetails' => $creditDetails,
            'totalPaidDeposit' => $totalPaidDeposit,
            'totalToPay' => $totalToPay,
        ];

        return response()->json($resultArray);  // Return as JSON response
    }
    public function getCurrentCreditCustomer($customerId, $currency)
    {
        // Fetch and group the records by currency
        $records = Account_customer_cn::where('customer_id', $customerId)->get()->groupBy('currency');

        $totalDebit = 0;
        $totalCredit = 0;

        foreach ($records as $recordCurrency => $entries) {
            $debitSum = $entries->sum(function ($entry) use ($currency, $recordCurrency) {
                return $recordCurrency === $currency
                    ? $entry->debit
                    : $entry->debit * $entry->ex_rate;
            });

            $creditSum = $entries->sum(function ($entry) use ($currency, $recordCurrency) {
                return $recordCurrency === $currency
                    ? $entry->credit
                    : $entry->credit * $entry->ex_rate;
            });

            $totalDebit += $debitSum;
            $totalCredit += $creditSum;
        }

        $balanceCredit = $totalCredit - $totalDebit;

        // Get total pending invoices
        $pendingInvoiceAmount = $this->getPendingInvoiceAmount($customerId, $currency);

        // Final available credit
        return $balanceCredit - $pendingInvoiceAmount;
    }
    public function getPendingInvoiceAmount($customerId, $currency)
    {
        return Accounts_receivable::where('customer_id', $customerId)
            ->where('balance', '>', 0)
            ->where('currency', $currency)
            ->sum('balance');
    }
    public function getPaymentInformation($ids,$language){
        $resultArray = [];
        $totalDeposit = 0;

        foreach ($ids as $orderId) {
            // 🔹 1. Receive Voucher
            $rvouchers = Receive_voucher_detail::where('order_id', $orderId)
                ->orderBy('rv_number')
                ->get();

            foreach ($rvouchers as $rv) {
                $qty = intval($rv->qty);
                $amountCheck = $this->isAmountSameInDeposit($orderId, $rv->amount);

                if ($amountCheck > 0) {
                    $order = Orders::find($orderId);
                    if ($order && $rv->qty != $order->qty) {
                        $qty = "{$rv->qty} of {$order->qty} Pcs.";
                    }
                }

                $particulars = "Receive Voucher~收款凭证";
                $particulars = $this->translateParticulars($particulars, $language);

                $resultArray[] = [
                    'id'            => $rv->id,
                    'orer_id'       => $rv->order_id,
                    'date'          => $rv->rv_date,
                    'no'            => $rv->rv_number,
                    'product_code'  => $rv->product->product_code,
                    'particulars'   => $particulars,
                    'qty'           => $qty,
                    'orig_qty'      => $rv->qty,
                    'currency'      => $rv->currency,
                    'amount'        => $rv->amount,
                    'type'          => 'RV~收款单号',
                ];

                $totalDeposit += floatval($rv->amount);
            }

            // 🔹 2. Journal Voucher (Account Customer CN)
            $payments = Payment_orders_cn::with(['accountCustomerCn', 'order'])
                ->where('order_id', $orderId)
                ->get();

            foreach ($payments as $payment) {
                $account = $payment->accountCustomerCn;
                $order = $payment->order;
                if (!$account || !$order) continue;

                $amt = $payment->payment_order;
                $priceSetupDeposit = $order->price_setup_deposit;
                $pcsPerCarton = $order->pcs_per_carton;
                $qtyTotal = $order->qty;
                $qty = $qtyTotal;

                $amountCheck = $this->isAmountSameInDeposit($orderId, $amt);
                if ($amountCheck > 0 && $qty !== $qtyTotal) {
                    $qty = intval(($amt / $priceSetupDeposit) * $pcsPerCarton);
                    $qty = "{$qty} of {$qtyTotal} Pcs.";
                }

                $particulars = $this->translateParticulars($account->particulars, $language);

                $resultArray[] = [
                    'id'            => $account->id,
                    'orig_id'       => $orderId,
                    'date'          => $account->transaction_date,
                    'no'            => $account->ref_data,
                    'product_code'  => $order->product->product_code,
                    'particulars'   => $particulars,
                    'qty'           => $qty,
                    'orig_qty'      => intval(($amt / $priceSetupDeposit) * $pcsPerCarton),
                    'currency'      => $account->currency,
                    'amount'        => $amt,
                    'cnt'           => 0,
                    'type'          => 'JV~记账号',
                ];
                $totalDeposit += floatval($amt);
            }

            // 🔹 3. Credit Notes
            $creditNotes = Credit_note_customer_detail::where('order_id', $orderId)
                ->orderBy('cr_number')
                ->get();

            foreach ($creditNotes as $cr) {
                $resultArray[] = [
                    'id'            => $cr->id,
                    'order_id'      => $cr->order_id,
                    'date'          => $cr->cr_date,
                    'no'            => $cr->cr_number,
                    'product_code'  => $cr->particulars,
                    'particulars'   => $cr->remarks,
                    'qty'           => 0,
                    'orig_qty'      => 0,
                    'currency'      => $cr->currency,
                    'amount'        => $cr->amount,
                    'type'          => 'CRN',
                ];
                $totalDeposit += floatval($cr->amount);
            }
        }
        // Sort resultArray by 'date' descending (expects format like 'Aug 05 2025')
        usort($resultArray, function ($a, $b) {
            return strtotime($b['date']) <=> strtotime($a['date']);
        });

        return [
            'data' => $resultArray,
            'total' => $totalDeposit,
        ];
    }
    public function translateParticulars($particulars, $language)
    {
        if (strpos($particulars, '~') !== false) {
            [$en, $cn] = explode('~', $particulars);
            return $language === 'en' ? $en : $cn;
        }
        return $particulars;
    }
    public function isAmountSameInDeposit($orderId, $amount)
    {
        $exists = Orders::where('id', $orderId)
            ->where('item_deposit', '!=', $amount)
            ->exists();

        return $exists ? $orderId : 0;
    }
    public function getCreditsDetail_old(int $customerId, string $targetCurrency,$balanceToPay)
    {
        // Step 1: Load all matching Account_customer_cn with related Charts_of_account
        $records = Account_customer_cn::with('account')
            ->where('customer_id', $customerId)
            ->get()
            ->groupBy(fn($rec) => $rec->account_code);

        $result = [];
        $count = 0;

        foreach ($records as $accountCode => $group) {
            $account = $group->first()->account;

            // Handle special merge logic for specific customer code
            // 29 is LGBB
            $aggregateCode = ($customerId === 29 &&
                in_array($accountCode, ['21312', '21602']))
                ? '21313' : $accountCode;

            $origCurrency = $group->first()->currency; // assumption
            $isConverted = ($origCurrency !== $targetCurrency);

            // Sum amounts per currency within each account code
            $amount = $group
                ->groupBy('currency')
                ->map(fn($byCurr, $curr) => $byCurr->sum(fn($r) =>
                    $r->currency === $targetCurrency
                        ? ($r->credit - $r->debit)
                        : ($r->credit - $r->debit) * $r->ex_rate
                ))
                ->values()
                ->sum(); // total sum across currencies

            // For special customer, merge to one code
            if ($customerId === 29) {
                if (!isset($result[$aggregateCode])) {
                    $result[$aggregateCode] = [
                        'account_code'      => $aggregateCode,
                        'account_name_en'   => $account?->account_name_en,
                        'account_name_cn'   => $account?->account_name_cn,
                        'ref_data'          => $group->first()->ref_data,
                        'orig_currency'     => $origCurrency,
                        'currency'          => $targetCurrency,
                        'is_converted'      => $isConverted ? 1 : 0,
                        'default_amount'    => $balanceToPay,
                        'amount'            => 0.0,
                    ];
                }
                $sum = intval($result[$aggregateCode]['amount']) + $amount;
                $result[$aggregateCode]['amount'] = $sum;
            } else {
                    $result[$aggregateCode] = [
                        'account_code'          => $aggregateCode,
                        'account_name_en'       => $account?->account_name_en,
                        'account_name_cn'       => $account?->account_name_cn,
                        'ref_data'              => $group->first()->ref_data,
                        'orig_currency'         => $origCurrency,
                        'currency'              => $targetCurrency,
                        'is_converted'          => $isConverted ? 1 : 0,
                        'default_amount'        => $balanceToPay,
                        'amount'                => $amount,
                    ];
            }

            $count++;
        }
        // Filter out non-positive amounts and reindex
        return collect($result)
            ->filter(fn($row) => floatval($row['amount']) > 0)
            ->values()
            ->all();
    }
    public function getCreditsDetail($customerId, $targetCurrency,$balanceToPay)
    {
        $records = Account_customer_cn::with('account')
            ->where('customer_id', $customerId)
            ->get();

        $grouped = $records->groupBy(function ($item) {
            return $item->account_code . '|' . $item->currency;
        });

        $intermediate = collect();

        foreach ($grouped as $key => $group) {
            $first = $group->first();

            $convertedAmount = $group->reduce(function ($carry, $item) use ($targetCurrency) {
                $credit = $item->credit ?? 0;
                $debit = $item->debit ?? 0;
                $exRate = $item->ex_rate ?? 1;

                if ($item->currency === $targetCurrency) {
                    return $carry + ($credit - $debit);
                } else {
                    return $carry + (($credit * $exRate) - ($debit * $exRate));
                }
            }, 0);

            $convertedAmount = round($convertedAmount, 2);
            if ($convertedAmount === 0.0) {
                continue;
            }

            // Special merge logic for customerId == 29
            $originalCode = $first->account_code;
            $mergeCode = ($customerId == 29 && in_array($originalCode, ['21312', '21602'])) ? '21313' : $originalCode;

            $amountToAdd = $convertedAmount;

            if ($customerId == 29 && $originalCode === '21312' && $convertedAmount < 0) {
                // subtract negative amount from 21313
                $amountToAdd = $convertedAmount; // already negative
            }

            if ($customerId == 29) {
                // If we're merging into 21313 and it's not set yet
                if (!$intermediate->has($mergeCode)) {
                    $intermediate->put($mergeCode, [
                        'account_code'      => $mergeCode,
                        'account_name_en'   => $first->account?->account_name_en,
                        'account_name_cn'   => $first->account?->account_name_cn,
                        'ref_data'          => $first->ref_data,
                        'orig_currency'     => $first->currency,
                        'currency'          => $targetCurrency,
                        'is_converted'      => $first->currency === $targetCurrency ? 0 : 1,
                        'default_amount'    => $balanceToPay,
                        'amount'            => 0.0,
                    ]);
                }

                // Accumulate
                $existing = $intermediate->get($mergeCode);
                $existing['amount'] += $amountToAdd;
                $intermediate->put($mergeCode, $existing);
            } else {
                // Normal processing
                $intermediate->put($mergeCode, [
                    'account_code'      => $mergeCode,
                    'account_name_en'   => $first->account?->account_name_en,
                    'account_name_cn'   => $first->account?->account_name_cn,
                    'ref_data'          => $first->ref_data,
                    'orig_currency'     => $first->currency,
                    'currency'          => $targetCurrency,
                    'is_converted'      => $first->currency === $targetCurrency ? 0 : 1,
                    'default_amount'    => $balanceToPay,
                    'amount'            => $convertedAmount,
                ]);
            }
        }

        // Filter out accounts with non-positive totals
        $final = $intermediate
            ->filter(fn($row) => floatval($row['amount']) > 0)
            ->values();

        return $final;
    }
    public function confirmOrder(Request $request){
        $params = [
            'advance_payment'      => (float) ($request->advance_payment ?? 0.00),
            'balance_to_pay'       => (float) ($request->balance_to_pay ?? 0.00),
            'bank_charges'         => (float) ($request->bank_charges ?? 0.00),
            'base_advance_payment' => (float) ($request->base_advance_payment ?? 0.00),
            'base_bank_charges'    => (float) ($request->base_bank_charges ?? 0.00),
            'base_credit_note'     => (float) ($request->base_credit_note ?? 0.00),
            'base_excess_payment'  => (float) ($request->base_excess_payment ?? 0.00),
            'credit_note'          => (float) ($request->credit_note ?? 0.00),
            'current_credit'       => (float) ($request->current_credit ?? 0.00),
            'excess_payment'       => (float) ($request->excess_payment ?? 0.00),
            'total_credit_used'    => (float) ($request->total_credit_used ?? 0.00),
            'total_deposit'        => (float) ($request->total_deposit ?? 0.00),
            'ex_rate'              => (float) ($request->ex_rate ?? 0.0000),
            'order_date'           => $request->order_date,
            'orderId'              => $request->orderId,
            'customerId'           => (int) $request->customerId,
            'currency'             => $request->currency,
            'bank'                 => $request->banks,
        ];

        // Shorthand for easier logic checks
        $balanceToPay = $params['balance_to_pay'];
        $totalCredit  = $params['total_credit_used'];
        $totalDeposit = $params['total_deposit'];

        if ($balanceToPay === 0.00 && $totalCredit > 0) {

            return $this->doPayCredits($params,'JV');

        } elseif ($balanceToPay > 0 && $totalCredit > 0) {

            return $this->doPayCreditsAndReceiveVoucher($params,'JVRV');

        } elseif ($balanceToPay < 0) {
            return response()->json([
                'token'     => 'CreditNote',
                'message'   => 'Order(s) Successfully Saved',
                'message2'  => '',
                'id'        => $request->orderId,
                'action'    => 'Confirm'
            ]);
        } elseif ($balanceToPay > 0 && $totalCredit === 0.00) {

            return $this->doPayReceiveVoucher($params);

        } elseif ($balanceToPay === 0.00 && $totalCredit === 0.00 && $totalDeposit === 0.00) {
            $orderIds = explode(',', $request->orderId);
            $updatedCount = Orders::whereIn('id', $orderIds)->update([
                'item_deposit' => 0,
                'order_status' => 1,
                'base_item_deposit' => 0,
            ]);
            if($updatedCount > 0){
                $orderIds = explode(',', $params['orderId']);
                $orders = Orders::with(['product','customer'])
                    ->whereIn('id', $orderIds)
                    ->get();

                foreach ($orders as $order) {
                    $globalController = new GlobalController();
                    $globalController->logAction(
                        'Preorder', 't_orders',
                        'Confirm',
                        'Zero Deposit : Customer Code : ' . $order->customer->customer_code .
                        ' - Product Code : ' . $order->product->product_code
                    );
                }
                event(new CustomerEvent( 'confirm'));
                event(new PreorderEvent( 'confirm'));
                event(new LogEvent( 'insert'));
                return response()->json([
                    'token'     => 'Success',
                    'message'   => 'Order(s) Successfully Saved',
                    'message2'  => '',
                    'id'        => $orderIds,
                    'action'    => 'Confirm'
                ]);
            }
            else{
                return response()->json([
                    'token'     => 'Error',
                    'message'   => 'alert_message_91', // ERROR MESSAGE
                    'message2'  => '',
                    'id'        => $orderIds,
                    'action'    => 'Confirm'
                ]);
            }

        } else {
            $orderIds = explode(',', $request->orderId);
            Orders::whereIn('id', $orderIds)->update(['order_status' => 1]);
        }
    }
    function doPayCredits($params, $type)
    {
        $balanceToPay = $params['balance_to_pay'];
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $operator = Operator::where('convertion', $params['currency'] . $baseCurrency)->value('operator') ?? '';
        $baseBalanceToPay = 0;

        $orderIds = explode(',', $params['orderId']);

        if ($type === "JV") {
            $paymentOrder = Orders::whereIn('id', $orderIds)->pluck('item_deposit')->implode(',');
        }

        if ($type === "JVRV") {
            $paymentOrder = Orders::whereIn('id', $orderIds)->sum('item_deposit');
        }

        // Calculate base balance to pay
        if ($baseCurrency == $params['currency']) {
            $baseBalanceToPay = $balanceToPay;
        } else {
            if ($operator == "Divide") {
                $baseBalanceToPay = $balanceToPay / $params['ex_rate'];
            } elseif ($operator == "Multiply") {
                $baseBalanceToPay = $balanceToPay * $params['ex_rate'];
            }
        }

        // Format transaction date
        $transactionDate = date('M d Y');

        // Prepare data array with consistent key names
        $data = [
            'account_code1' => 21301,
            'account_code2' => 21313,
            'account_code3' => 21312,
            'account_code4' => 21310,
            'account_code5' => '',

            'description1' => 'Customer Deposit',
            'description2' => 'Customer Credit Note',
            'description3' => 'Customer Advance Payment',
            'description4' => 'Customer Excess Payment',
            'description5' => '',

            'amount1' => $balanceToPay,
            'amount2' => $params['credit_note'],
            'amount3' => $params['advance_payment'],
            'amount4' => $params['base_excess_payment'],
            'amount5' => 1,

            'base_amount1' => $baseBalanceToPay,
            'base_amount2' => $params['base_credit_note'],
            'base_amount3' => $params['base_advance_payment'],
            'base_amount4' => $params['base_excess_payment'],
            'base_amount5' => 0,

            'debit1' => 0,
            'debit2' => $params['base_credit_note'],
            'debit3' => $params['base_advance_payment'],
            'debit4' => $params['base_excess_payment'],
            'debit5' => 0,

            'credit1' => $baseBalanceToPay,
            'credit2' => 0,
            'credit3' => 0,
            'credit4' => 0,
            'credit5' => 0,

            'currency' => $params['currency'],
            'ex_rate' => $params['ex_rate'],
            'ar_invoice_no' => '',
            'ref_id' => 1,
            'transaction_date' => $transactionDate,
            'customer' => $params['customerId'],
            'orders_id' => $params['orderId'],
            'payment_order' => $paymentOrder,
            'Type' => $type,
        ];

        // Start DB transaction using Laravel's transaction wrapper
        try {
            return DB::transaction(function () use ($data) {
                $now = Carbon::now();
                $curDate = $now->format('ymd-His');
                $jvNo = "JV" . $curDate;

                $refID = $data['ref_id'];
                $transactionDate = $data['transaction_date'];
                $customer = $data['customer'];
                $currency = $data['currency'];
                $exRate = $data['ex_rate'];
                $arInvoiceNo = $data['ar_invoice_no'];
                $ordersID = $data['orders_id'];
                $paymentOrder = $data['payment_order'];

                // Entry 1: CUSTDEP
                if ($data['amount1'] > 0) {
                    General_entries::create([
                        'jv_no' => $jvNo,
                        'account_code' => $data['account_code1'],
                        'description' => $data['description1'],
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'invoice_no' => $arInvoiceNo,
                        'amount' => $data['amount1'],
                        'base_amount' => $data['base_amount1'],
                        'debit' => $data['debit1'],
                        'credit' => $data['credit1'],
                        'ref_id' => $refID,
                        'transaction_date' => $transactionDate,
                        'customer_id' => $customer,
                    ]);

                    General_ledger::create([
                        'account_code' => $data['account_code1'],
                        'transaction_date' => $transactionDate,
                        'acc_table' => 'general_entries',
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'acc_table_id' => "{$refID}-1",
                        'customer_id' => $customer,
                        'amount' => $data['amount1'],
                        'ref_data' => $jvNo,
                        'debit' => 0,
                        'credit' => $data['base_amount1'],
                    ]);
                }

                // Entry 2: Credit Note
                if ($data['amount2'] > 0) {
                    General_entries::create([
                        'jv_no' => $jvNo,
                        'account_code' => $data['account_code2'],
                        'description' => $data['description2'],
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'invoice_no' => $arInvoiceNo,
                        'amount' => $data['amount2'],
                        'base_amount' => $data['base_amount2'],
                        'debit' => $data['debit2'],
                        'credit' => $data['credit2'],
                        'ref_id' => $refID,
                        'transaction_date' => $transactionDate,
                        'customer_id' => $customer,
                    ]);

                    General_ledger::create([
                        'account_code' => $data['account_code2'],
                        'transaction_date' => $transactionDate,
                        'acc_table' => 'general_entries',
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'acc_table_id' => "{$refID}-2",
                        'customer_id' => $customer,
                        'amount' => $data['amount2'],
                        'ref_data' => $jvNo,
                        'debit' => $data['base_amount2'],
                        'credit' => 0,
                    ]);
                }

                // Entry 3: Advance Payment
                if ($data['amount3'] > 0) {
                    General_entries::create([
                        'jv_no' => $jvNo,
                        'account_code' => $data['account_code3'],
                        'description' => $data['description3'],
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'invoice_no' => $arInvoiceNo,
                        'amount' => $data['amount3'],
                        'base_amount' => $data['base_amount3'],
                        'debit' => $data['debit3'],
                        'credit' => $data['credit3'],
                        'ref_id' => $refID,
                        'transaction_date' => $transactionDate,
                        'customer_id' => $customer,
                    ]);
                    General_ledger::create([
                        'account_code' => $data['account_code3'],
                        'transaction_date' => $transactionDate,
                        'acc_table' => 'general_entries',
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'acc_table_id' => "{$refID}-3",
                        'customer_id' => $customer,
                        'amount' => $data['amount3'],
                        'ref_data' => $jvNo,
                        'debit' => $data['base_amount3'],
                        'credit' => 0,
                    ]);
                }

                // Entry 4: Excess Payment
                if ($data['amount4'] > 0) {
                    General_entries::create([
                        'jv_no' => $jvNo,
                        'account_code' => $data['account_code4'],
                        'description' => $data['description4'],
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'invoice_no' => $arInvoiceNo,
                        'amount' => $data['amount4'],
                        'base_amount' => $data['base_amount4'],
                        'debit' => $data['debit4'],
                        'credit' => $data['credit4'],
                        'ref_id' => $refID,
                        'transaction_date' => $transactionDate,
                        'customer_id' => $customer,
                    ]);

                    General_ledger::create([
                        'account_code' => $data['account_code4'],
                        'transaction_date' => $transactionDate,
                        'acc_table' => 'general_entries',
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'acc_table_id' => "{$refID}-4",
                        'customer_id' => $customer,
                        'amount' => $data['amount4'],
                        'ref_data' => $jvNo,
                        'debit' => $data['base_amount4'],
                        'credit' => 0,
                    ]);
                }

                // Entry 5: Account_customer_cn and Payment_orders_cn
                if ($data['amount5'] > 0) {
                    $lastInsertedId = 0;

                    foreach ([2, 3, 4] as $i) {
                        if ($data["amount{$i}"] > 0) {
                            $accountCustomer = Account_customer_cn::create([
                                'account_code' => $data["account_code{$i}"],
                                'customer_id' => $customer,
                                'currency' => $currency,
                                'cr_detail_id' => NULL,
                                'ref_data' => $jvNo,
                                'amount' => $data["amount{$i}"],
                                'base_amount' => $data["base_amount{$i}"],
                                'ex_rate' => $exRate,
                                'debit' => $data["amount{$i}"],
                                'credit' => 0,
                                'particulars' => match ($i) {
                                    2 => 'Offset Credit Note~抵扣帐款单',
                                    3 => 'Offset Advance Payment~抵扣预付款',
                                    4 => 'Offset Excess Payment~抵扣超额支付款',
                                },
                                'transaction_date' => $transactionDate,
                            ]);
                            $lastInsertedId = $accountCustomer->id;
                        }
                    }

                    $orderIdArray = array_map('trim', is_array($ordersID) ? $ordersID : explode(',', $ordersID));
                    $paymentOrderArray = array_map('trim', is_array($paymentOrder) ? $paymentOrder : explode(',', $paymentOrder));
                    $isCombined = ($data['Type'] === "JV") ? 0 : 1;

                    foreach ($orderIdArray as $index => $orderId) {
                        $sumRV = Receive_voucher_detail::where('order_id', $orderId)->sum('amount');
                        $sumJV = Payment_orders_cn::where('order_id', $orderId)->get()
                            ->groupBy('order_id')
                            ->reduce(function ($carry, $group) {
                                $amount = $group->contains('is_combined', 1)
                                    ? $group->where('is_combined', 1)->max('payment_order')
                                    : $group->where('is_combined', 0)->sum('payment_order');

                                return $carry + $amount;
                            }, 0);

                        $depositRVJV = $sumRV + $sumJV;
                        $payment_order = count($paymentOrderArray) === 1
                            ? $paymentOrderArray[0]
                            : ($paymentOrderArray[$index] ?? 0);

                        $paymentOrder = $payment_order - $depositRVJV;

                        Payment_orders_cn::create([
                            'account_customer_cn_id' => $lastInsertedId,
                            'order_id' => $orderId,
                            'payment_order' => $paymentOrder,
                            'is_combined' => $isCombined,
                        ]);
                    }

                    $orderIds = explode(',', $ordersID);
                    Orders::whereIn('id', $orderIds)->update(['order_status' => 1]);

                }

                $orderIds = explode(',', $ordersID);
                $orders = Orders::with(['product','customer'])
                    ->whereIn('id', $orderIds)
                    ->get();

                foreach ($orders as $order) {
                    $globalController = new GlobalController();
                    $globalController->logAction(
                        'Preorder', 't_orders',
                        'Confirm',
                        'Paid JV : Customer Code : ' . $order->customer->customer_code .
                        ' - Product Code : ' . $order->product->product_code
                    );
                }
                event(new CustomerEvent( 'confirm'));
                event(new PreorderEvent( 'confirm'));
                event(new LogEvent( 'insert'));

                return response()->json([
                    'token'     => 'Success',
                    'message'   => 'Order(s) Successfully Saved',
                    'message2'  => '',
                    'id'        => '',
                    'action'    => 'Confirm'
                ]);
            });
        } catch (\Exception $e) {
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Failed to create jv',
                'message2'  => $e->getMessage(),
                'id'        => 0,
                'action'    => 'Confirm'
            ]);
        }
    }
    function doPayReceiveVoucher($param)
    {
        if (is_null($param['bank'])) {
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Bank is required',
                'message2'  => '',
                'id'        => $param['orderId'],
                'action'    => 'Confirm'
            ]);
        }

        $AutoGenerated = new AutoGenerated();
        $rv_number = $AutoGenerated->getNextNo("rv_number", "RV", "t_rv_master");
        $accSettings = Accounting_settings::where('chart_fix_code', 'CUSTDEP')->first();
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');

        $base_total = $base_amount_paid = $base_bank_charges = 0;

        if ($baseCurrency === $param['currency']) {
            $base_total = $param['balance_to_pay'] / $param['ex_rate'];
            $base_amount_paid = $param['balance_to_pay'] / $param['ex_rate'];
            $base_bank_charges = $param['bank_charges'] / $param['ex_rate'];
        } else {
            $base_total = $param['balance_to_pay'] * $param['ex_rate'];
            $base_amount_paid = $param['balance_to_pay'] * $param['ex_rate'];
            $base_bank_charges = $param['bank_charges'] * $param['ex_rate'];
        }

        // Prepare master record
        $saveMaster = [
            'rv_number' => $rv_number,
            'account_code' => $accSettings->account_code,
            'customer_id' => $param['customerId'],
            'rv_date' => $param['order_date'],
            'rv_status_id' => 1,
            'ex_rate' => $param['ex_rate'],
            'currency' => $param['currency'],
            'total' => $param['balance_to_pay'],
            'amount_paid' => $param['balance_to_pay'],
            'bank_charges' => $param['bank_charges'],
            'base_total' => $base_total,
            'base_amount_paid' => $base_amount_paid,
            'base_bank_charges' => $base_bank_charges,
            'bank' => $param['bank'],
        ];

        $orderIds = explode(',', $param['orderId']);
        $orders = Orders::whereIn('id', $orderIds)->get();

        // Use transaction
        DB::beginTransaction();

        try {
            // Save master
            Receive_voucher_master::create($saveMaster);

            foreach ($orders as $order) {
                $depositRV = Receive_voucher_detail::where('order_id', $order->id)->sum('amount');
                $depositJV = Payment_orders_cn::where('order_id', $order->id)->sum('payment_order');
                $paidDeposit = $depositRV + $depositJV;

                $amount = $order->item_deposit - $paidDeposit;
                $amount_paid = $order->item_deposit - $paidDeposit;
                $base_amount = 0;

                if ($baseCurrency === $order['currency']) {
                    $base_amount = $amount / $order['ex_rate'];
                } else {
                    $base_amount = $amount * $order['ex_rate'];
                }

                $actualQty = $this->GetActualQty($param['customerId'],$order->qty,$order->id);

                Receive_voucher_detail::create([
                    'rv_number'     => $rv_number,
                    'customer_id'   => $param['customerId'],
                    'rv_date'       => $param['order_date'],
                    'account_code'  => $accSettings->account_code,
                    'product_id'    => $order->product_id,
                    'currency'      => $order->currency,
                    'ex_rate'       => $order->ex_rate,
                    'order_id'      => $order->id,
                    'qty'           => $actualQty,
                    'amount'        => $amount,
                    'base_amount'   => $base_amount,
                    'amount_paid'   => $amount_paid,
                    'remarks'       => '',
                ]);

                Orders::where('id', $order->id)->update(['order_status' => 1]);
            }
            $orderIds = explode(',', $param['orderId']);
            $orders = Orders::with(['product','customer'])
                ->whereIn('id', $orderIds)
                ->get();

            foreach ($orders as $order) {
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Preorder', 't_orders',
                    'Confirm',
                    'Paid RV : Customer Code : ' . $order->customer->customer_code .
                    ' - Product Code : ' . $order->product->product_code
                );
            }
            event(new CustomerEvent( 'confirm'));
            event(new PreorderEvent( 'confirm'));
            event(new LogEvent( 'insert'));

            DB::commit(); // 👍 Success

            return response()->json([
                'token'     => 'Success',
                'message'   => 'Order(s) Successfully Saved',
                'rv_number' => $rv_number,
                'action'    => 'Confirm'
            ]);
        } catch (\Exception $e) {
            DB::rollBack(); // ❌ Failed

            return response()->json([
                'token'     => 'Error',
                'message'   => 'Failed to create receive voucher',
                'message2'  => $e->getMessage(),
                'action'    => 'Confirm'
            ]);
        }
    }
    function GetActualQty($customerId, $qty, $orderId)
    {
        $rvQty = Receive_voucher_detail::where('customer_id', $customerId)
            ->where('order_id', $orderId)
            ->sum('qty');

        if ($qty == $rvQty) {
            return $qty;
        } elseif ($qty < $rvQty) {
            return $rvQty - $qty;
        } else {
            return $qty - $rvQty;
        }
    }
    function doPayCreditsAndReceiveVoucher($params, $type)
    {
        if (is_null($params['bank'])) {
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Bank is required',
                'message2'  => '',
                'id'        => $params['orderId'],
                'action'    => 'Confirm'
            ]);
        }

        $balanceToPay = $params['balance_to_pay'];
        $total_credit_used = $params['total_credit_used'];
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $operator = Operator::where('convertion', $params['currency'] . $baseCurrency)->value('operator') ?? '';
        $baseBalanceToPay = 0;
        $orderIds = explode(',', $params['orderId']);

        if ($type === "JV") {
            $paymentOrder = Orders::whereIn('id', $orderIds)->pluck('item_deposit')->implode(',');
        } elseif ($type === "JVRV") {
            $paymentOrder = Orders::whereIn('id', $orderIds)->sum('item_deposit');
        }

        if ($baseCurrency == $params['currency']) {
            $baseBalanceToPay = $balanceToPay;
        } else {
            if ($operator == "Divide") {
                $baseBalanceToPay = $balanceToPay / $params['ex_rate'];
            } elseif ($operator == "Multiply") {
                $baseBalanceToPay = $balanceToPay * $params['ex_rate'];
            }
        }

        $transactionDate = date('M d Y');

        $data = [
            'account_code1' => 21301,
            'account_code2' => 21313,
            'account_code3' => 21312,
            'account_code4' => 21310,
            'account_code5' => '',

            'description1' => 'Customer Deposit',
            'description2' => 'Customer Credit Note',
            'description3' => 'Customer Advance Payment',
            'description4' => 'Customer Excess Payment',
            'description5' => '',

            'amount1' => $balanceToPay,
            'amount2' => $params['credit_note'],
            'amount3' => $params['advance_payment'],
            'amount4' => $params['base_excess_payment'],
            'amount5' => 1,

            'base_amount1' => $baseBalanceToPay,
            'base_amount2' => $params['base_credit_note'],
            'base_amount3' => $params['base_advance_payment'],
            'base_amount4' => $params['base_excess_payment'],
            'base_amount5' => 0,

            'debit1' => 0,
            'debit2' => $params['base_credit_note'],
            'debit3' => $params['base_advance_payment'],
            'debit4' => $params['base_excess_payment'],
            'debit5' => 0,

            'credit1' => $baseBalanceToPay,
            'credit2' => 0,
            'credit3' => 0,
            'credit4' => 0,
            'credit5' => 0,

            'currency' => $params['currency'],
            'ex_rate' => $params['ex_rate'],
            'ar_invoice_no' => '',
            'ref_id' => 1,
            'transaction_date' => $transactionDate,
            'customer' => $params['customerId'],
            'orders_id' => $params['orderId'],
            'payment_order' => $paymentOrder,
            'Type' => $type,
        ];

        $AutoGenerated = new AutoGenerated();
        $rv_number = $AutoGenerated->getNextNo("rv_number", "RV", "t_rv_master");
        $accSettings = Accounting_settings::where('chart_fix_code', 'CUSTDEP')->first();

        $base_total = $base_amount_paid = $base_bank_charges = 0;

        if ($baseCurrency === $params['currency']) {
            $base_total = $params['balance_to_pay'] / $params['ex_rate'];
            $base_amount_paid = $params['balance_to_pay'] / $params['ex_rate'];
            $base_bank_charges = $params['bank_charges'] / $params['ex_rate'];
        } else {
            $base_total = $params['balance_to_pay'] * $params['ex_rate'];
            $base_amount_paid = $params['balance_to_pay'] * $params['ex_rate'];
            $base_bank_charges = $params['bank_charges'] * $params['ex_rate'];
        }

        $saveMaster = [
            'rv_number' => $rv_number,
            'account_code' => $accSettings->account_code,
            'customer_id' => $params['customerId'],
            'rv_date' => $params['order_date'],
            'rv_status_id' => 1,
            'ex_rate' => $params['ex_rate'],
            'currency' => $params['currency'],
            'total' => $params['balance_to_pay'],
            'amount_paid' => $params['balance_to_pay'],
            'bank_charges' => $params['bank_charges'],
            'base_total' => $base_total,
            'base_amount_paid' => $base_amount_paid,
            'base_bank_charges' => $base_bank_charges,
            'bank' => $params['bank'],
        ];

        $orders = Orders::whereIn('id', $orderIds)->get();

        try {
            DB::beginTransaction();

            // ====== PAY CREDIT SECTION ======
            $now = Carbon::now();
            $curDate = $now->format('ymd-His');
            $jvNo = "JV" . $curDate;

            $refID = $data['ref_id'];
            $transactionDate = $data['transaction_date'];
            $customer = $data['customer'];
            $currency = $data['currency'];
            $exRate = $data['ex_rate'];
            $arInvoiceNo = $data['ar_invoice_no'];
            $ordersID = $data['orders_id'];
            $paymentOrder = $data['payment_order'];
            $isCombined = ($data['Type'] === "JV") ? 0 : 1;

            // ====== PAY RECEIVE VOUCHER SECTION ======
            Receive_voucher_master::create($saveMaster);

            foreach ($orders as $order) {
                $depositRV = Receive_voucher_detail::where('order_id', $order->id)->sum('amount');
                $depositJV = Payment_orders_cn::where('order_id', $order->id)->sum('payment_order');
                $paidDeposit = $depositRV + $depositJV;

                $amount = $balanceToPay - $paidDeposit;
                $amount_paid = $balanceToPay - $paidDeposit;

                $base_amount = $baseCurrency === $order['currency']
                    ? $amount / $order['ex_rate']
                    : $amount * $order['ex_rate'];

                Receive_voucher_detail::create([
                    'rv_number' => $rv_number,
                    'customer_id' => $params['customerId'],
                    'rv_date' => $params['order_date'],
                    'account_code' => $accSettings->account_code,
                    'product_id' => $order->product_id,
                    'currency' => $order->currency,
                    'ex_rate' => $order->ex_rate,
                    'order_id' => $order->id,
                    'qty' => $order->qty,
                    'amount' => $amount,
                    'base_amount' => $base_amount,
                    'amount_paid' => $amount_paid,
                    'remarks' => '',
                ]);

                Orders::where('id', $order->id)->update(['order_status' => 1]);
            }

            for ($i = 1; $i <= 4; $i++) {
                if ($data["amount{$i}"] > 0) {
                    General_entries::create([
                        'jv_no' => $jvNo,
                        'account_code' => $data["account_code{$i}"],
                        'description' => $data["description{$i}"],
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'invoice_no' => $arInvoiceNo,
                        'amount' => $data["amount{$i}"],
                        'base_amount' => $data["base_amount{$i}"],
                        'debit' => $data["debit{$i}"],
                        'credit' => $data["credit{$i}"],
                        'ref_id' => $refID,
                        'transaction_date' => $transactionDate,
                        'customer_id' => $customer,
                    ]);

                    General_ledger::create([
                        'account_code' => $data["account_code{$i}"],
                        'transaction_date' => $transactionDate,
                        'acc_table' => 'general_entries',
                        'currency' => $currency,
                        'ex_rate' => $exRate,
                        'acc_table_id' => "{$refID}-{$i}",
                        'customer_id' => $customer,
                        'amount' => $data["amount{$i}"],
                        'ref_data' => $jvNo,
                        'debit' => $i === 1 ? 0 : $data["base_amount{$i}"],
                        'credit' => $i === 1 ? $data["base_amount{$i}"] : 0,
                    ]);
                }
            }

            $lastInsertedId = null;

            if ($data['amount5'] > 0) {
                if ($data['amount2'] > 0) {
                    $acc = Account_customer_cn::create([
                        'account_code' => $data["account_code2"],
                        'customer_id' => $customer,
                        'currency' => $currency,
                        'cr_detail_id' => NULL,
                        'ref_data' => $jvNo,
                        'amount' => $data["amount2"],
                        'base_amount' => $data["base_amount2"],
                        'ex_rate' => $exRate,
                        'debit' => $data["amount2"],
                        'credit' => 0,
                        'particulars' => 'Offset Credit Note~抵扣帐款单',
                        'transaction_date' => $transactionDate,
                    ]);
                    $lastInsertedId = $acc->id;
                }
                if ($data['amount3'] > 0) {
                    $acc = Account_customer_cn::create([
                        'account_code' => $data["account_code3"],
                        'customer_id' => $customer,
                        'currency' => $currency,
                        'cr_detail_id' => NULL,
                        'ref_data' => $jvNo,
                        'amount' => $data["amount3"],
                        'base_amount' => $data["base_amount3"],
                        'ex_rate' => $exRate,
                        'debit' => $data["amount3"],
                        'credit' => 0,
                        'particulars' => 'Offset Advance Payment~抵扣预付款',
                        'transaction_date' => $transactionDate,
                    ]);
                    $lastInsertedId = $acc->id;
                }
                if ($data['amount4'] > 0) {
                    $acc = Account_customer_cn::create([
                        'account_code' => $data["account_code4"],
                        'customer_id' => $customer,
                        'currency' => $currency,
                        'cr_detail_id' => NULL,
                        'ref_data' => $jvNo,
                        'amount' => $data["amount4"],
                        'base_amount' => $data["base_amount4"],
                        'ex_rate' => $exRate,
                        'debit' => $data["amount4"],
                        'credit' => 0,
                        'particulars' => 'Offset Excess Payment~抵扣超额支付款',
                        'transaction_date' => $transactionDate,
                    ]);
                    $lastInsertedId = $acc->id;
                }

                $orderIdArray = array_map('trim', is_array($ordersID) ? $ordersID : explode(',', $ordersID));
                foreach ($orderIdArray as $index => $orderId) {
                    Payment_orders_cn::create([
                        'account_customer_cn_id' => $lastInsertedId,
                        'order_id' => $orderId,
                        'payment_order' => $total_credit_used,
                        'is_combined' => $isCombined,
                    ]);
                }

                Orders::whereIn('id', $orderIdArray)->update(['order_status' => 1]);
            }

            $orders = Orders::with(['product','customer'])
                ->whereIn('id', $orderIds)
                ->get();

            foreach ($orders as $order) {
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Preorder', 't_orders',
                    'Confirm',
                    'Paid JV and RV : Customer Code : ' . $order->customer->customer_code .
                    ' - Product Code : ' . $order->product->product_code
                );
            }
            event(new CustomerEvent( 'confirm'));
            event(new PreorderEvent( 'confirm'));
            event(new LogEvent( 'insert'));

            DB::commit();

            return response()->json([
                'token'     => 'Success',
                'message'   => 'Order(s) Successfully Saved',
                'rv_number' => $rv_number,
                'action'    => 'Confirm'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();

            return response()->json([
                'token'     => 'Error',
                'message'   => 'Failed to save payment',
                'message2'  => $e->getMessage(),
                'action'    => 'Confirm'
            ]);
        }
    }
    public function cancelPreorder(Request $request){
        $ids = $request->input('ids');
        $type = $request->input('type');
        $isCancel = $request->input('isCancel');
        $creditAmount = $request->input('creditAmount');

        $order = Orders::with(['product', 'customer'])->whereIn('id', $ids)->first();
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $customerCurrency = $order->currency;
        $operator = Operator::where('convertion', $customerCurrency . $baseCurrency)->value('operator') ?? '';
   
        $request2 = new Request([
            'currency' => $order->currency,
            'basecurrency' => $baseCurrency
        ]);

        $globalController = new GlobalController();
        $globalResponse = $globalController->getCurrentExRate($request2);
        $global = $globalResponse->getData();

        $totalPaidRVJV = 0;
        $baseTotalPaidRVJV = 0;
        $baseCreditAmount = 0;
        $resultArray = [];

        foreach ($ids as $id) {
            $sumRV = Receive_voucher_detail::where('order_id', $id)->sum('amount');
            $sumJV = Payment_orders_cn::where('order_id', $id)->get()
                ->groupBy('order_id')
                ->reduce(function ($carry, $group) {
                    $amount = $group->contains('is_combined', 1)
                        ? $group->where('is_combined', 1)->max('payment_order')
                        : $group->where('is_combined', 0)->sum('payment_order');

                    return $carry + $amount;
                }, 0);

            $singleOrder = Orders::find($id); // renamed to avoid conflict

            $totalAmount = $sumRV + $sumJV;
            $resultArray[] = [
                'order_id' => $id,
                'product_id' => $singleOrder->product_id,
                'totalAmount' => $totalAmount,
            ];

            $totalPaidRVJV += $totalAmount;
        }

        if ($baseCurrency == $customerCurrency) {
            $baseTotalPaidRVJV = $totalPaidRVJV;
            $baseCreditAmount = $creditAmount;
        } else {
            if ($operator === "Divide") {
                $baseTotalPaidRVJV = $totalPaidRVJV / $global->ex_rate;
                $baseCreditAmount = $creditAmount / $global->ex_rate;
            } elseif ($operator === "Multiply") {
                $baseTotalPaidRVJV = $totalPaidRVJV * $global->ex_rate;
                $baseCreditAmount = $creditAmount * $global->ex_rate;
            }
        }

        if($isCancel === 'N'){
            $totalPaidRVJV = abs($creditAmount);
            $baseTotalPaidRVJV = abs($baseCreditAmount);
        }
      
        DB::beginTransaction();

        try {
            if ($totalPaidRVJV > 0) {
                switch ($type) {
                    case 'CTOCUST': // Credit to Customer
                        $accountCode = 21313;
                        $particulars = 'Credit to Customer~记到客户账号';
                        $AutoGenerated = new AutoGenerated();
                        $cr_number = $AutoGenerated->getNextNo("cr_number", "CRN", "t_credit_note_customer_master");

                        $insertMaster = [
                            'cr_status_id' => 7,
                            'customer_id' => $order->customer_id,
                            'amount' => $totalPaidRVJV,
                            'base_amount' => $baseTotalPaidRVJV,
                            'cr_number' => $cr_number,
                            'cr_date' => date('M d Y'),
                            'ex_rate' => $global->ex_rate,
                            'currency' => $customerCurrency,
                            'account_code' => $accountCode,
                            'particulars' => $particulars,
                        ];

                        Credit_note_customer::create($insertMaster);

                        foreach ($resultArray as $list) {
                            $amount = $list['totalAmount'];
                            $baseAmount = ($baseCurrency === $customerCurrency)
                                ? $amount
                                : ($operator === "Divide"
                                    ? $amount / $global->ex_rate
                                    : $amount * $global->ex_rate);

                            if($isCancel === 'N'){
                                $amount = abs($creditAmount);
                                $baseAmount = abs($baseCreditAmount);
                            }

                            Credit_note_customer_detail::create([
                                'account_code' => 21604,
                                'customer_id' => $order->customer_id,
                                'cr_number' => $cr_number,
                                'ex_rate' => $global->ex_rate,
                                'currency' => $customerCurrency,
                                'remarks' => 'Credit Note (Cancelled Order)',
                                'cr_date' => date('M d Y'),
                                'amount' => $amount,
                                'base_amount' => $baseAmount,
                                'product_id' => $list['product_id'],
                                'order_id' => $list['order_id'],
                            ]);
                        }

                    break;
                    case 'NRTOMI': // Misc Income
                        $accountCode = Accounting_settings::where('chart_fix_code', 'CUSTDEP')->value('account_code');
                        General_ledger::create([
                            'account_code' => $accountCode,
                            'transaction_date' => date('M d Y'),
                            'acc_table' => 'order',
                            'acc_table_id' => '',
                            'currency' => $customerCurrency,
                            'ex_rate' => $global->ex_rate,
                            'customer_id' => $order->customer_id,
                            'ref_data' => 'Cancelled Order',
                            'amount' => $totalPaidRVJV,
                            'debit' => $baseTotalPaidRVJV,
                            'credit' => 0,
                        ]);
                        General_ledger::create([
                            'account_code' => 70001,
                            'transaction_date' => date('M d Y'),
                            'acc_table' => 'order',
                            'acc_table_id' => '',
                            'currency' => $customerCurrency,
                            'ex_rate' => $global->ex_rate,
                            'customer_id' => $order->customer_id,
                            'ref_data' => 'Cancelled Order',
                            'amount' => $totalPaidRVJV,
                            'debit' => 0,
                            'credit' => $baseTotalPaidRVJV,
                        ]);
                        foreach ($resultArray as $list) {
                            $orderId = $list['order_id'];
                            $paymentOrders = Payment_orders_cn::where('order_id', $orderId)->get();
                            foreach ($paymentOrders as $payment) {
                                $accountCustomer = $payment->accountCustomerCn;
                                if ($accountCustomer) {
                                    $accountCustomer->update([
                                        'account_code' => 70001,
                                        'particulars' => 'Non-refundable deposit due to cancellation~订单取消订金不退协议',
                                        'ref_data'    => 'Cancelled Order',
                                    ]);
                                }
                            }
                        }
                    break;
                    case 'RPTOC': // REFUND TO CUSTOMER
                        $accountCode = Accounting_settings::where('chart_fix_code', 'MISCINCOME')->value('account_code');
                        $AutoGenerated = new AutoGenerated();
                        $pv_number = $AutoGenerated->getNextNo("pv_number", "PV", "t_pv_master");
                        $bank = Receive_voucher_master::where('customer_id', $order->customer_id)->value('bank');

                        $insertMaster = [
                            'pv_number' => $pv_number,
                            'pv_date' => date('M d Y'),
                            'ex_rate' => $global->ex_rate,
                            'currency' => $customerCurrency,
                            'pv_status_id' => 7,
                            'payment_type_id' => 3,
                            'pay_to_en' => '',
                            'pay_to_cn' => '',
                            'customer_id' => $order->customer_id,
                            'total_amount' => $totalPaidRVJV,
                            'base_total_amount' => $baseTotalPaidRVJV,
                            'sub_total' => $totalPaidRVJV,
                            'base_sub_total' => $baseTotalPaidRVJV,
                            'bank' => $bank
                        ];
                        Payment_voucher_master::create($insertMaster);


                        foreach ($resultArray as $list) {
                            $amount = $list['totalAmount'];
                            $baseAmount = ($baseCurrency === $customerCurrency)
                                ? $amount
                                : ($operator === "Divide"
                                    ? $amount / $global->ex_rate
                                    : $amount * $global->ex_rate);

                            if($isCancel === 'N'){
                                $amount = abs($creditAmount);
                                $baseAmount = abs($baseCreditAmount);
                            }

                            Payment_voucher_detail::create([
                                'account_code' => 21602,
                                'product_id' => $list['product_id'],
                                'ref_data' => $list['order_id'],
                                'account_no' => '',
                                'ap_invoice_no' => '',
                                'pv_number' => $pv_number,
                                'pv_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $customerCurrency,
                                'amount' => $amount,
                                'base_amount' => $baseAmount,
                                'payment_type_id' => 3,
                                'qty' => 0,
                            ]);
                        }

                    break;
                }
            }
            foreach ($resultArray as $list) {
                if($isCancel === 'Y'){
                    Orders::where('id', $list['order_id'])->update(['show_category' => 'copy']);
                }
                else{
                    Orders::where('id', $list['order_id'])->update(['order_status' => 1]);
                }

                $this->getUpdateProductStatus($list['product_id']);
                
                $order = Orders::with(['product','customer'])->where('id', $list['order_id'])->first();
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Preorder', 't_orders',
                    'delete',
                    'Cancel Order : Customer Code : ' . $order->customer->customer_code .
                    ' - Product Code : ' . $order->product->product_code
                );
            }

            event(new CustomerEvent( 'delete'));
            event(new PreorderEvent( 'delete'));
            event(new ProductEvent( 'delete'));
            event(new LogEvent( 'insert'));

            DB::commit();

            $Message = ($isCancel === 'Y' ? 'Order(s) Successfully Cancelled' : 'Order Successfully Confirmed');

            return response()->json([
                'token' => 'Success',
                'message' => $Message
            ]);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Transaction failed: ' . $e->getMessage(),
                'action'    => 'Delete'
            ]);

        }
    }
    public function createSalesOrder(Request $request){
        $ids = $request->input('ids');
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        // Eloquent way to fetch the orders
        $orders = Orders::with(['product', 'rwarehouseList','customer'])
            ->whereIn('id', $ids)
            ->get();
        
        $getArray = [];
        $returnArray = [];
        $warehouseMismatchCount = 0; // Counter to track warehouse mismatch

        // Loop through each order to fetch related GRN details
        foreach ($orders as $order) {
            $grnDetail = Grn_details::where('product_id', $order->product_id)
                ->orderByDesc('id')  // Ordering by descending to get the latest GRN
                ->first();
            
            // If a GRN record exists for this order
            if ($grnDetail) {

                if ($grnDetail->warehouse !== $order->rwarehouseList->wh_code) {
                    $warehouseMismatchCount++; // Increment counter if there's a mismatch
                }

                $getArray[] = [
                    'grn_detail_id' => $grnDetail->id,
                    'order_id' => $order->id,
                    'order_qty' => $order->qty,
                    'order_status' => $order->order_status,
                    'ex_rate' => $order->ex_rate,
                    'price' => $order->price,
                    'item_deposit' => $order->item_deposit,
                    'rwarehouse' => $order->rwarehouse,
                    'pod' => $order->pod,
                    'sales_person_id' => $order->sales_person_id,
                    'shipping_stat_id' => $order->shipping_stat_id,
                    'po_detail_id' => $grnDetail->po_id,
                    'grn_date' => $grnDetail->grn_date,
                    'warehouse' => $grnDetail->warehouse,
                    'wareHouse2' => $order->rwarehouseList->wh_code,
                    'product_id' => $order->product_id,
                    'item_cost' => $order->product->item_cost,
                    'product_title_en' => $order->product->product_title_en,
                    'product_title_cn' => $order->product->product_title_cn,
                    'product_code' => $order->product->product_code,
                    'customer_id' => $order->customer_id,
                    'customer_code' => $order->customer->customer_code,
                    'tax_group' => $order->customer->tax_group,
                    'payment_terms_id' => $order->customer->payment_terms_id,
                    'currency' => $order->currency,
                    'grn_no' => $grnDetail->grn_no,
                    'base_currency' => $baseCurrency
                ];
            }
        }
        if(count($getArray) === 0){
            return response()->json([
                'token'         => 'Error',
                'message'       => 'alert_message_102',
                'returnArray'   => [],
                'action'        => 'Insert'
            ]);
        }
        else if($warehouseMismatchCount > 0){
            return response()->json([
                'token'         => 'Error',
                'message'       => 'Please update order warehouse',
                'returnArray'   => [],
                'action'        => 'Insert'
            ]);
        }
        else{
            $alloc_array = [];
            foreach($getArray as $list){
                $orderQty = Orders::where('id', $list['order_id'])->sum('qty');
                $grnQty = Grn_details::where('id', $list['grn_detail_id'])
                    ->selectRaw('SUM(qty - allocation) as totalQty')
                    ->value('totalQty');

                if((int) $orderQty > (int) $grnQty){
                    $returnArray[] = [
                        'id' => $list['id'],
                        'product_title_en' => $list['product_title_en'],
                        'product_title_cn' => $list['product_title_cn'],
                        'product_code' => $list['product_code'],
                        'grn_detail_id' => $list['grn_detail_id'],
                        'grn_qty' => $grnQty,
                        'order_qty' => $orderQty,
                    ];
                }
                else{
                    $qty = 0;
                    if((int) $grnQty >= (int) $orderQty){
                        $qty = $list['order_qty'];
                    }
                    else{
                        $qty = $grnQty;
                    }

                    $voucher_amount = 0;
                    $base_voucher_amount = 0;
                    $ex_rate = $list['ex_rate'];
                    $price = $list['price'];
                    $total = $qty * $price;
                    $deposit = 0;
                    if($list['order_status'] === 1){
                        $deposit = $list['item_deposit'];
                    }
                    $currency = $list['currency'];
                    $sales_person_id = $list['sales_person_id'];
                    $pod = $list['pod'];
                    $rwarehouse = $list['rwarehouse'];
                    $shipping_stat_id = $list['shipping_stat_id'];
                    $product_id = $list['product_id'];
                    if($qty > 0){
                        $alloc_array[] = [
                            'customer_id' => $list['customer_id'],
                            'customer_code' => $list['customer_code'],
                            'qty' => $qty,
                            'price' => $price,
                            'currency' => $currency,
                            'sales_person_id' => $sales_person_id,
                            'pod' => $pod,
                            'rwarehouse' => $rwarehouse,
                            'shipping_stat_id' => $shipping_stat_id,
                            'product_id' => $product_id,
                            'grn_detail_id' => $list['grn_detail_id'],
                            'order_id' => $list['order_id'],
                            'po_detail_id' => $list['po_detail_id'],
                            'grn_no' => $list['grn_no'],
                            'tax_group' => $list['tax_group'],
                            'payment_terms_id' => $list['payment_terms_id'],
                            'item_cost' => $list['item_cost'],
                            'sub_total_on_cost' => (float) $list['item_cost'] * (int) $qty,
                            'total' => $total,
                            'ex_rate' => $ex_rate,
                            'deposit' => $deposit,
                            'voucher_amount' => $voucher_amount,
                            'base_voucher_amount' => $base_voucher_amount,
                        ];
                    }
                }
            }
            if(count($alloc_array) > 0){
                usort($alloc_array, function($a, $b){
                    return strtolower($a['customer_code']) < strtolower($b['customer_code']);
                });

                // Begin transaction
                DB::beginTransaction();
                
                try {

                    $collection = collect($alloc_array);
                    $grouped = $collection
                        ->groupBy(function ($item) {
                            return $item['customer_id'] . '_' . $item['currency'];
                        })
                        ->map(function ($items) {
                            return [
                                'customer_id' => $items->first()['customer_id'],
                                'tax_group' => $items->first()['tax_group'],
                                'customer_code' => $items->first()['customer_code'],
                                'sales_person_id' => $items->first()['sales_person_id'],
                                'payment_terms_id' => $items->first()['payment_terms_id'],
                                'currency' => $items->first()['currency'],
                                'deposit' => $items->sum('deposit'),
                                'total' => $items->sum('total'),
                                'sub_total_on_cost' => $items->sum('sub_total_on_cost'),
                                'voucher_amount' => $items->sum('voucher_amount'),
                                'base_voucher_amount' => $items->sum('base_voucher_amount'),
                                'details' => $items->values(),
                            ];
                        })
                        ->values();
                        
                    foreach($grouped as $item){

                        $so_number = "";
                        $unpaidInvoice = $this->doGetUnPaidInvoice($item['customer_id'], $item['currency']);
                        
                        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
                        $customerCurrency = $item['currency'];
                        $operator = Operator::where('convertion', $customerCurrency . $baseCurrency)->value('operator') ?? '';

                        $request2 = new Request([
                            'currency' => $customerCurrency,
                            'basecurrency' => $baseCurrency
                        ]);

                        $globalController = new GlobalController();
                        $globalResponse = $globalController->getCurrentExRate($request2);
                        $global = $globalResponse->getData();
                        $ex_rate = $global->ex_rate;
                        
                        if($unpaidInvoice['id'] === 0){ // INSERT NEW
                            $AutoGenerated = new AutoGenerated();
                            $so_number = $AutoGenerated->getNextNo("so_number", "SO", "t_so_master");

                            $sub_total = $item['total'];
                            $total = $item['total'];
                            $total_deposit = $item['deposit'];
                            $tax_amount = 0;
                            $exces_payment = 0;
                            $credit_note = 0;
                            $total_deduction = $exces_payment + $credit_note + $total_deposit;
                            $grand_total = $sub_total + $tax_amount;
                            $total_to_pay = $grand_total - $total_deduction;
                            $sub_total_on_cost = $item['sub_total_on_cost'];

                            $base_total = 0;
                            $base_grand_total = 0;
                            $base_total_to_pay = 0;
                            $base_tax_amount = 0;
                            $base_total_deduction = 0;
                            $base_sub_total = 0;
                            $base_total_deposit = 0;

                            if ($baseCurrency == $customerCurrency){
                                $base_total = $total;
                                $base_grand_total = $grand_total;
                                $base_total_to_pay = $total_to_pay;
                                $base_tax_amount = $tax_amount;
                                $base_total_deduction = $total_deduction;
                                $base_total_deposit = $total_deposit;
                                $base_sub_total = $sub_total;
                            }
                            else{
                                if ($operator == "Divide") { 
                                    $base_total = $sub_total / $ex_rate;
                                    if ($tax_amount > 0) { $base_tax_amount = $tax_amount / $ex_rate; }
                                    if ($base_grand_total > 0) { $base_grand_total = $base_grand_total / $ex_rate; }
                                    if ($total_deduction > 0) {$base_total_deduction = $total_deduction / $ex_rate; }
                                    if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay / $ex_rate; }
                                    if ($total_deposit > 0) { $base_total_deposit = $total_deposit / $ex_rate; }
                                    if ($total > 0) { $base_sub_total = $total / $ex_rate; }
                                }
                                if ($operator == "Multiply"){
                                    $base_total = $sub_total * $ex_rate;
                                    if ($tax_amount > 0) { $base_tax_amount = $tax_amount * $ex_rate; }
                                    if ($base_grand_total > 0) { $base_grand_total = $base_grand_total * $ex_rate; }
                                    if ($total_deduction > 0) {$base_total_deduction = $total_deduction * $ex_rate; }
                                    if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay * $ex_rate; }
                                    if ($total_deposit > 0) { $base_total_deposit = $total_deposit * $ex_rate; }
                                    if ($total > 0) { $base_sub_total = $total * $ex_rate; }
                                }
                            }

                            Sales_order_master::create([
                                'so_number' => $so_number,
                                'invoice_no' => '',
                                'due_date' => '',
                                'delivery_date' => '',
                                'customer_id' => $item['customer_id'],
                                'ex_rate' => $global->ex_rate,
                                'tax' => $item['tax_group'],
                                'currency' => $customerCurrency,
                                'sales_person_id' => $item['sales_person_id'],
                                'shipping_stat_id' => 1,
                                'so_date' => date('M d Y'),
                                'invoice_status_id' => 2,
                                'invoice_type' => 1,
                                'payment_terms_id' => $item['payment_terms_id'],
                                'tax_amount' => $tax_amount,
                                'total_to_pay' => $total_to_pay,
                                'base_total_deposit' => $base_total_deposit,
                                'sub_total_on_cost' => $sub_total_on_cost,
                                'base_tax_amount' => $base_tax_amount,
                                'total' => $total,
                                'sub_total' => $sub_total,
                                'base_total' => $base_total,
                                'total_deposit' => $total_deposit,
                                'base_total_to_pay' => $base_total_to_pay,
                                'base_sub_total' => $base_sub_total,
                                'total_deduction' => $total_deduction,
                                'base_total_deduction' => $base_total_deduction,
                                'voucher_amount' => $item['voucher_amount'],
                                'base_voucher_amount' => $item['base_voucher_amount'],
                            ]);

                            $detailArray = $item['details'];
                            foreach($detailArray as $list){
                                $alloc = Inventory_allocation::create([
                                    'customer_id' => $list['customer_id'],
                                    'qty' => $list['qty'],
                                    'allocated_qty' => 0,
                                    'price' => $list['price'],
                                    'currency' => $list['currency'],
                                    'sales_person_id' => $list['sales_person_id'],
                                    'pod' => $list['pod'],
                                    'warehouse' => $list['rwarehouse'],
                                    'shipping_stat_id' => $list['shipping_stat_id'],
                                    'product_id' => $list['product_id'],
                                    'grn_detail_id' => $list['grn_detail_id'],
                                    'order_id' => $list['order_id'],
                                    'po_detail_id' => $list['po_detail_id'],
                                    'grn_no' => $list['grn_no'],
                                    'total' => $list['total'],
                                    'deposit' => $list['deposit'],
                                    'voucher_amount' => $list['voucher_amount'],
                                    'base_voucher_amount' => $list['base_voucher_amount'],
                                    'so_number' => $so_number,
                                ]);
                                $product = Products::where('id', $list['product_id'])->first();
                                $customer = Customer::where('id', $list['customer_id'])->first();
                                Sales_order_detail::create([
                                    'so_number' => $so_number,
                                    'product_id' => $list['product_id'],
                                    'qty' => $list['qty'],
                                    'deposit' => $list['deposit'],
                                    'currency' => $list['currency'],
                                    'total' => $list['total'],
                                    'price' => $list['price'],
                                    'sales_person_id' => $list['sales_person_id'],
                                    'shipping_stat_id' => 1,
                                    'invoice_status_id' => 1,
                                    'customer_id' => $list['customer_id'],
                                    'so_date' => date('M d Y'),
                                    'ex_rate' => $ex_rate,
                                    'order_id' => $list['order_id'],
                                    'allocated_id' => $alloc->id,
                                    'grn_detail_id' => $list['grn_detail_id'],
                                    'base_total' => (float) $list['total'] * (int) $list['qty'],
                                    'item_cost' => $product->item_cost,
                                    'product_type' => 0,
                                    'alloc_type' => '',
                                    'particular' => '',
                                    'remarks' => '',
                                    'warehouse' => $list['rwarehouse'],
                                ]);
                                $order = Orders::where('id', $list['order_id'])->first();
                                if ($order) {
                                    $order->update([
                                        'allocated_qty' => $list['qty'],
                                        'show_category' => 'history',
                                    ]);
                                }
                                $this->getUpdateProductStatus($list['product_id']);

                                $globalController = new GlobalController();
                                $globalController->logAction(
                                    'Preorder', 't_orders',
                                    'Insert',
                                    description: 'Create New SO : Customer Code : ' . $customer->customer_code .
                                    ' - Product Code : ' . $product->product_code
                                );
                            }

                        }
                        else{ // UPDATE OLD SO
                            $so_number = $unpaidInvoice['so_number'];
                            $exist_total = $unpaidInvoice['total'];
                            $exist_deposit = $unpaidInvoice['total_deposit'];
                            $exist_sub_total_on_cost = $unpaidInvoice['sub_total_on_cost'];

                            $sub_total = $item['total'] + $exist_total;
                            $total = $item['total'] + $exist_total;
                            $total_deposit = $item['deposit'] + $exist_deposit;
                            $sub_total_on_cost = $item['sub_total_on_cost'] + $exist_sub_total_on_cost;

                            $tax_amount = 0;
                            $exces_payment = 0;
                            $credit_note = 0;
                            $total_deduction = $exces_payment + $credit_note + $total_deposit;
                            $grand_total = $sub_total + $tax_amount;
                            $total_to_pay = $grand_total - $total_deduction;

                            $base_total = 0;
                            $base_grand_total = 0;
                            $base_total_to_pay = 0;
                            $base_tax_amount = 0;
                            $base_total_deduction = 0;
                            $base_sub_total = 0;
                            $base_total_deposit = 0;

                            if ($baseCurrency == $customerCurrency){
                                $base_total = $total;
                                $base_grand_total = $grand_total;
                                $base_total_to_pay = $total_to_pay;
                                $base_tax_amount = $tax_amount;
                                $base_total_deduction = $total_deduction;
                                $base_total_deposit = $total_deposit;
                                $base_sub_total = $sub_total;
                            }
                            else{
                                if ($operator == "Divide") { 
                                    $base_total = $sub_total / $ex_rate;
                                    if ($tax_amount > 0) { $base_tax_amount = $tax_amount / $ex_rate; }
                                    if ($base_grand_total > 0) { $base_grand_total = $base_grand_total / $ex_rate; }
                                    if ($total_deduction > 0) {$base_total_deduction = $total_deduction / $ex_rate; }
                                    if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay / $ex_rate; }
                                    if ($total_deposit > 0) { $base_total_deposit = $total_deposit / $ex_rate; }
                                    if ($total > 0) { $base_sub_total = $total / $ex_rate; }
                                }
                                if ($operator == "Multiply"){
                                    $base_total = $sub_total * $ex_rate;
                                    if ($tax_amount > 0) { $base_tax_amount = $tax_amount * $ex_rate; }
                                    if ($base_grand_total > 0) { $base_grand_total = $base_grand_total * $ex_rate; }
                                    if ($total_deduction > 0) {$base_total_deduction = $total_deduction * $ex_rate; }
                                    if ($total_to_pay > 0) { $base_total_to_pay = $total_to_pay * $ex_rate; }
                                    if ($total_deposit > 0) { $base_total_deposit = $total_deposit * $ex_rate; }
                                    if ($total > 0) { $base_sub_total = $total * $ex_rate; }
                                }
                            }

                            Sales_order_master::where('so_number', $so_number)->update([
                                'so_number' => $so_number,
                                'invoice_no' => '',
                                'due_date' => '',
                                'delivery_date' => '',
                                'customer_id' => $item['customer_id'],
                                'ex_rate' => $global->ex_rate,
                                'tax' => $item['tax_group'],
                                'currency' => $customerCurrency,
                                'sales_person_id' => $item['sales_person_id'],
                                'shipping_stat_id' => 1,
                                'so_date' => date('M d Y'),
                                'invoice_status_id' => 2,
                                'invoice_type' => 1,
                                'payment_terms_id' => $item['payment_terms_id'],
                                'tax_amount' => $tax_amount,
                                'total_to_pay' => $total_to_pay,
                                'base_total_deposit' => $base_total_deposit,
                                'sub_total_on_cost' => $sub_total_on_cost,
                                'base_tax_amount' => $base_tax_amount,
                                'total' => $total,
                                'sub_total' => $sub_total,
                                'base_total' => $base_total,
                                'total_deposit' => $total_deposit,
                                'base_total_to_pay' => $base_total_to_pay,
                                'base_sub_total' => $base_sub_total,
                                'total_deduction' => $total_deduction,
                                'base_total_deduction' => $base_total_deduction,
                                'voucher_amount' => $item['voucher_amount'],
                                'base_voucher_amount' => $item['base_voucher_amount'],
                            ]);

                            $detailArray = $item['details'];
                            foreach($detailArray as $list){
                                $alloc = Inventory_allocation::create([
                                    'customer_id' => $list['customer_id'],
                                    'qty' => $list['qty'],
                                    'allocated_qty' => $list['qty'],
                                    'price' => $list['price'],
                                    'currency' => $list['currency'],
                                    'sales_person_id' => $list['sales_person_id'],
                                    'pod' => $list['pod'],
                                    'warehouse' => $list['rwarehouse'],
                                    'shipping_stat_id' => $list['shipping_stat_id'],
                                    'product_id' => $list['product_id'],
                                    'grn_detail_id' => $list['grn_detail_id'],
                                    'order_id' => $list['order_id'],
                                    'po_detail_id' => $list['po_detail_id'],
                                    'grn_no' => $list['grn_no'],
                                    'total' => $list['total'],
                                    'deposit' => $list['deposit'],
                                    'voucher_amount' => $list['voucher_amount'],
                                    'base_voucher_amount' => $list['base_voucher_amount'],
                                    'so_number' => $so_number,
                                ]);
                                $product = Products::where('id', $list['product_id'])->first();
                                $customer = Customer::where('id', $list['customer_id'])->first();
                                Sales_order_detail::create([
                                    'so_number' => $so_number,
                                    'product_id' => $list['product_id'],
                                    'qty' => $list['qty'],
                                    'deposit' => $list['deposit'],
                                    'currency' => $list['currency'],
                                    'total' => $list['total'],
                                    'price' => $list['price'],
                                    'sales_person_id' => $list['sales_person_id'],
                                    'shipping_stat_id' => 1,
                                    'invoice_status_id' => 1,
                                    'customer_id' => $list['customer_id'],
                                    'so_date' => date('M d Y'),
                                    'ex_rate' => $ex_rate,
                                    'order_id' => $list['order_id'],
                                    'allocated_id' => $alloc->id,
                                    'grn_detail_id' => $list['grn_detail_id'],
                                    'base_total' => (float) $list['total'] * (int) $list['qty'],
                                    'item_cost' => $product->item_cost,
                                    'product_type' => 0,
                                    'alloc_type' => '',
                                    'particular' => '',
                                    'remarks' => '',
                                    'warehouse' => $list['rwarehouse'],
                                ]);
                                $order = Orders::where('id', $list['order_id'])->first();
                                if ($order) {
                                    $order->update([
                                        'allocated_qty' => $list['qty'],
                                        'show_category' => 'history',
                                    ]);
                                }
                                $this->getUpdateProductStatus($list['product_id']);

                                $globalController = new GlobalController();
                                $globalController->logAction(
                                    'Preorder', 't_orders',
                                    'Insert',
                                    description: 'Update Existing SO : Customer Code : ' . $customer->customer_code .
                                    ' - Product Code : ' . $product->product_code
                                );

                            }
                        }
                    }

                    event(new CustomerEvent( 'insert'));
                    event(new PreorderEvent( 'insert'));
                    event(new ProductEvent( 'insert'));
                    event(new LogEvent( 'insert'));

                    DB::commit();
                } catch (\Exception $e) {
                    // Rollback the transaction if there is an error
                    DB::rollBack();
                    return response()->json([
                        'token'         => 'Error',
                        'message'       => 'alert_message_18',
                        'message2'      => 'Transaction failed: ' . $e->getMessage(),
                        'action'        => 'Insert',
                        'resultArray'   => []
                    ]);
                }
            }
        }
        return response()->json([
            'token' => 'Success',
            'message'   => 'SOCreated',
            'action'        => 'Insert',
            'resultArray' => $returnArray
        ]);
    }

    public function doGetUnPaidInvoice($customer_id, $currency)
    {
        $result = Sales_order_master::selectRaw('
                COALESCE(id, 0) AS id,
                COALESCE(so_number, "") AS so_number,
                COALESCE(SUM(total), 0) AS total,
                COALESCE(SUM(sub_total_on_cost), 0) AS sub_total_on_cost,
                COALESCE(SUM(total_deposit), 0) AS total_deposit
            ')
            ->where('currency', $currency)
            ->where('customer_id', $customer_id)
            ->where('invoice_status_id', 2)
            ->groupBy('id', 'so_number')
            ->orderBy('id')
            ->limit(1)
            ->first();

        // Default array in case of no result
        $retval = [
            'id' => 0,
            'so_number' => '',
            'total' => 0,
            'sub_total_on_cost' => 0,
            'total_deposit' => 0
        ];

        if ($result) {
            $retval = [
                'id' => $result->ID,
                'so_number' => $result->so_number,
                'total' => $result->total,
                'sub_total_on_cost' => $result->sub_total_on_cost,
                'total_deposit' => $result->total_deposit
            ];
        }
        return $retval;
    }
    public function doGetAllocationSONumber($customer_id, $grn_no, $currency)
    {
        // Fetch the inventory allocation using pure Eloquent
        $allocation = Inventory_allocation::select('id', 'so_number')
            ->with(['salesOrder' => function ($query) {
                $query->where('invoice_status_id', 2);
            }])
            ->where('currency', $currency)
            ->where('customer_id', $customer_id)
            ->where('grn_no', $grn_no)
            ->first();

        // Default response in case no data is found
        $retval = [
            'id' => 0,
            'so_number' => ''
        ];

        if ($allocation && $allocation->salesOrder) {
            $retval = [
                'id' => $allocation->id,
                'so_number' => $allocation->so_number
            ];
        }
        return $retval;
    }
    public function getUnsoldOrder(Request $request){
        // --- Pagination ---
        $page = $request->input('page', 1);
        $perPage = $request->input('per_page', 15);
        $search = $request->input('search');

        $first = POrder_detail::with(['product', 'poMaster'])
            ->whereColumn('qty', '<>', 'receive_qty')
            ->get()
            ->map(function ($detail) {

                if (!$detail->product) {
                    return null;
                }

                $order_qty = Orders::where('product_id', $detail['product_id'])
                    ->where('show_category', 'orders')
                    ->sum('qty');

                if ((int) $detail->qty - ((int) $order_qty + (int) $detail->allocated_qty) > 0) {
                    $unsold_qty = (int) $detail->qty - ((int) $order_qty + (int) $detail->allocated_qty);
                    
                    $product_thumbnail = Product_images::where('product_id',$detail->product->id)
                        ->where('type','thumbnail')->value('path');

                    return [
                        'ID' => $detail->id,
                        'cnt' => 0,
                        'product_id' => $detail->product->id,
                        'product_code' => $detail->product->product_code ?? '',
                        'product_title_en' => $detail->product->product_title_en ?? '',
                        'product_title_cn' => $detail->product->product_title_cn ?? '',
                        'product_thumbnail' => $product_thumbnail,
                        'po_number' => $detail->poMaster->po_number,
                        'po_date' => $detail->poMaster->po_date,
                        'ex_rate' => number_format($detail->poMaster->ex_rate, 2, '.', ''),
                        'currency' => $detail->poMaster->currency,
                        'price' => $detail->price,
                        'po_qty' => $detail->qty,
                        'allocated_qty' => $detail->allocated_qty,
                        'hold_qty' => $detail->product->hold_qty ?? 0,
                        'hold_qty_orig' => $detail->product->hold_qty ?? 0,
                        'order_qty' => $order_qty,
                        'unsold_qty' => $unsold_qty,
                        'total_cost' => number_format($unsold_qty * $detail->price, 2, '.', ''),
                        'base_total_cost' => number_format($unsold_qty * $detail->price * $detail->poMaster->ex_rate, 2, '.', ''),
                    ];
                }

                return null;
            })
            ->filter()
            ->sortBy([
                ['hold_qty', 'desc'],
                ['po_number', 'desc'],
            ])
            ->values();

        // --- Apply search filter (if any) ---
        $first = $first->whenNotEmpty(function ($collection) use ($search) {
            if (!empty($search)) {
                return $collection->filter(function ($item) use ($search) {
                    return stripos($item['po_number'], $search) !== false ||
                        stripos($item['product_code'], $search) !== false ||
                        stripos($item['product_title_en'], $search) !== false ||
                        stripos($item['product_title_cn'], $search) !== false;
                })->values();
            }
            return $collection;
        });

        $paginator = new LengthAwarePaginator(
            $first->forPage($page, $perPage),
            $first->count(),
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );

        $data = collect($paginator->items());

        // --- Footer (current page totals) ---
        $footer = [
            'base_total_cost' => $data->sum('base_total_cost'),
        ];

        // --- Footer2 (all data totals) ---
        $footer2 = [
            'base_total_cost' => $first->sum('base_total_cost'),
        ];

        // --- Final response ---
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $paginator->currentPage(),
                'data' => $data->values(), // Reset keys
                'footer' => $footer,
                'footer2' => $footer2,
                'last_page' => $paginator->lastPage(),
                'per_page' => $paginator->perPage(),
                'total' => $paginator->total(),
            ]
        ]);
    }
    public function holdOnHold(Request $request, $id)
    {
        $product = Products::find($id);
        if (!$product) {
            return response()->json(['message' => 'Product not found'], 404);
        }

        $validated = $request->validate([
            'hold_qty' => 'required|int',
        ]);

        $product->hold_qty = $validated['hold_qty'];

        $Status = ($validated['hold_qty'] === 0 ? 'Unhold' : 'Hold');
        $globalController = new GlobalController();
        $globalController->logAction(
            'Preorder / Unsold Order', 'm_products',
            'update',
            $Status . ' : ' . $product->product_code . ' - Qty : ' . $validated['hold_qty']
        );
        $product->save();
        $this->getUpdateProductStatus($id);
        event(new ProductEvent( 'update'));
        event(new LogEvent( 'insert'));
        event(new InventoryEvent( 'insert'));

        return response()->json([
            'message' => 'Updated successfully'
        ]);
    }
    public function getPerformance(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');
        $type = $request->input('type');

        // Determine customer type and grouping
        $customer_type = "RC";
        $group_by_customer = false;
        $group_by_sales_person = false;
        $order_by_order = 'total_qty';
        $order_by_invoice = 'sales_person_id';
        $is_order = 0;
        
        if($type === 'Orders1'){
            $customer_type = "RC";
            $group_by_customer = true;
            $order_by_order = 'total_qty';
            $is_order = 1;
        }
        if($type === 'Orders2'){
            $customer_type = "WC";
            $group_by_customer = true;
            $order_by_order = 'total_e_profit';
            $is_order = 1;
        }
        if($type === 'Orders3'){
            $customer_type = "RC";
            $group_by_sales_person = true;
            $is_order = 1;
        }
        if($type === 'Orders4'){
            $customer_type = "WC";
            $group_by_sales_person = true;
            $is_order = 1;
        }
        if($type === 'Invoice1'){
            $customer_type = "RC";
            $group_by_sales_person = true;
            $order_by_invoice = 'total_e_profit';
        }
        if($type === 'Invoice2'){
            $customer_type = "WC";
            $group_by_sales_person = true;
            $order_by_invoice = 'total_e_profit';
        }
        if($type === 'Invoice3'){
            $customer_type = "RC";
            $order_by_invoice = 'total_e_profit';
        }
        if($type === 'Invoice4'){
            $customer_type = "WC";
            $order_by_invoice = 'total_e_profit';
        }
        // Base query
        if($is_order === 1){
            if($group_by_customer){
                $query = Orders::with(['customer.salesPerson', 'product', 'status'])
                    ->where('show_category', 'orders')
                    ->whereHas('customer', function ($q) use ($customer_type) {
                        $q->where('customer_type', $customer_type);
                    })
                    ->select([
                        'customer_id',
                        DB::raw('SUM(qty) as total_qty'),
                        DB::raw('SUM(e_profit) / SUM(base_total) * 100 as profit_percentage'),
                        DB::raw('SUM(base_total) as total_base_total'),
                        DB::raw('SUM(e_profit) as total_e_profit'),
                        DB::raw('SUM(base_item_deposit) as total_base_deposit'),
                        DB::raw('COUNT(*) as order_count'),
                        DB::raw('MAX(id) as latest_order_id') // To get latest order info
                    ])
                    ->groupBy('customer_id')
                    ->orderByDesc($order_by_order);
            }
            else{
                $query = Orders::with(['salesPerson', 'product', 'status'])
                    ->where('show_category', 'orders')
                    ->whereHas('customer', function ($q) use ($customer_type) {
                        $q->where('customer_type', $customer_type);
                    })
                    ->select([
                        'sales_person_id',
                        DB::raw('SUM(qty) as total_qty'),
                        DB::raw('SUM(e_profit) / SUM(base_total) * 100 as profit_percentage'),
                        DB::raw('SUM(base_total) as total_base_total'),
                        DB::raw('SUM(e_profit) as total_e_profit'),
                        DB::raw('SUM(base_item_deposit) as total_base_deposit'),
                        DB::raw('COUNT(*) as order_count'),
                        DB::raw('MAX(id) as latest_order_id') // To get latest order info
                    ])
                    ->groupBy('sales_person_id')
                    ->orderByDesc('total_e_profit');
            }
        }
        else{
            if($group_by_sales_person){
                $query = Invoice_master::with(['customer.salesPerson'])
                    ->where('invoice_status_id', 1)
                    ->whereNotNull('sales_person_id')
                    ->whereHas('customer', function ($q) use ($customer_type) {
                        $q->where('customer_type', $customer_type);
                    })
                    ->select([
                        'sales_person_id',
                        DB::raw('0 as total_qty'),
                        DB::raw('SUM(base_total - sub_total_on_cost) / SUM(base_total) * 100 as profit_percentage'),
                        DB::raw('SUM(base_total) as total_base_total'),
                        DB::raw('SUM(base_total - sub_total_on_cost) as total_e_profit'),
                        DB::raw('SUM(base_total_deposit) as total_base_deposit'),
                        DB::raw('COUNT(*) as order_count'),
                        DB::raw('MAX(id) as latest_order_id') // To get latest order info
                    ])
                    ->groupBy('sales_person_id')
                    ->orderByDesc($order_by_invoice);
            }
            else{
                $query = Invoice_master::with(['customer.salesPerson'])
                    ->where('invoice_status_id', 1)
                    ->whereHas('customer', function ($q) use ($customer_type) {
                        $q->where('customer_type', $customer_type);
                    })
                    ->select([
                        'customer_id',
                        DB::raw('0 as total_qty'),
                        DB::raw('SUM(base_total - sub_total_on_cost) / SUM(base_total) * 100 as profit_percentage'),
                        DB::raw('SUM(base_total) as total_base_total'),
                        DB::raw('SUM(base_total - sub_total_on_cost) as total_e_profit'),
                        DB::raw('SUM(base_total_deposit) as total_base_deposit'),
                        DB::raw('COUNT(*) as order_count'),
                        DB::raw('MAX(id) as latest_order_id') // To get latest order info
                    ])
                    ->groupBy('customer_id')
                    ->orderByDesc($order_by_invoice);
            }
        }

        // Search filter - modified for grouped data
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('customer_id', 'like', "%{$search}%")
                    ->orWhereHas('customer', function ($q3) use ($search) {
                        $q3->where('customer_code', 'like', "%{$search}%")
                            ->orWhere('account_name_en', 'like', "%{$search}%")
                            ->orWhere('account_name_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Get all grouped data for footer2 calculation
        $allGroupedData = $query->get();
        
        // Calculate footer2 totals from grouped data
        $footer2 = [
            'customer_count' => $allGroupedData->count(),
            'total_orders' => $allGroupedData->sum('order_count'),
            'qty' => $allGroupedData->sum('total_qty'),
            'base_total' => $allGroupedData->sum('total_base_total'),
            'e_profit' => $allGroupedData->sum('total_e_profit'),
            'base_deposit' => $allGroupedData->sum(callback: 'total_base_deposit'),
            'profit_percentage' => (int) $allGroupedData->avg('profit_percentage'),
            'type' => $type,
        ];

        // Paginate the grouped results
        $result = $perPage === -1 ? $allGroupedData : $query->paginate($perPage);
        
        // Get the data collection
        $data = $perPage === -1 ? $result : $result->getCollection();

        // Transform the grouped data to include customer information
        $transformedData = $data->map(function ($item) {
            // Load the customer relationship if not already loaded
            if (!$item->relationLoaded('customer')) {
                $item->load('customer');
            }

            $customer = $item->customer;
            $customer = $item->customer;
            
            return [
                'id' => $item->latest_order_id,
                'customer_id' => $item->customer_id,
                'sales_person_id' => $item->sales_person_id,
                'customer_code' => $customer->customer_code ?? 'N/A',
                'account_name_en' => $customer->account_name_en ?? 'N/A',
                'account_name_cn' => $customer->account_name_cn ?? 'N/A',
                'sales_person_name' => $item->salesPerson->full_name ?? 'N/A',
                'total_qty' => $item->total_qty,
                'total_base_total' => $item->total_base_total,
                'total_e_profit' => $item->total_e_profit,
                'total_base_deposit' => $item->total_base_deposit,
                'profit_percentage' => (int) $item->profit_percentage,
                'order_count' => $item->order_count,
                'avg_order_value' => $item->order_count > 0 ? round($item->total_base_total / $item->order_count, 2) : 0,
                
            ];
        });

        // Calculate footer for current page
        $footer = [
            'customer_count' => $transformedData->count(),
            'total_orders' => $transformedData->sum('order_count'),
            'qty' => $transformedData->sum('total_qty'),
            'base_total' => $transformedData->sum('total_base_total'),
            'e_profit' => $transformedData->sum('total_e_profit'),
            'base_deposit' => $transformedData->sum('total_base_deposit'),
            'profit_percentage' => (int) $transformedData->avg('profit_percentage'),
            'type' => $type,
        ];

        // Prepare response
        $response = [
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result instanceof LengthAwarePaginator ? $result->currentPage() : 1,
                'data' => $transformedData,
                'footer' => $footer, // Footer for the current page
                'footer2' => $footer2, // Footer2 for all records
                'last_page' => $result instanceof LengthAwarePaginator ? $result->lastPage() : 1,
                'per_page' => $result instanceof LengthAwarePaginator ? $result->perPage() : $transformedData->count(),
                'total' => $result instanceof LengthAwarePaginator ? $result->total() : $transformedData->count(),
            ]
        ];

        return response()->json($response);
    }

    public function getPerformanceDetails($idToUse,$type){
        if($type === 'Invoice3' || $type === 'Invoice4'){
            $customerData = Invoice_detail::with(['product' => function ($query) {
                    $query->select('id','product_code', 'product_title_en', 'product_title_cn');
                }])
                ->whereHas('product', function ($q)  {
                    $q->whereNotNull('id');
                })
                ->where('customer_id', $idToUse)
                ->orderBy('id', 'ASC')
                ->get()
                ->map(function ($item) {
                    // Add product info directly for clarity in the response
                    $item->product_code = $item->product->product_code ?? 'N/A';
                    $item->product_title_en = $item->product->product_title_en ?? 'N/A';
                    $item->product_title_cn = $item->product->product_title_cn ?? 'N/A';
                    $item->total = $item->total ?? 0;
                    $item->qty = $item->qty ?? 0;
                    $item->price = $item->price ?? 0;
                    $item->currency = $item->currency ?? 0;
                    return $item;
                });
        }
        else{
            $customerData = Orders::with(['product' => function ($query) {
                    $query->select('id','product_code', 'product_title_en', 'product_title_cn');
                }])
                ->whereHas('product', function ($q)  {
                    $q->whereNotNull('id');
                })
                ->where('customer_id', $idToUse)
                ->orderBy('id', 'ASC')
                ->get()
                ->map(function ($item) {
                    // Add product info directly for clarity in the response
                    $item->product_code = $item->product->product_code ?? 'N/A';
                    $item->product_title_en = $item->product->product_title_en ?? 'N/A';
                    $item->product_title_cn = $item->product->product_title_cn ?? 'N/A';
                    $item->total = $item->qty * $item->price ?? 0;
                    $item->qty = $item->qty ?? 0;
                    $item->price = $item->price ?? 0;
                    $item->currency = $item->currency ?? 0;
                    return $item;
                });
        }

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $customerData,
        ]);
    }

    public function getAllOrderVoucher(Request $request)
    {
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');

        $query = Order_Voucher::with(['customer'])->orderBy('id', 'desc');

        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('voucher_no', 'like', "%{$search}%")
                    ->orWhere('voucher_date', 'like', "%{$search}%");
            });
        }

        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform results to include full name and country names
        $transform = function ($customer) {
            $order = Orders::where('voucher_code', $customer->voucher_no)->first();
            $customer->customer_code = optional($customer->customer)->customer_code;
            $customer->account_name_en = optional($customer->customer)->account_name_en;
            $customer->account_name_cn = optional($customer->customer)->account_name_cn;
            $customer->order_id = $order?->order_id; // safe access
            $customer->status_name = $customer?->status === 0 ? 'Unused' : 'Used'; // safe access
            return $customer;
        };

        $data = $perPage === -1
            ? $result->map($transform)
            : tap($result)->getCollection()->transform($transform);

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $perPage === -1
                ? [
                    'current_page' => 1,
                    'data' => $data,
                    'last_page' => 1,
                    'per_page' => $data->count(),
                    'total' => $data->count(),
                ]
                : $result,
        ]);
    }

    public function getAllOrderVoucherByCode(Request $request)
    {
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');
        $customerCode = $request->input('customerCode');

        $query = Order_Voucher::with(['customer'])->orderBy('id', 'desc');

        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('voucher_no', 'like', "%{$search}%")
                ->orWhere('voucher_date', 'like', "%{$search}%")
                ->orWhereHas('customer', function ($q2) use ($search) {
                    $q2->where('customer_code', 'like', "%{$search}%");
                });
            });
        }

        if ($customerCode) {
            $query->whereHas('customer', function ($q) use ($customerCode) {
                $q->where('customer_code', '=', $customerCode);
            });
        }

        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform results to include full name and country names
        $transform = function ($customer) {
            $order = Orders::where('voucher_code', $customer->voucher_no)->first();
            $customer->customer_code = optional($customer->customer)->customer_code;
            $customer->account_name_en = optional($customer->customer)->account_name_en;
            $customer->account_name_cn = optional($customer->customer)->account_name_cn;
            $customer->order_id = $order?->order_id; // safe access
            $customer->status_name = $customer?->status === 0 ? 'Unused' : 'Used'; // safe access
            return $customer;
        };

        $data = $perPage === -1
            ? $result->map($transform)
            : tap($result)->getCollection()->transform($transform);

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $perPage === -1
                ? [
                    'current_page' => 1,
                    'data' => $data,
                    'last_page' => 1,
                    'per_page' => $data->count(),
                    'total' => $data->count(),
                ]
                : $result,
        ]);
    }


    public function doGetPOCSProduct($ProductCode)
    {
        $product = Products::where('product_code', $ProductCode)
            ->select(['id', 'product_code', 'product_title_en', 'product_title_cn'])
            ->first();

        if (!$product) {
            return null; // Or return response()->json(['error' => 'Product not found'], 404);
        }

        // Get thumbnail path manually
        $path = Product_images::where('product_id', $product->id)
            ->where('type', 'thumbnail')
            ->orderBy('rank', 'asc')
            ->value('path'); // returns the first 'path'

        $product->product_thumbnail = $path ?: null;

        return $product->toArray();
    }

    public function getClosingStatus(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $product_code = $request->input('product_code', '');

        // Get Customer Groups by Product Code (Item Code)
        $CustGroupID = $this->doGetCustomerGroupByItemCode($product_code);

        // Get product info
        $ProductsArr = $this->doGetPOCSProduct($product_code);

        // Get customers who already ordered the product
        $CustomersArr = $this->doGetCustomerByOrders($product_code);

        // Split the customer group string into an array
        $Data = explode(",", $CustGroupID);

        // Base query
        $query = Customer::with('customer_group')
            ->where('is_deleted', 0)
            ->where('status', 1)
            ->whereHas('customer_group', function ($q) use ($Data) {
                $q->whereIn('m_customer_group.id', $Data);
            })
            ->whereNotIn('customer_code', $CustomersArr)
            ->orderBy('m_customer.id', 'desc')
            ->select('customer_code', 'account_name_en', 'email_address');

        if ($perPage === -1) {
            $allData = $query->get();
            $paginatedData = [
                'current_page' => 1,
                'data' => $allData,
                'last_page' => 1,
                'per_page' => $allData->count(),
                'total' => $allData->count(),
            ];
        } else {
            $paginatedData = $query->paginate($perPage)->toArray();
        }

        // 👇 add data2 next to data
        $paginatedData['data2'] = $ProductsArr;

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $paginatedData,
        ]);
    }

    public function doGetCustomerGroupByItemCode($ProductCode)
    {

        $product_id = Products::where('product_code', $ProductCode)->pluck('id')->first();
        return Price_setup::where('product_id', $product_id)
            ->where('type','=','wholesale')
            ->pluck('customer_group_id')
            ->implode(','); // Concatenate the customer groups into a comma-separated string
    }
    public function doGetCustomerByOrders($ProductCode)
    {
        $product_id = Products::where('product_code', $ProductCode)->value('id');

        return Customer::whereIn('id', function($query) use ($product_id) {
                $query->select('customer_id')
                    ->from('t_orders')
                    ->where('product_id', $product_id);
            })
            ->orderBy('customer_code', 'asc')
            ->pluck('id')
            ->toArray();
    }
}
