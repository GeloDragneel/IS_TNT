<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;

use App\Models\Sales_order_master;
use App\Models\Sales_order_detail;
use App\Models\Invoice_master;
use App\Models\Invoice_detail;
use App\Models\Invoice_detail_copy;
use App\Models\Credits;
use App\Models\Shipout_items;
use App\Models\Accounts_receivable;
use App\Models\Account_customer_cn;
use App\Models\Receive_voucher_master;
use App\Models\Receive_voucher_detail;
use App\Models\Receive_voucher_master_invoices;
use App\Models\ISSettings;
use App\Models\Products;
use App\Models\Credit_note_customer;
use App\Models\Credit_note_customer_detail;
use App\Models\Inventory_allocation;
use App\Models\Operator;
use App\Models\Payment_orders_cn;
use App\Models\Accounting_settings;
use App\Models\General_ledger;
use App\Models\Payment_voucher_master;
use App\Models\Payment_voucher_detail;
use App\Models\Inventory_tblmaster;
use App\Models\Customer;
use App\Models\Customer_deposit;
use App\Models\Orders;

use App\Events\ProductEvent;
use App\Events\AllocationEvent;
use App\Events\InventoryEvent;
use App\Events\CustInvoiceEvent;
use App\Events\ShipmentEvent;
use App\Events\CustomerEvent;
use App\Events\PreorderEvent;
use App\Events\SOEvent;
use App\Events\LogEvent;
use App\Events\RVEvent;

use Illuminate\Http\Request;
use App\Services\AutoGenerated;

class CustomerInvoiceController extends Controller{

    public function getAllInvoices(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $customerCodes = $request->input('customer_codes', []);
        $poStatus = $request->input('postatus', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        if ($search) {
            // Base query with eager loading
            $query = Invoice_master::with([
                'customer:id,source_id,customer_type,user_id,account_name_en,account_name_cn,customer_code',
                'customer.source:id,description_en,description_cn',
                'invoiceDetails.product:id,product_code,product_title_en,product_title_cn',
                'invoiceDetailsCopy.product:id,product_code,product_title_en,product_title_cn',
                'invoiceDetails.productService:id,service_code,description_en,description_cn',
                'invoiceDetailsCopy.productService:id,service_code,description_en,description_cn',
                'invoiceStatus:id,status_value_en,status_value_cn',
            ])->orderByDesc('so_number')
            ->orderByDesc('id');
        }
        else{
            // Base query with eager loading
            $query = Invoice_master::with([
                'customer:id,source_id,customer_type,user_id,account_name_en,account_name_cn,customer_code',
                'customer.source:id,description_en,description_cn',
                'invoiceDetails.product:id,product_code,product_title_en,product_title_cn',
                'invoiceDetailsCopy.product:id,product_code,product_title_en,product_title_cn',
                'invoiceDetails.productService:id,service_code,description_en,description_cn',
                'invoiceDetailsCopy.productService:id,service_code,description_en,description_cn',
                'invoiceStatus:id,status_value_en,status_value_cn',
            ])->whereIn('invoice_status_id',[2,3])
            ->orderByDesc('id');
        }

        // Filters
        if (!empty($customerCodes)) {
            $query->whereIn('customer_id', $customerCodes);
        }
        if (!empty($poStatus)) {
            $query->whereIn('invoice_status_id', $poStatus);
        }
        if ($categoryDates === 'InvoiceDate' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(invoice_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('so_number', 'like', "%{$search}%")
                    ->orWhere('invoice_no', 'like', "%{$search}%")
                    ->orWhereHas('customer', function ($q) use ($search) {
                        $q->where('account_name_en', 'like', "%{$search}%")
                        ->orWhere('account_name_cn', 'like', "%{$search}%")
                        ->orWhere('customer_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceStatus', function ($q) use ($search) {
                        $q->where('status_value_en', 'like', "%{$search}%")
                        ->orWhere('status_value_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceDetails.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceDetailsCopy.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();

        // Transform all orders (master data)
        $allDataTransformed = $allData->map(fn($order) => $this->transformOrderData($order));

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allDataTransformed->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $allDataTransformed->sum('base_total') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();

        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data (master + details data)
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

        if ($perPage === -1) {
            // No pagination — return all
            $result = $query->get();
            $paginatedData = $result->map(fn($item) => $this->transformOrderData($item));

            $data = $paginatedData->map(function($order) {
                return array_merge(
                    $this->getOrderMasterData($order),
                    ['details' => $this->getOrderDetailsData($order)],
                    ['detailsRV' => $this->getInvoiceRV($order)],
                );
            });

            $response = [
                'current_page' => 1,
                'data' => $data,
                'footer2' => $footer2,
                'last_page' => 1,
                'per_page' => $data->count(),
                'total' => $data->count(),
            ];
        } else {
            // Paginated
            $result = $query->paginate($perPage);

            $paginatedData = tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

            $data = $paginatedData->map(function($order) {
                return array_merge(
                    $this->getOrderMasterData($order),
                    ['details' => $this->getOrderDetailsData($order)],
                    ['detailsRV' => $this->getInvoiceRV($order)],
                );
            });

            $response = [
                'current_page' => $result->currentPage(),
                'data' => $data,
                'footer2' => $footer2,
                'last_page' => $result->lastPage(),
                'per_page' => $result->perPage(),
                'total' => $result->total(),
            ];
        }

        // Final return
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $response,
        ]);

    }
    public function getInvoiceInfo($id){
        $so = Invoice_master::with([
            'customer.salesPerson',
            'customer.shippingTerms',
            'invoiceDetails.product',
            'invoiceDetails.productService',
        ])->where('id', $id)->first();

        if (!$so) {
            return [];
        }

        $account_name_en = $so->customer->account_name_en ?? '';
        $account_name_cn = $so->customer->account_name_cn ?? '';
        $account_name_cn = $account_name_cn === '' ? $account_name_en : $account_name_cn;

        $billing_address_en = $so->customer->billing_address_en ?? '';
        $billing_address_cn = $so->customer->billing_address_cn ?? '';
        $billing_address_cn = $billing_address_cn === '' ? $billing_address_en : $billing_address_cn;

        $delivery_address_en = $so->customer->delivery_address_en ?? '';
        $delivery_address_cn = $so->customer->delivery_address_cn ?? '';
        $delivery_address_cn = $delivery_address_cn === '' ? $delivery_address_en : $delivery_address_cn;

        $mergedDetailsModels = $so->invoiceDetails;

        // Map merged collection to arrays
        $mergedDetails = $mergedDetailsModels->map(function ($detail) {

            $product_code = '';
            $product_title_en = '';
            $product_title_cn = '';

            if($detail->product_id){
                $product_code = optional($detail->product)->product_code;
                $product_title_en = optional($detail->product)->product_title_en;
                $product_title_cn = optional($detail->product)->product_title_cn;
            }
            else{
                $product_code = optional($detail->productService)->service_code;
                $product_title_en = $detail->particular;
                $product_title_cn = $detail->particular;
            }

            $inventory = Inventory_tblmaster::where('product_id', $detail->product_id)->get();
            $inventory_qty = $inventory->sum('qty');
            $allocated_qty = $inventory->sum('allocated_qty');
            $rem_qty = $inventory_qty - $allocated_qty;

            return [
                'id'                    => $detail->id,
                'product_id'            => $detail->product_id ?? 0,
                'service_id'            => $detail->service_id ?? 0,
                'product_code'          => $product_code,
                'product_title_en'      => $product_title_en,
                'product_title_cn'      => $product_title_cn,
                'deposit'               => $detail->deposit,
                'qty'                   => $detail->qty,
                'inventory_qty'         => $rem_qty,
                'price'                 => $detail->price,
                'total'                 => $detail->total,
                'base_total'            => $detail->base_total,
                'currency'              => $detail->currency,
                'ex_rate'               => $detail->ex_rate,
                'item_cost'             => $detail->item_cost,
                'warehouse'             => $detail->warehouse,
                'alloc_type'            => $detail->alloc_type,
                'particular'            => $detail->particular,
                'grn_detail_id'         => $detail->grn_detail_id,
                'grn_no'                => $detail->grn_no,
                'allocated_id'          => $detail->allocated_id,
                'order_id'              => $detail->order_id,
                'product_type'          => $detail->product_type,
                'is_deleted'            => 0,
                'indexInt'              => $detail->id . rand(1, 100),
                'age_type'              => 'old',
                'delete_type'           => '',
            ];
        })->values();

        $list = [
            'id'                    => $so->id,
            'customer_id'           => $so->customer_id,
            'customer_code'         => $so->customer->customer_code ?? '',
            'delivery_method_id'    => $so->customer->preferred_shipping_id ?? '',
            'account_name_en'       => $account_name_en,
            'account_name_cn'       => $account_name_cn,
            'billing_address_en'    => $billing_address_en,
            'billing_address_cn'    => $billing_address_cn,
            'delivery_address_en'   => $delivery_address_en,
            'delivery_address_cn'   => $delivery_address_cn,
            'ex_rate'               => $so->ex_rate,
            'so_number'             => $so->so_number,
            'invoice_no'            => $so->invoice_no,
            'invoice_date'          => $so->invoice_date,
            'ex_rate'               => $so->ex_rate,
            'invoice_status_id'     => $so->invoice_status_id,
            'shipping_stat_id'      => $so->shipping_stat_id,
            'shipping_terms_id'     => $so->customer->shipping_terms_id,
            'sales_person_name'     => $so->customer->salesPerson->fullname,
            'sales_person_id'       => $so->sales_person_id,
            'payment_terms_id'      => $so->payment_terms_id,
            'invoice_type'          => $so->invoice_type,
            'due_date'              => $so->due_date,
            'delivery_date'         => $so->delivery_date,
            'tax'                   => $so->tax,
            'currency'              => $so->currency,
            'total'                 => $so->total,
            'base_total'            => $so->base_total,
            'current_credit'        => $so->current_credit,
            'base_current_credit'   => $so->base_current_credit,
            'cr_amount'             => $so->cr_amount,
            'base_cr_amount'        => $so->base_cr_amount,
            'adv_amount'            => $so->adv_amount,
            'base_adv_amount'       => $so->base_adv_amount,
            'credit_used'           => $so->credit_used,
            'base_credit_used'      => $so->base_credit_used,
            'total_deposit'         => $so->total_deposit,
            'base_total_deposit'    => $so->base_total_deposit,
            'voucher_amount'        => $so->voucher_amount,
            'base_voucher_amount'   => $so->base_voucher_amount,
            'sub_total'             => $so->sub_total,
            'base_sub_total'        => $so->base_sub_total,
            'tax_amount'            => $so->tax_amount,
            'base_tax_amount'       => $so->base_tax_amount,
            'total_deduction'       => $so->total_deduction,
            'base_total_deduction'  => $so->base_total_deduction,
            'total_to_pay'          => $so->total_to_pay,
            'base_total_to_pay'     => $so->base_total_to_pay,
            'excess_amount'         => $so->excess_amount,
            'base_excess_amount'    => $so->base_excess_amount,
            'sub_total_on_cost'     => $so->sub_total_on_cost,
            'amount_paid'           => $so->payment,
            'base_amount_paid'      => $so->payment,
            'balance'               => $so->balance,
            'base_balance'          => $so->balance,
            'remarks'               => $so->remarks,
            'details'               => $mergedDetails,
        ];
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    private function transformOrderData($so){
        $account_name_en = optional($so->customer)->account_name_en;
        $account_name_cn = optional($so->customer)->account_name_cn ?: $account_name_en;
        $so->source_en = optional(optional($so->customer)->source)->description_en ?? '';
        $so->source_cn = optional(optional($so->customer)->source)->description_cn ?? '';
        $so->customer_code = optional($so->customer)->customer_code;
        $so->customer_type = optional($so->customer)->customer_type;
        $so->user_id = optional($so->customer)->user_id;
        $so->account_name_en = $account_name_en;
        $so->account_name_cn = $account_name_cn;
        $so->ex_rate = number_format($so->ex_rate, 4);
        $so->status_value_en = optional($so->invoiceStatus)->status_value_en;
        $so->status_value_cn = optional($so->invoiceStatus)->status_value_cn;
        return $so;
    }
    private function getOrderMasterData($so){
        $response = $this->getCurrentCreditCustomer($so->customer_id, $so->currency);
        $data = $response->getData();
        $current_credit = $data->amount;

        $total = $so->total;
        $total_deposit = $so->total_deposit;
        $credit_used = $so->credit_used;
        $payment = $so->payment;
        $voucher = 0;
        $total_payment = $total_deposit + $credit_used + $payment;
        $balance = $total - $total_payment - $voucher;
        $balance = ($so->invoice_status_id === 1 ? 0 : $balance);

        $accountsReceivable = Accounts_receivable::where('invoice_no',$so->invoice_no)->first();
        $debit = $accountsReceivable->debit ?? 0;
        $amount_paid = $accountsReceivable->amount_paid ?? 0;
        $balance_to_pay = $debit - $amount_paid;

        return [
            'id' => $so->id,
            'so_number' => $so->so_number,
            'invoice_no' => $so->invoice_no,
            'invoice_date' => $so->invoice_date,
            'customer_code' => $so->customer_code,
            'source_en' => $so->source_en,
            'source_cn' => $so->source_cn,
            'customer_id' => $so->customer_id,
            'customer_type' => $so->customer_type,
            'user_id' => $so->user_id,
            'account_name_en' => $so->account_name_en,
            'account_name_cn' => $so->account_name_cn,
            'status_value_en' => $so->status_value_en,
            'status_value_cn' => $so->status_value_cn,
            'currency' => $so->currency,
            'ex_rate' => $so->ex_rate,
            'total' => $so->total,
            'payment' => $so->payment,
            'balance' => $balance,
            'balance_to_pay' => $balance_to_pay,
            'new_balance' => $balance_to_pay,
            'total_deposit' => $so->total_deposit,
            'credit_used' => $so->credit_used,
            'total_to_pay' => $so->total_to_pay,
            'invoice_status_id' => $so->invoice_status_id,
            'invoice_no' => $so->invoice_no,
            'cnt_products' => $so->cnt_products,
            'cnt_ship' => $so->cnt_ship,
            'current_credit' => $current_credit ?? 0,
        ];
    }
    private function getOrderDetailsData($so){
        if($so->invoice_status_id != 5){
            $details = $so->invoiceDetails->map(function($detail) {
                $product_code = '';
                $table_id = 0;
                $product_id = optional($detail->product)->product_code;
                if($product_id){
                    $table_id = optional($detail->product)->id;
                    $product_code = optional($detail->product)->product_code;
                    $product_title_en = optional($detail->product)->product_title_en;
                    $product_title_cn = optional($detail->product)->product_title_cn;
                }
                else{
                    $table_id = optional($detail->productService)->id;
                    $product_code = optional($detail->productService)->service_code;
                    $product_title_en = optional($detail->productService)->description_en;
                    $product_title_cn = optional($detail->productService)->description_cn;
                }
                return [
                    'table_id' => $table_id,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'currency' => $detail->currency,
                    'qty' => $detail->qty,
                    'price' => $detail->price,
                    'total' => $detail->total,
                    'deposit' => $detail->deposit,
                    'source' => 'main', // Optional: to distinguish origin
                ];
            });
            return $details;

        }
        else{
            $detailsCopy = $so->invoiceDetailsCopy->map(function($detail) {
                $product_code = '';
                $table_id = 0;
                $product_id = optional($detail->product)->product_code;
                if($product_id){
                    $table_id = optional($detail->product)->id;
                    $product_code = optional($detail->product)->product_code;
                    $product_title_en = optional($detail->product)->product_title_en;
                    $product_title_cn = optional($detail->product)->product_title_cn;
                }
                else{
                    $table_id = optional($detail->productService)->id;
                    $product_code = optional($detail->productService)->service_code;
                    $product_title_en = optional($detail->productService)->description_en;
                    $product_title_cn = optional($detail->productService)->description_cn;
                }
                return [
                    'table_id' => $table_id,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'currency' => $detail->currency,
                    'qty' => $detail->qty,
                    'price' => $detail->price,
                    'total' => $detail->total,
                    'deposit' => $detail->deposit,
                    'source' => 'copy', // Optional: to distinguish origin
                ];
            });
            return $detailsCopy;
        }
    }
    private function getInvoiceRV($so){
        $order_ids = Invoice_detail::where('invoice_no', $so->invoice_no)
            ->whereNotNull('order_id')
            ->pluck('order_id')
            ->toArray();

        $rv_details = Receive_voucher_detail::whereIn('order_id',$order_ids)->get();
        return $rv_details;
    }
    public function getCurrentCreditCustomer(int $customer_id, string $currency){
        $entries = Account_customer_cn::where('customer_id', $customer_id)->get();

        $totalDebit = 0;
        $totalCredit = 0;
        $baseExRate = 1; // fallback if nothing matches

        foreach ($entries->groupBy('currency') as $currencyCode => $group) {
            // Assume all items in the group have the same ex_rate
            $exRate = $group->first()->ex_rate ?? 1;

            if ($currencyCode === $currency) {
                $debit = $group->sum('debit');
                $credit = $group->sum('credit');
            } else {
                $debit = $group->sum(function ($item) {
                    return $item->debit * $item->ex_rate;
                });
                $credit = $group->sum(function ($item) {
                    return $item->credit * $item->ex_rate;
                });
            }

            $totalDebit += $debit;
            $totalCredit += $credit;

            if ($currencyCode === $currency) {
                $baseExRate = $exRate; // use ex_rate of base currency
            }
        }

        $invoiceAmount = $this->getPendingInvoiceAmount($customer_id, $currency);

        $balanceCredit = $totalCredit - $totalDebit;
        $amount = $balanceCredit - $invoiceAmount;
        $baseAmount = $amount * $baseExRate;

        return response()->json([
            'amount' => $amount,
            'baseAmount' => $baseAmount,
        ]);
    }
    public function getPendingInvoiceAmount(int $customer_id, string $currency): float{
        return (float) Accounts_receivable::where('customer_id', $customer_id)
            ->where('balance', '>', 0)
            ->where('currency', $currency)
            ->sum('balance');
    }
    public function createShipment(Request $request){
        $invoice_no = $request->input('invoice_no');
        
        $countExists = Shipout_items::where('invoice_no',$invoice_no)->count();
        if($countExists > 0){
            return response()->json([
                'token'         => 'Warning',
                'message'       => 'Invoice already have shipout',
                'action'        => 'insert'
            ]);
        }

        DB::beginTransaction();
        try {

            $invoice_detail = Invoice_detail::where('invoice_no', $invoice_no)
                ->where('product_type',0)
                ->get();

            $AutoGenerated = new AutoGenerated();
            $shipping_no = $AutoGenerated->getNextNo("shipping_no","SHP","t_shipout_items");

            if($invoice_detail){
                foreach($invoice_detail as $item){
                    $insertShipment = [
                        'shipping_no' => $shipping_no,
                        'customer_id' => $item->customer_id,
                        'invoice_no' => $item->invoice_no,
                        'status' => 1,
                        'date' => date('Y-m-d'),
                        'product_id' => $item->product_id,
                        'qty' => $item->qty,
                        'invoice_detail_id' => $item->id,
                    ];
                    Shipout_items::create($insertShipment);
                }
            }

            Invoice_master::where('invoice_no', $invoice_no)->update(['cnt_ship' => 1]);
          
            event(new CustInvoiceEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit(); // Commit transaction
            return response()->json([
                'token'         => 'Success',
                'invoice_no'    => $invoice_no,
                'message'       => 'Record Successfully Added',
                'action'        => 'insert'
            ]);

        } catch (\Exception $e) {
            DB::rollBack(); // Rollback on error
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    =>'insert'
            ]);
        }
    }
    public function createReceiveVoucher(Request $request){
        $invoiceData = collect($request->invoice_nos)->map(function ($item) {
            return json_decode($item, true);
        });

        $invoiceNos = $invoiceData->pluck('invoice_no')->toArray();
        $invoice_master = Invoice_master::whereIn('invoice_no', $invoiceNos)->get();
        $total_deposit = $invoice_master->sum('deposit');
        $credit_used = $invoice_master->sum('credit_used');

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            $request2 = new Request([
                'currency' => $currency,
                'basecurrency' => $baseCurrency
            ]);

            $globalController = new GlobalController();
            $globalResponse = $globalController->getCurrentExRate($request2);
            $global = $globalResponse->getData();
            $ex_rate = $global->ex_rate;

            $AutoGenerated = new AutoGenerated();
            $rv_number = $AutoGenerated->getNextNo("rv_number","RV","t_rv_master");

            $base_total = 0;
            $base_amount_paid = 0;

            if ($baseCurrency == $currency) {
                $base_total = $request->balance_to_pay;
                $base_amount_paid = $request->received_amount;
            } else {
                if ($operator === "Divide") {
                    $base_total = $request->balance_to_pay / $ex_rate;
                    $base_amount_paid = $request->received_amount / $ex_rate;
                } elseif ($operator === "Multiply") {
                    $base_total = $request->balance_to_pay * $ex_rate;
                    $base_amount_paid = $request->received_amount * $ex_rate;
                }
            }

            $insertMaster = [
                'rv_number' => $rv_number,
                'account_code' => 12200,
                'customer_id' => $request->customer_id,
                'bank' => $request->bank,
                'rv_date' => $request->rv_date,
                'rv_status_id' => 1,
                'ex_rate' => $ex_rate,
                'currency' => $request->currency,
                'total' => $request->balance_to_pay,
                'base_total' => $base_total,
                'amount_paid' => $request->received_amount,
                'base_amount_paid'  => $base_amount_paid,
                'bank_charges' => 0,
                'base_bank_charges' => 0,
                'excess_amount' => 0,
                'base_excess_amount' => 0,
                'invoice_deposit' => $total_deposit,
                'credit_used' => $credit_used,
            ];
            $invoic_master = Receive_voucher_master::create($insertMaster);
            $count = count($invoiceData);
            // Loop through each invoice number
            foreach ($invoiceData as $list) {
                $amount_paid = ($count === 1 ? $request->received_amount : $list['receive_amount']);
                $invoice_master_id = Invoice_master::where('invoice_no', $list['invoice_no'])->value('id');
                $insertMaster2 = [
                    'rv_master_id' => $invoic_master->id,
                    'invoice_master_id' => $invoice_master_id,
                ];
                Receive_voucher_master_invoices::create($insertMaster2);
                $results = Accounts_receivable::where('customer_id', $request->customer_id)
                    ->where('invoice_no', $list['invoice_no'])
                    ->where('balance', '>', 0)
                    ->get();

                foreach($results as $item){
                    $insertDetail = [
                        'rv_number' => $rv_number,
                        'account_code' => $item->account_code,
                        'rv_date' => $request->rv_date,
                        'customer_id' => $request->customer_id,
                        'particulars' => $item->invoice_no,
                        'invoice_no' => $item->invoice_no,
                        'invoice_id' => $invoice_master_id,
                        'currency' => $item->currency,
                        'ex_rate' => $item->ex_rate,
                        'amount' => $item->debit,
                        'base_amount' => $item->base_amount,
                        'amount_paid' => $amount_paid,
                        'ex_rate_diff' => 0,
                        'remarks' => '',
                    ];
                    $invoic_master = Receive_voucher_detail::create($insertDetail);
                    $invoice_detail = Invoice_detail::where('invoice_no',$item->invoice_no)->get();
                    foreach($invoice_detail as $list){
                        Products::where('id', $list->product_id)->update([
                            'last_sold_date' => $list->invoice_date,
                        ]);
                    }
                }
            }

            event(new CustInvoiceEvent('insert'));
            event(new RVEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit(); // Commit transaction
            return response()->json([
                'token'         => 'Success',
                'message'       => 'Receive Voucher Successfully Created',
                'action'        => 'insert'
            ]);

        } catch (\Exception $e) {
            DB::rollBack(); // Rollback on error
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    =>'insert'
            ]);
        }


        return response()->json([
            'total_deposit' => $total_deposit,
            'credit_used' => $credit_used,
        ]);
    }
    public function getCreditsDetail(Request $request){
        // Validate input
        $validated = $request->validate([
            'customer_id' => 'required|integer',
            'currency' => 'required|string',
        ]);

        $customer_id = $validated['customer_id'];
        $currency = $validated['currency'];

        // Fetch all credit entries for the customer
        $credits = Account_customer_cn::with('account')
            ->select('account_code', 'currency', 'ref_data', 'credit', 'debit', 'ex_rate')
            ->where('customer_id', $customer_id)
            ->where('account_code', '!=', 21602)
            ->get();

        // Group them by account_code (if needed)
        $grouped = $credits->groupBy('account_code');

        // Process results
        $resultArray = $grouped->map(function ($items) use ($currency, $customer_id) {
            $first = $items->first();

            $totalCredit = $items->sum('credit');
            $totalDebit = $items->sum('debit');
            $exRate = $first->ex_rate ?? 1;

            $isConverted = $first->currency !== $currency ? 1 : 0;

            // Calculate amount
            $amount = 0;

            if ($customer_id === 5) {
                $amount = $first->currency === $currency
                    ? $totalCredit - $totalDebit
                    : ($totalCredit * $exRate) - ($totalDebit * $exRate);
            } else {
                $amount = $totalCredit - $totalDebit;
            }

            if ($amount > 0) {
                return [
                    'account_code' => $first->account_code,
                    'account_name_en' => optional($first->account)->account_name_en,
                    'account_name_cn' => optional($first->account)->account_name_cn,
                    'ref_data' => $first->ref_data,
                    'orig_currency' => $first->currency,
                    'currency' => $currency,
                    'is_converted' => $isConverted,
                    'amount' => round($amount, 2),
                    'new_amount' => 0
                ];
            }

            return null;
        })->filter()->values(); // remove nulls

        return response()->json($resultArray);
    }
    public function createJournalVoucher(Request $request){
        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $customer_id = $request->customer_id;

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                        $adv_amount = 0;
                        $cr_amount = 0;
                        $excess_amount = 0;
                        if($list['balance_to_pay'] > 0){
                            if($list['account_code'] === "21312"){
                                $adv_amount = $list['balance_to_pay'];
                            }
                            if($list['account_code'] === "21313"){
                                $cr_amount = $list['balance_to_pay'];
                            }
                            if($list['account_code'] === "21310"){
                                $excess_amount = $list['balance_to_pay'];
                            }

                            $Invoice_master = Invoice_master::where('invoice_no',$list['invoice_no'])->first();
                            $total_deposit = $Invoice_master->total_deposit;
                            $base_total_deposit = $Invoice_master->base_total_deposit;
                            $ex_rate = $Invoice_master->ex_rate;
                            $total = $Invoice_master->total;

                            $total_deduction = $adv_amount + $excess_amount + $cr_amount + $total_deposit;
                            $credit_used = $adv_amount + $excess_amount + $cr_amount;
                            $total_to_pay = $total - $total_deduction;

                            $base_adv_amount = 0;
                            $base_excess_amount = 0;
                            $base_cr_amount = 0;
                            $base_total_deduction = 0;
                            $base_total_to_pay = 0;
                            $base_credit_used = 0;

                            if ($baseCurrency == $currency) {
                                $base_adv_amount = $adv_amount;
                                $base_excess_amount = $excess_amount;
                                $base_cr_amount = $cr_amount;
                                $base_total_deduction = $total_deduction;
                                $base_total_to_pay = $total_to_pay;
                                $base_credit_used = $credit_used;
                            } else {
                                if ($operator === "Divide") {
                                    $base_adv_amount = $adv_amount / $ex_rate;
                                    $base_excess_amount = $excess_amount / $ex_rate;
                                    $base_cr_amount = $cr_amount / $ex_rate;
                                    $base_total_deduction = $total_deduction / $ex_rate;
                                    $base_total_to_pay = $total_to_pay / $ex_rate;
                                    $base_credit_used = $credit_used / $ex_rate;
                                } elseif ($operator === "Multiply") {
                                    $base_adv_amount = $adv_amount * $ex_rate;
                                    $base_excess_amount = $excess_amount * $ex_rate;
                                    $base_cr_amount = $cr_amount * $ex_rate;
                                    $base_total_deduction = $total_deduction * $ex_rate;
                                    $base_total_to_pay = $total_to_pay * $ex_rate;
                                    $base_credit_used = $credit_used * $ex_rate;
                                }
                            }

                            if($Invoice_master){
                                $Invoice_master->adv_amount = $adv_amount;
                                $Invoice_master->base_adv_amount = $base_adv_amount;
                                $Invoice_master->excess_amount = $excess_amount;
                                $Invoice_master->base_excess_amount = $base_excess_amount;
                                $Invoice_master->cr_amount = $cr_amount;
                                $Invoice_master->base_cr_amount = $base_cr_amount;
                                $Invoice_master->total_deduction = $total_deduction;
                                $Invoice_master->base_total_deduction = $base_total_deduction;
                                $Invoice_master->total_to_pay = $total_to_pay;
                                $Invoice_master->base_total_to_pay = $base_total_to_pay;
                                $Invoice_master->credit_used = $credit_used;
                                $Invoice_master->base_credit_used = $base_credit_used;
                                $Invoice_master->payment = $total;
                                $Invoice_master->balance = 0;
                                $Invoice_master->invoice_status_id = 1;
                                $Invoice_master->save();
                            }
                        }
                    }
                }
            }

            event(new CustInvoiceEvent('insert'));
            event(new RVEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit(); // Commit transaction
            return response()->json([
                'token'         => 'Success',
                'message'       => 'Customer Invoice Successfully Saved',
                'action'        => 'insert'
            ]);

        } catch (\Exception $e) {
            DB::rollBack(); // Rollback on error
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    =>'insert'
            ]);
        }


        return response()->json([
            'total_deposit' => $total_deposit,
            'credit_used' => $credit_used,
        ]);
    }
    public function paidInAdvance(Request $request){
        DB::beginTransaction();

        try {

            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                        
                        $currency = $list['currency'];
                        $customer_id = $list['customer_id'];
                        $invoice_no = $list['invoice_no'];
                        $balance = $list['balance'];

                        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
                        $operator = GlobalController::getOperator( $currency . $baseCurrency);

                        $request2 = new Request([
                            'currency' => $currency,
                            'basecurrency' => $baseCurrency
                        ]);

                        $Invoice_master = Invoice_master::where('invoice_no',$invoice_no)->first();
                        if($Invoice_master){
                            $Invoice_master->invoice_status_id = 1;
                            $Invoice_master->save();
                        }
                        if($balance > 0){

                            $AutoGenerated = new AutoGenerated();
                            $cr_number = $AutoGenerated->getNextNo("cr_number","CRN","t_credit_note_customer_master");

                            $globalController = new GlobalController();
                            $globalResponse = $globalController->getCurrentExRate($request2);
                            $global = $globalResponse->getData();
                            $ex_rate = $global->ex_rate;

                            $base_amount = 0;
                            if ($baseCurrency == $currency) {
                                $base_amount = $balance;
                            } else {
                                if ($operator === "Divide") {
                                    $base_amount = $balance / $ex_rate;
                                } elseif ($operator === "Multiply") {
                                    $base_amount = $balance * $ex_rate;
                                }
                            }
                            Credit_note_customer::create([
                                'cr_number' => $cr_number,
                                'amount' => $balance,
                                'base_amount' => $base_amount,
                                'customer_id' => $customer_id,
                                'cr_status_id' => 7,
                                'cr_date' => date('M d Y'),
                                'ex_rate' => $ex_rate,
                                'currency' => $currency,
                                'particulars' => 'Credit to Customer Exceed Payment~记到客户账号',
                                'account_code' => 21313,
                            ]);
                            Credit_note_customer_detail::create([
                                'account_code' => 21313,
                                'customer_id' => $customer_id,
                                'cr_number' => $cr_number,
                                'ex_rate' => $ex_rate,
                                'currency' => $currency,
                                'remarks' => 'Credit Note',
                                'cr_date' => date('M d Y'),
                                'amount' => $balance,
                                'base_amount' => $base_amount,
                                'ex_rate_diff' => 0,
                                'particulars' => '',
                                'remarks' => 'Credit Note'
                            ]);
                        }
                    }
                }
            }

            event(new CustInvoiceEvent('insert'));
            event(new RVEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit(); // Commit transaction
            return response()->json([
                'token'         => 'Success',
                'message'       => 'Record Successfully Updated',
                'action'        => 'insert'
            ]);

        } catch (\Exception $e) {
            DB::rollBack(); // Rollback on error
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    =>'insert'
            ]);
        }


        return response()->json([
            'total_deposit' => $total_deposit,
            'credit_used' => $credit_used,
        ]);
    }
    public function cancelDepositPaid(Request $request){
        $row_arrays = $request->input('row_arrays');
        $type = $request->input('type');
        $token = $request->input('token');


        DB::beginTransaction();

        try {
            $resultArray = [];
            foreach($row_arrays as $row){

                $invoice_no = $row['invoice_no'];
                $customer_id = $row['customer_id'];
                $currency = $row['currency'];

                $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
                $operator = Operator::where('convertion', $currency . $baseCurrency)->value('operator') ?? '';

                $request2 = new Request([
                    'currency' => $currency,
                    'basecurrency' => $baseCurrency
                ]);

                $globalController = new GlobalController();
                $globalResponse = $globalController->getCurrentExRate($request2);
                $global = $globalResponse->getData();

                $Invoice_detail = Invoice_detail::where('invoice_no',$invoice_no)
                    ->whereNotNull('order_id')
                    ->get();
                $order_ids = $Invoice_detail->pluck('order_id')->toArray();

                $sumRV = Receive_voucher_detail::whereIn('order_id', $order_ids)->sum('amount');
                $sumJV = Payment_orders_cn::whereIn('order_id', $order_ids)->get()
                    ->groupBy('order_id')
                    ->reduce(function ($carry, $group) {
                        $amount = $group->contains('is_combined', 1)
                            ? $group->where('is_combined', 1)->max('payment_order')
                            : $group->where('is_combined', 0)->sum('payment_order');

                        return $carry + $amount;
                    }, 0);

                $totalPaidRVJV = $sumRV + $sumJV;
                $baseTotalPaidRVJV = 0;
                
                if ($baseCurrency == $currency) {
                    $baseTotalPaidRVJV = $totalPaidRVJV;
                } else {
                    if ($operator === "Divide") {
                        $baseTotalPaidRVJV = $totalPaidRVJV / $global->ex_rate;
                    } elseif ($operator === "Multiply") {
                        $baseTotalPaidRVJV = $totalPaidRVJV * $global->ex_rate;
                    }
                }
                if ($totalPaidRVJV > 0) {
                    switch ($type) {
                        case 'CTOCUST': // Credit to Customer
                            $accountCode = 21313;
                            $particulars = 'Credit to Customer~记到客户账号';
                            $AutoGenerated = new AutoGenerated();
                            $cr_number = $AutoGenerated->getNextNo("cr_number", "CRN", "t_credit_note_customer_master");

                            $insertMaster = [
                                'cr_status_id' => 7,
                                'customer_id' => $customer_id,
                                'amount' => $totalPaidRVJV,
                                'base_amount' => $baseTotalPaidRVJV,
                                'cr_number' => $cr_number,
                                'cr_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $currency,
                                'account_code' => $accountCode,
                                'particulars' => $particulars,
                            ];

                            Credit_note_customer::create($insertMaster);

                            foreach ($Invoice_detail as $list) {

                                $amount = 0;
                                $baseAmount = 0;

                                $sumRV = Receive_voucher_detail::where('order_id', $list->order_id)->sum('amount');
                                $sumJV = Payment_orders_cn::where('order_id', $list->order_id)->get()
                                    ->groupBy('order_id')
                                    ->reduce(function ($carry, $group) {
                                        $amount = $group->contains('is_combined', 1)
                                            ? $group->where('is_combined', 1)->max('payment_order')
                                            : $group->where('is_combined', 0)->sum('payment_order');

                                        return $carry + $amount;
                                    }, 0);
                                
                                $amount = $sumRV + $sumJV;

                                if ($baseCurrency == $currency) {
                                    $baseAmount = $amount;
                                } else {
                                    if ($operator === "Divide") {
                                        $baseAmount = $amount / $global->ex_rate;
                                    } elseif ($operator === "Multiply") {
                                        $baseAmount = $amount * $global->ex_rate;
                                    }
                                }

                                Credit_note_customer_detail::create([
                                    'account_code' => 21604,
                                    'customer_id' => $customer_id,
                                    'cr_number' => $cr_number,
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $currency,
                                    'remarks' => 'Credit Note (Cancelled Order)',
                                    'cr_date' => date('M d Y'),
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'product_id' => $list->product_id,
                                    'order_id' => $list->order_id,
                                ]);
                            }
                        break;
                        case 'NRTOMI': // Misc Income
                            $accountCode = Accounting_settings::where('chart_fix_code', 'CUSTDEP')->value('account_code');
                            General_ledger::create([
                                'account_code' => $accountCode,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $currency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => $baseTotalPaidRVJV,
                                'credit' => 0,
                            ]);
                            General_ledger::create([
                                'account_code' => 70001,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $currency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => 0,
                                'credit' => $baseTotalPaidRVJV,
                            ]);
                            foreach ($Invoice_detail as $list) {
                                $orderId = $list->order_id;
                                $paymentOrders = Payment_orders_cn::where('order_id', $orderId)->get();
                                foreach ($paymentOrders as $payment) {
                                    $accountCustomer = $payment->accountCustomerCn;
                                    if ($accountCustomer) {
                                        $accountCustomer->update([
                                            'account_code' => 70001,
                                            'particulars' => 'Non-refundable deposit due to cancellation~订单取消订金不退协议',
                                            'ref_data'    => 'Cancelled Order',
                                        ]);
                                    }
                                }
                            }
                        break;
                        case 'RPTOC': // REFUND TO CUSTOMER
                            $accountCode = Accounting_settings::where('chart_fix_code', 'MISCINCOME')->value('account_code');
                            $AutoGenerated = new AutoGenerated();
                            $pv_number = $AutoGenerated->getNextNo("pv_number", "PV", "t_pv_master");
                            $bank = Receive_voucher_master::where('customer_id', $customer_id)->value('bank');

                            $insertMaster = [
                                'pv_number' => $pv_number,
                                'pv_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $currency,
                                'pv_status_id' => 7,
                                'payment_type_id' => 3,
                                'pay_to_en' => '',
                                'pay_to_cn' => '',
                                'customer_id' => $customer_id,
                                'total_amount' => $totalPaidRVJV,
                                'base_total_amount' => $baseTotalPaidRVJV,
                                'sub_total' => $totalPaidRVJV,
                                'base_sub_total' => $baseTotalPaidRVJV,
                                'bank' => $bank
                            ];
                            Payment_voucher_master::create($insertMaster);
                            foreach ($Invoice_detail as $list) {

                                $amount = 0;
                                $baseAmount = 0;

                                $sumRV = Receive_voucher_detail::where('order_id', $list->order_id)->sum('amount');
                                $sumJV = Payment_orders_cn::where('order_id', $list->order_id)->get()
                                    ->groupBy('order_id')
                                    ->reduce(function ($carry, $group) {
                                        $amount = $group->contains('is_combined', 1)
                                            ? $group->where('is_combined', 1)->max('payment_order')
                                            : $group->where('is_combined', 0)->sum('payment_order');

                                        return $carry + $amount;
                                    }, 0);
                                
                                $amount = $sumRV + $sumJV;

                                if ($baseCurrency == $currency) {
                                    $baseAmount = $amount;
                                } else {
                                    if ($operator === "Divide") {
                                        $baseAmount = $amount / $global->ex_rate;
                                    } elseif ($operator === "Multiply") {
                                        $baseAmount = $amount * $global->ex_rate;
                                    }
                                }

                                Payment_voucher_detail::create([
                                    'account_code' => 21602,
                                    'product_id' => $list->product_id,
                                    'ref_data' => $list->order_id,
                                    'account_no' => '',
                                    'ap_invoice_no' => '',
                                    'pv_number' => $pv_number,
                                    'pv_date' => date('M d Y'),
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $currency,
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'payment_type_id' => 3,
                                    'qty' => 0,
                                ]);
                            }
                        break;
                    }
                }
                if($token == 'full' && $type != 'PRTCNL'){
                    $records = Invoice_detail::where('invoice_no', $invoice_no)->get();
                    foreach ($records as $record) {
                        $new = $record->replicate();
                        $new->setTable('t_invoice_detail_copy');
                        $new->save();
                    }
                    Invoice_detail::where('invoice_no', $invoice_no)->delete();
                    Invoice_master::where('invoice_no', $invoice_no)->update(['invoice_status_id' => 5]);
                    Shipout_items::where('invoice_no', $invoice_no)->delete();
                }
                if($token == 'full' && $type == 'PRTCNL'){
                    Invoice_master::where('invoice_no', $invoice_no)->update(['invoice_status_id' => 9]);
                    $items = Shipout_items::where('invoice_no', $invoice_no)
                        ->select('product_id', 'invoice_no')
                        ->selectRaw('SUM(qty) as qty')
                        ->groupBy('invoice_no', 'product_id')
                        ->get();

                    foreach ($items as $item) {
                        Inventory_allocation::where('invoice_no', $item->invoice_no)
                            ->where('product_id', $item->product_id)
                            ->update(['qty' => $item->qty]);
                    }
                }
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Invoices', 't_invoice_master',
                    'void',
                    'Void Invoice Number : ' . $invoice_no
                );
            }

            event(new InventoryEvent( 'void'));
            event(new SOEvent( 'void'));
            event(new AllocationEvent( 'void'));
            event(new CustomerEvent( 'void'));
            event(new PreorderEvent( 'void'));
            event(new ProductEvent( 'void'));
            event(new LogEvent( 'void'));

            DB::commit();

            return response()->json([
                'token' => 'Success',
                'message' => 'Successfully Voided'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Transaction failed: ' . $e->getMessage(),
                'action'    => 'Delete'
            ]);
        }
    }
    public function voidCustomerInvoice(Request $request){
        DB::beginTransaction();

        try {
            if (!$request->has('details') || empty($request->details)) {
                return response()->json([
                    'token'   => 'Error',
                    'message' => 'No details found.',
                    'action'  => 'update'
                ]);
            }

            foreach ($request->details as $list) {
                // Ensure $list is an array (in case it's a JSON string)
                if (is_string($list)) {
                    $list = json_decode($list, true);
                }

                if (!is_array($list) || !isset($list['invoice_no'])) {
                    throw new \Exception('Invalid SO detail format.');
                }

                $invoice_no = $list['invoice_no'];

                $records = Invoice_detail::where('invoice_no', $invoice_no)->get();
                foreach ($records as $record) {
                    $new = $record->replicate();
                    $new->setTable('t_invoice_detail_copy');
                    $new->save();
                }
                Invoice_detail::where('invoice_no', $invoice_no)->delete();
                Invoice_master::where('invoice_no', $invoice_no)->update([
                    'invoice_status_id' => 5,
                    'shipping_stat_id' => 1,
                    'cnt_ship' => 0,
                ]);
                Shipout_items::where('invoice_no', $invoice_no)->delete();

                // Call logAction from a service, not controller
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Invoices',
                    't_invoice_master',
                    'void',
                    'Void Invoice Number: ' . $invoice_no
                );
            }

            // Fire related events
            event(new CustInvoiceEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit();

            return response()->json([
                'token'   => 'Success',
                'message' => 'Successfully Voided',
                'action'  => 'update'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();

            return response()->json([
                'token'   => 'Error',
                'message' => $e->getMessage(),
                'action'  => 'update'
            ]);
        }
    }
    public function getCountExistCustomer($customer_code){
        return Customer::where('customer_code', $customer_code)->count();
    }
    public function updateCustomerInvoice(Request $request, $id){
        $OrigID = $id;
        $GlobalTableNo = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');
        $product_ids = $request->product_ids;

        $countCustomer = $this->getCountExistCustomer($request->customer_code);
        if($countCustomer === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Customer Account does not exist',
                'id'        => $id,
                'action'    => $Action
            ]);
        }

        if($request->ex_rate === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Exchange Rate is Required',
                'action'    => 'Insert'
            ]);
        }

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            $invoice_status_id = $request->invoice_status_id;
            if((int) $request->total_to_pay === 0){
                $invoice_status_id = 1;
            }

            if ((int) $id === 0) {
                $AutoGenerated = new AutoGenerated();
                $invoice_no = $AutoGenerated->getNextNo("invoice_no","INV","t_invoice_master");
                $inserMaster = [
                    'invoice_no'        => $invoice_no,
                    'so_number'         => $request->so_number,
                    'customer_id'       => $request->customer_id,
                    'ex_rate'           => $request->ex_rate,
                    'tax'               => $request->tax,
                    'currency'          => $request->currency,
                    'sales_person_id'   => $request->sales_person_id,
                    'shipping_stat_id'  => $request->shipping_stat_id,
                    'invoice_date'      => $request->invoice_date,
                    'invoice_status_id' => $invoice_status_id,
                    'invoice_type'      => $request->invoice_type,
                    'delivery_date'     => $request->delivery_date ?? '',
                    'due_date'          => $request->due_date ?? '',
                    'payment_terms_id'  => $request->payment_terms_id,
                    'credit_used'       => $request->credit_used,
                    'base_credit_used'  => $request->base_credit_used,
                    'current_credit'    => $request->current_credit,
                    'base_current_credit'   => $request->base_current_credit,
                    'total_deposit'     => $request->total_deposit,
                    'base_total_deposit'    => $request->base_total_deposit,
                    'sub_total'         => $request->sub_total,
                    'base_sub_total'    => $request->base_sub_total,
                    'tax_amount'        => $request->tax_amount,
                    'base_tax_amount'   => $request->base_tax_amount,
                    'total'             => $request->total,
                    'base_total'        => $request->base_total,
                    'total_to_pay'      => $request->total_to_pay,
                    'base_total_to_pay' => $request->base_total_to_pay,
                    'cr_amount'         => $request->cr_amount,
                    'base_cr_amount'    => $request->base_cr_amount,
                    'adv_amount'        => $request->adv_amount,
                    'base_adv_amount'   => $request->base_adv_amount,
                    'excess_amount'     => $request->excess_amount,
                    'base_excess_amount'    => $request->base_excess_amount,
                    'total_deduction'   => $request->total_deduction,
                    'base_total_deduction'  => $request->base_total_deduction,
                    'sub_total_on_cost' => $request->sub_total_on_cost,
                ];
                $master = Invoice_master::create($inserMaster);
                $OrigID = $master->id;
                $GlobalTableNo = $invoice_no;
            }
            else{
                $master = Invoice_master::find($request['id']);
                if ($master) {
                    $master->so_number = $request->so_number;
                    $master->invoice_no = $request->invoice_no;
                    $master->customer_id = $request->customer_id;
                    $master->ex_rate = $request->ex_rate;
                    $master->tax = $request->tax;
                    $master->currency = $request->currency;
                    $master->sales_person_id = $request->sales_person_id;
                    $master->shipping_stat_id = $request->shipping_stat_id;
                    $master->invoice_date = $request->invoice_date;
                    $master->invoice_status_id = $invoice_status_id;
                    $master->invoice_type = $request->invoice_type;
                    $master->delivery_date = $request->delivery_date ?? '';
                    $master->due_date = $request->due_date ?? '';
                    $master->payment_terms_id = $request->payment_terms_id;
                    $master->credit_used = $request->credit_used;
                    $master->base_credit_used = $request->base_credit_used;
                    $master->current_credit = $request->current_credit;
                    $master->base_current_credit = $request->base_current_credit;
                    $master->total_deposit = $request->total_deposit;
                    $master->base_total_deposit = $request->base_total_deposit;
                    $master->sub_total = $request->sub_total;
                    $master->base_sub_total = $request->base_sub_total;
                    $master->tax_amount = $request->tax_amount;
                    $master->base_tax_amount = $request->base_tax_amount;
                    $master->total = $request->total;
                    $master->base_total = $request->base_total;
                    $master->total_to_pay = $request->total_to_pay;
                    $master->base_total_to_pay = $request->base_total_to_pay;
                    $master->cr_amount = $request->cr_amount;
                    $master->base_cr_amount = $request->base_cr_amount;
                    $master->adv_amount = $request->adv_amount;
                    $master->base_adv_amount = $request->base_adv_amount;
                    $master->excess_amount = $request->excess_amount;
                    $master->base_excess_amount = $request->base_excess_amount;
                    $master->total_deduction = $request->total_deduction;
                    $master->base_total_deduction = $request->base_total_deduction;
                    $master->sub_total_on_cost = $request->sub_total_on_cost;
                    $master->save();
                }
                $GlobalTableNo = $master->invoice_no;
            }
            $is_delete_array = [];
            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }
                    $base_total = 0;
                    if($baseCurrency != $currency){
                        $base_total = (float) $list['total'];
                    }
                    else{
                        if($operator === 'Divide'){
                            $base_total = (float) $list['total'] / (float) $request->ex_rate;
                        }
                        if($operator === 'Multiply'){
                            $base_total = (float) $list['total'] * (float) $request->ex_rate;
                        }
                    }

                    $recordID = $list['id'];
                    $detail_id = 0;

                    if ((int) $list['is_deleted'] === 1) {
                        if($list['delete_type']){
                            $is_delete_array[] = [
                                'id' => $list['id'],
                                'order_id' => $list['order_id'],
                                'product_id' => $list['product_id'],
                                'invoice_no' => $GlobalTableNo,
                                'type' => $list['delete_type'],
                            ];
                        }
                        else{
                            $detail = Invoice_detail::find($recordID);
                            if ($detail) {
                                $detail->delete();
                            }
                        }
                    }
                    if((int) $list['is_deleted'] === 0){
                        if ((int) $recordID === 0) {
                            $allocation_id = 0;
                            if($list['alloc_type'] === 'Manual'){
                                $alloc = Inventory_allocation::create([
                                    'customer_id' => $request->customer_id,
                                    'qty' => $list['qty'],
                                    'allocated_qty' => 0,
                                    'currency' => $request->currency,
                                    'price' => $list['price'],
                                    'total' => $list['total'],
                                    'product_id' => $list['product_id'],
                                    'pod' => $list['warehouse'],
                                    'warehouse' => $list['warehouse'],
                                    'sales_person_id' => $request->sales_person_id,
                                    'invoice_no' => $GlobalTableNo,
                                    'so_number' => $request->so_number,
                                    'grn_detail_id' => $list['grn_detail_id'],
                                    'grn_no' => $list['grn_no'],
                                ]);
                                $allocation_id = $alloc->id;
                            }
                            $insertDetail = [
                                'invoice_no' => $GlobalTableNo,
                                'invoice_date' => $request->invoice_date,
                                'product_type' => $list['product_type'],
                                'item_cost' => $list['item_cost'],
                                'product_id' => ($list['product_id'] === 0 ? null : $list['product_id']),
                                'service_id' => ($list['service_id'] === 0 ? null : $list['service_id']),
                                'deposit' => $list['deposit'],
                                'qty' => $list['qty'],
                                'price' => $list['price'],
                                'total' => $list['total'],
                                'base_total' => $base_total,
                                'ex_rate' => $request->ex_rate,
                                'customer_id' => $request->customer_id,
                                'invoice_status_id' => $invoice_status_id,
                                'currency' => $request->currency,
                                'allocated_id' => ($allocation_id === 0 ? null : $allocation_id),
                                'grn_detail_id' => ($list['grn_detail_id'] === 0 ? null : $list['grn_detail_id']),
                                'sales_person_id' => $request->sales_person_id,
                                'order_id' => ($list['order_id'] === 0 ? null : $list['order_id']),
                                'alloc_type' => $list['alloc_type'],
                                'warehouse' => $list['warehouse'],
                                'particular' => $list['particular'],
                                'delivery_date' => $request->delivery_date,
                                'due_date' => $request->due_date,
                                'remarks' => ''
                            ];
                            $detail = Invoice_detail::create($insertDetail);
                            $detail_id = $detail->id;
                        }
                        else{
                            $detail = Invoice_detail::find($list['id']);
                            if ($detail) {
                                $allocated_id = ($list['allocated_id'] === 0 ? null : $list['allocated_id']);
                                $grn_detail_id = ($list['grn_detail_id'] === 0 ? null : $list['grn_detail_id']);
                                $order_id = ($list['order_id'] === 0 ? null : $list['order_id']);
                                $product_id = ($list['product_id'] === 0 ? null : $list['product_id']);
                                $service_id = ($list['service_id'] === 0 ? null : $list['service_id']);

                                if($detail->qty != $list['qty']){
                                    Shipout_items::where('invoice_no', $detail->invoice_no)->update([
                                        'qty' => $list['qty'],
                                        'product_id' => $product_id,
                                    ]);
                                }

                                $detail->product_type = $list['product_type'];
                                $detail->item_cost = $list['item_cost'];
                                $detail->product_id = $product_id;
                                $detail->service_id = $service_id;
                                $detail->deposit = $list['deposit'];
                                $detail->qty = $list['qty'];
                                $detail->price = $list['price'];
                                $detail->total = $list['total'];
                                $detail->base_total = $base_total;
                                $detail->invoice_date = $request->invoice_date;
                                $detail->ex_rate = $request->ex_rate;
                                $detail->customer_id = $request->customer_id;
                                $detail->invoice_status_id = $invoice_status_id;
                                $detail->currency = $request->currency;
                                $detail->allocated_id = $allocated_id;
                                $detail->grn_detail_id = $grn_detail_id;
                                $detail->sales_person_id = $request->sales_person_id;
                                $detail->order_id = $order_id;
                                $detail->alloc_type = $list['alloc_type'];
                                $detail->warehouse = $list['warehouse'];
                                $detail->particular = $list['particular'];
                                $detail->remarks = '';
                                $detail->save();
                                $detail_id = $detail->id;

                                $sum_alloc = Invoice_detail::where('allocated_id', $allocated_id)->sum('qty');
                                $sum_deposit = Invoice_detail::where('order_id', $order_id)->sum('deposit');

                                // Update inventory allocation
                                Inventory_allocation::where('id', $allocated_id)->update([
                                    'invoice_no' => $detail->invoice_no,
                                    'allocated_qty' => $sum_alloc,
                                ]);

                                // Update customer deposit
                                Customer_deposit::where('order_id', $order_id)->update([
                                    'invoice_no' => $detail->invoice_no,
                                    'used_deposit' => $sum_deposit,
                                ]);
                            }
                        }
                    }
                }   
                if(count($is_delete_array) > 0){
                    $groupedOrders = array_reduce($is_delete_array, function($carry, $order) {
                        $type = $order['type'];
                        if (!isset($carry[$type])) {
                            $carry[$type] = [];
                        }
                        $carry[$type][] = [
                            'id' => $order['id'],
                            'order_id' => $order['order_id'],
                            'product_id' => $order['product_id'],
                            'invoice_no' => $order['invoice_no'],
                        ];
                        return $carry;
                    }, []);
                    $this->voidSelectedItem($groupedOrders,$GlobalTableNo,$request->customer_id,$request->currency);
                }
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Invoices', 't_invoice_master',
                $Action,
                'Invoice No : ' . $request->so_number
            );

            event(new SOEvent($Action));
            event(new AllocationEvent($Action));
            event(new PreorderEvent($Action));
            event(new LogEvent($Action));
            event(new ProductEvent($Action));
            event(new CustomerEvent($Action));
            event(new InventoryEvent($Action));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Customer Invoice Successfully Saved',
                'id'        => $OrigID,
                'action'    => $Action
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }
    }
    public function voidSingleInvoice(Request $request){
        DB::beginTransaction();

        try {
            if (!$request->has('details') || empty($request->details)) {
                return response()->json([
                    'token'   => 'Error',
                    'message' => 'No details found.',
                    'action'  => 'update'
                ]);
            }

            foreach ($request->details as $list) {
                // Ensure $list is an array (in case it's a JSON string)
                if (is_string($list)) {
                    $list = json_decode($list, true);
                }

                if (!is_array($list) || !isset($list['invoice_no'])) {
                    throw new \Exception('Invalid Invoice detail format.');
                }

                $invoice_no = $list['invoice_no'];


                $records = Invoice_detail::where('invoice_no', $invoice_no)->get();
                foreach ($records as $record) {
                    $new = $record->replicate();
                    $new->setTable('t_invoice_detail_copy');
                    $new->save();
                }
                Invoice_detail::where('invoice_no', $invoice_no)->delete();
                Invoice_master::where('invoice_no', $invoice_no)->update([
                    'invoice_status_id' => 5,
                    'shipping_stat_id' => 1,
                    'cnt_ship' => 0,
                ]);
                Shipout_items::where('invoice_no', $invoice_no)->delete();
            }

            // Fire related events
            event(new CustInvoiceEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit();

            return response()->json([
                'token'   => 'Success',
                'message' => 'Successfully Voided',
                'action'  => 'update'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();

            return response()->json([
                'token'   => 'Error',
                'message' => $e->getMessage(),
                'action'  => 'update'
            ]);
        }
    }
    public function getDepositPaidInv(Request $request){
        $totalDepositPaid = 0;
        $idsArr = [];
        if ($request->has('details')) {
            foreach ($request->details as $list) {
                if (is_string($list)) {
                    $list = json_decode($list, true);
                    $invoice_no = $list['invoice_no'];

                    $order_ids = Invoice_detail::where('invoice_no', $invoice_no)
                        ->whereNotNull('order_id')
                        ->pluck('order_id')
                        ->toArray();

                    if($order_ids){
                        $totalDepositPaid = $this->getPaidAmounts($order_ids);
                        $idsArr[] = [
                            'order_id'  => $order_ids,
                            'invoice_no'  => $invoice_no,
                        ];
                    }
                }
            }
        }
        return response()->json([
            'deposit' => $totalDepositPaid,
            'idsArr' => $idsArr,
        ]);
    }
    public function getPaidAmounts($order_ids){
        $sumRV = Receive_voucher_detail::whereIn('order_id', $order_ids)->sum('amount');
        $sumJV = Payment_orders_cn::whereIn('order_id', $order_ids)->get()
            ->groupBy('order_id')
            ->reduce(function ($carry, $group) {
                $amount = $group->contains('is_combined', 1)
                    ? $group->where('is_combined', 1)->max('payment_order')
                    : $group->where('is_combined', 0)->sum('payment_order');

                return $carry + $amount;
            }, 0);

        $totalDepositPaid = $sumRV + $sumJV;
        return $totalDepositPaid;
    }
    public function voidSelectedItem($groupedOrders,$invoice_no,$customer_id,$currency){
        DB::beginTransaction();
        try {
            $resultArray = [];
            foreach ($groupedOrders as $type => $orders) {

                $order_ids = array_column($orders, 'order_id');
                $invoice_ids = array_column($orders, 'id');

                $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
                $operator = Operator::where('convertion', $currency . $baseCurrency)->value('operator') ?? '';

                $request2 = new Request([
                    'currency' => $currency,
                    'basecurrency' => $baseCurrency
                ]);

                $globalController = new GlobalController();
                $globalResponse = $globalController->getCurrentExRate($request2);
                $global = $globalResponse->getData();

                $sumRV = Receive_voucher_detail::whereIn('order_id', $order_ids)->sum('amount');
                $sumJV = Payment_orders_cn::whereIn('order_id', $order_ids)->get()
                    ->groupBy('order_id')
                    ->reduce(function ($carry, $group) {
                        $amount = $group->contains('is_combined', 1)
                            ? $group->where('is_combined', 1)->max('payment_order')
                            : $group->where('is_combined', 0)->sum('payment_order');

                        return $carry + $amount;
                    }, 0);

                $totalPaidRVJV = $sumRV + $sumJV;
                $baseTotalPaidRVJV = 0;
                
                if ($baseCurrency == $currency) {
                    $baseTotalPaidRVJV = $totalPaidRVJV;
                } else {
                    if ($operator === "Divide") {
                        $baseTotalPaidRVJV = $totalPaidRVJV / $global->ex_rate;
                    } elseif ($operator === "Multiply") {
                        $baseTotalPaidRVJV = $totalPaidRVJV * $global->ex_rate;
                    }
                }
                if ($totalPaidRVJV > 0) {
                    switch ($type) {
                        case 'CTOCUST': // Credit to Customer
                            $accountCode = 21313;
                            $particulars = 'Credit to Customer~记到客户账号';
                            $AutoGenerated = new AutoGenerated();
                            $cr_number = $AutoGenerated->getNextNo("cr_number", "CRN", "t_credit_note_customer_master");

                            $insertMaster = [
                                'cr_status_id' => 7,
                                'customer_id' => $customer_id,
                                'amount' => $totalPaidRVJV,
                                'base_amount' => $baseTotalPaidRVJV,
                                'cr_number' => $cr_number,
                                'cr_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $currency,
                                'account_code' => $accountCode,
                                'particulars' => $particulars,
                            ];

                            Credit_note_customer::create($insertMaster);

                            foreach($orders as $list){
                                $amount = 0;
                                $baseAmount = 0;

                                $sumRV = Receive_voucher_detail::where('order_id', $list['order_id'])->sum('amount');
                                $sumJV = Payment_orders_cn::where('order_id', $list['order_id'])->get()
                                    ->groupBy('order_id')
                                    ->reduce(function ($carry, $group) {
                                        $amount = $group->contains('is_combined', 1)
                                            ? $group->where('is_combined', 1)->max('payment_order')
                                            : $group->where('is_combined', 0)->sum('payment_order');

                                        return $carry + $amount;
                                    }, 0);
                                
                                $amount = $sumRV + $sumJV;

                                if ($baseCurrency == $currency) {
                                    $baseAmount = $amount;
                                } else {
                                    if ($operator === "Divide") {
                                        $baseAmount = $amount / $global->ex_rate;
                                    } elseif ($operator === "Multiply") {
                                        $baseAmount = $amount * $global->ex_rate;
                                    }
                                }

                                Credit_note_customer_detail::create([
                                    'account_code' => 21604,
                                    'customer_id' => $customer_id,
                                    'cr_number' => $cr_number,
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $currency,
                                    'remarks' => 'Credit Note (Cancelled Order)',
                                    'cr_date' => date('M d Y'),
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'product_id' => $list['product_id'],
                                    'order_id' => $list['order_id'],
                                ]);
                            }
                        break;
                        case 'NRTOMI': // Misc Income
                            $accountCode = Accounting_settings::where('chart_fix_code', 'CUSTDEP')->value('account_code');
                            General_ledger::create([
                                'account_code' => $accountCode,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $currency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => $baseTotalPaidRVJV,
                                'credit' => 0,
                            ]);
                            General_ledger::create([
                                'account_code' => 70001,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $currency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => 0,
                                'credit' => $baseTotalPaidRVJV,
                            ]);
                            foreach($orders as $list){
                                $orderId = $list['order_id'];
                                $paymentOrders = Payment_orders_cn::where('order_id', $orderId)->get();
                                foreach ($paymentOrders as $payment) {
                                    $accountCustomer = $payment->accountCustomerCn;
                                    if ($accountCustomer) {
                                        $accountCustomer->update([
                                            'account_code' => 70001,
                                            'particulars' => 'Non-refundable deposit due to cancellation~订单取消订金不退协议',
                                            'ref_data'    => 'Cancelled Order',
                                        ]);
                                    }
                                }
                            }
                        break;
                        case 'RPTOC': // REFUND TO CUSTOMER
                            $accountCode = Accounting_settings::where('chart_fix_code', 'MISCINCOME')->value('account_code');
                            $AutoGenerated = new AutoGenerated();
                            $pv_number = $AutoGenerated->getNextNo("pv_number", "PV", "t_pv_master");
                            $bank = Receive_voucher_master::where('customer_id', $customer_id)->value('bank');

                            $insertMaster = [
                                'pv_number' => $pv_number,
                                'pv_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $currency,
                                'pv_status_id' => 7,
                                'payment_type_id' => 3,
                                'pay_to_en' => '',
                                'pay_to_cn' => '',
                                'customer_id' => $customer_id,
                                'total_amount' => $totalPaidRVJV,
                                'base_total_amount' => $baseTotalPaidRVJV,
                                'sub_total' => $totalPaidRVJV,
                                'base_sub_total' => $baseTotalPaidRVJV,
                                'bank' => $bank
                            ];
                            Payment_voucher_master::create($insertMaster);
                            foreach($orders as $list){

                                $amount = 0;
                                $baseAmount = 0;

                                $sumRV = Receive_voucher_detail::where('order_id', $list['order_id'])->sum('amount');
                                $sumJV = Payment_orders_cn::where('order_id', $list['order_id'])->get()
                                    ->groupBy('order_id')
                                    ->reduce(function ($carry, $group) {
                                        $amount = $group->contains('is_combined', 1)
                                            ? $group->where('is_combined', 1)->max('payment_order')
                                            : $group->where('is_combined', 0)->sum('payment_order');

                                        return $carry + $amount;
                                    }, 0);
                                
                                $amount = $sumRV + $sumJV;

                                if ($baseCurrency == $currency) {
                                    $baseAmount = $amount;
                                } else {
                                    if ($operator === "Divide") {
                                        $baseAmount = $amount / $global->ex_rate;
                                    } elseif ($operator === "Multiply") {
                                        $baseAmount = $amount * $global->ex_rate;
                                    }
                                }

                                Payment_voucher_detail::create([
                                    'account_code' => 21602,
                                    'product_id' => $list['product_id'],
                                    'ref_data' => $list['order_id'],
                                    'account_no' => '',
                                    'ap_invoice_no' => '',
                                    'pv_number' => $pv_number,
                                    'pv_date' => date('M d Y'),
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $currency,
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'payment_type_id' => 3,
                                    'qty' => 0,
                                ]);
                            }
                        break;
                    }
                }
                foreach($orders as $list){
                    $detail = Invoice_detail::find($list['id']);
                    if ($detail) {
                        $detail->delete();
                    }
                }
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Invoices', 't_invoice_master',
                    'void',
                    'Void Invoice Number : ' . $invoice_no
                );
            }

            event(new InventoryEvent( 'void'));
            event(new SOEvent( 'void'));
            event(new AllocationEvent( 'void'));
            event(new CustomerEvent( 'void'));
            event(new PreorderEvent( 'void'));
            event(new ProductEvent( 'void'));
            event(new LogEvent( 'void'));

            DB::commit();

            return response()->json([
                'token' => 'Success',
                'message' => 'Successfully Voided'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Transaction failed: ' . $e->getMessage(),
                'action'    => 'Delete'
            ]);
        }
    }
}
