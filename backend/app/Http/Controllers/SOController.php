<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;

use App\Models\Sales_order_master;
use App\Models\Sales_order_detail;
use App\Models\Invoice_master;
use App\Models\Invoice_detail;
use App\Models\Shipout_items;
use App\Models\Inventory_allocation;
use App\Models\Customer_deposit;
use App\Models\Credits;
use App\Models\Payment_orders_cn;
use App\Models\Receive_voucher_detail;
use App\Models\Orders;
use App\Models\ISSettings;
use App\Models\Operator;
use App\Models\Credit_note_customer;
use App\Models\Accounting_settings;
use App\Models\General_ledger;
use App\Models\Receive_voucher_master;
use App\Models\Payment_voucher_master;
use App\Models\Payment_voucher_detail;
use App\Models\Customer;
use App\Models\Inventory_tblmaster;
use App\Models\Product_services;
use App\Models\Price_setup;
use App\Models\Customer_group_list;
use App\Models\Grn_details;
use App\Models\Order_Voucher;
use App\Models\Internal_Transfer;
use App\Models\Products;
use App\Models\Credit_note_customer_detail;

use App\Events\ProductEvent;
use App\Events\AllocationEvent;
use App\Events\InventoryEvent;
use App\Events\CustInvoiceEvent;
use App\Events\ShipmentEvent;
use App\Events\CustomerEvent;
use App\Events\PreorderEvent;
use App\Events\SOEvent;
use App\Events\LogEvent;

use App\Http\Controllers\GlobalController;
use App\Services\AutoGenerated;

class SOController extends Controller{

    public function getAllSalesOrder(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $customerCodes = $request->input('customer_codes', []);
        $poStatus = $request->input('postatus', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        if ($search) {
            // Base query with eager loading
            $query = Sales_order_master::with([
                'customer:id,source_id,customer_type,user_id,account_name_en,account_name_cn,customer_code',
                'customer.source:id,description_en,description_cn',
                'salesOrderDetails.productItem:id,product_code,product_title_en,product_title_cn',
                'salesOrderDetailsCopy.productItem:id,product_code,product_title_en,product_title_cn',
                'salesOrderDetails.services:id,service_code,description_en,description_cn',
                'salesOrderDetailsCopy.services:id,service_code,description_en,description_cn',
                'invoiceStatus:id,status_value_en,status_value_cn',
            ])->orderByDesc('so_number')
            ->orderByDesc('id');
        }
        else{
            // Base query with eager loading
            $query = Sales_order_master::with([
                'customer:id,source_id,customer_type,user_id,account_name_en,account_name_cn,customer_code',
                'customer.source:id,description_en,description_cn',
                'salesOrderDetails.productItem:id,product_code,product_title_en,product_title_cn',
                'salesOrderDetailsCopy.productItem:id,product_code,product_title_en,product_title_cn',
                'salesOrderDetails.services:id,service_code,description_en,description_cn',
                'salesOrderDetailsCopy.services:id,service_code,description_en,description_cn',
                'invoiceStatus:id,status_value_en,status_value_cn',
            ])->where('invoice_status_id',2)
            ->orderByRaw("FIELD(invoice_status_id, 2, 8)")
            ->orderByDesc('id');
        }

        // Filters
        if (!empty($customerCodes)) {
            $query->whereIn('customer_id', $customerCodes);
        }
        if (!empty($poStatus)) {
            $query->whereIn('invoice_status_id', $poStatus);
        }
        if ($categoryDates === 'SODate' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(so_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('so_number', 'like', "%{$search}%")
                    ->orWhere('invoice_no', 'like', "%{$search}%")
                    ->orWhereHas('customer', function ($q) use ($search) {
                        $q->where('account_name_en', 'like', "%{$search}%")
                        ->orWhere('account_name_cn', 'like', "%{$search}%")
                        ->orWhere('customer_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceStatus', function ($q) use ($search) {
                        $q->where('status_value_en', 'like', "%{$search}%")
                        ->orWhere('status_value_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('salesOrderDetails.productItem', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('salesOrderDetailsCopy.productItem', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();

        // Transform all orders (master data)
        $allDataTransformed = $allData->map(fn($order) => $this->transformOrderData($order));

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allDataTransformed->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $allDataTransformed->sum('base_total') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();

        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data (master + details data)
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

        if ($perPage === -1) {
            // No pagination — return all
            $result = $query->get();
            $paginatedData = $result->map(fn($item) => $this->transformOrderData($item));

            $data = $paginatedData->map(function($order) {
                return array_merge(
                    $this->getOrderMasterData($order),
                    ['details' => $this->getOrderDetailsData($order)]
                );
            });

            $response = [
                'current_page' => 1,
                'data' => $data,
                'footer2' => $footer2,
                'last_page' => 1,
                'per_page' => $data->count(),
                'total' => $data->count(),
            ];
        } else {
            // Paginated
            $result = $query->paginate($perPage);

            $paginatedData = tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item));

            $data = $paginatedData->map(function($order) {
                return array_merge(
                    $this->getOrderMasterData($order),
                    ['details' => $this->getOrderDetailsData($order)]
                );
            });

            $response = [
                'current_page' => $result->currentPage(),
                'data' => $data,
                'footer2' => $footer2,
                'last_page' => $result->lastPage(),
                'per_page' => $result->perPage(),
                'total' => $result->total(),
            ];
        }

        // Final return
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $response,
        ]);

    }
    public function getSOInfo($id){
        $so = Sales_order_master::with([
            'customer.salesPerson',
            'customer.shippingTerms',
            'salesOrderDetails.productItem',
            'salesOrderDetails.productService',
        ])->where('id', $id)->first();

        if (!$so) {
            return [];
        }

        $account_name_en = $so->customer->account_name_en ?? '';
        $account_name_cn = $so->customer->account_name_cn ?? '';
        $account_name_cn = $account_name_cn === '' ? $account_name_en : $account_name_cn;

        $billing_address_en = $so->customer->billing_address_en ?? '';
        $billing_address_cn = $so->customer->billing_address_cn ?? '';
        $billing_address_cn = $billing_address_cn === '' ? $billing_address_en : $billing_address_cn;

        $delivery_address_en = $so->customer->delivery_address_en ?? '';
        $delivery_address_cn = $so->customer->delivery_address_cn ?? '';
        $delivery_address_cn = $delivery_address_cn === '' ? $delivery_address_en : $delivery_address_cn;

        $mergedDetailsModels = $so->salesOrderDetails;

        // Map merged collection to arrays
        $mergedDetails = $mergedDetailsModels->map(function ($detail) {

            $product_code = '';
            $product_title_en = '';
            $product_title_cn = '';

            if($detail->product_id){
                $product_code = optional($detail->productItem)->product_code;
                $product_title_en = optional($detail->productItem)->product_title_en;
                $product_title_cn = optional($detail->productItem)->product_title_cn;
            }
            else{
                $product_code = optional($detail->productService)->service_code;
                $product_title_en = $detail->particular;
                $product_title_cn = $detail->particular;
            }

            $inventory = Inventory_tblmaster::where('product_id', $detail->product_id)->get();
            $inventory_qty = $inventory->sum('qty');
            $allocated_qty = $inventory->sum('allocated_qty');
            $rem_qty = $inventory_qty - $allocated_qty;

            return [
                'id'                    => $detail->id,
                'product_id'            => $detail->product_id ?? 0,
                'service_id'            => $detail->service_id ?? 0,
                'product_code'          => $product_code,
                'product_title_en'      => $product_title_en,
                'product_title_cn'      => $product_title_cn,
                'deposit'               => $detail->deposit,
                'qty'                   => $detail->qty,
                'inventory_qty'         => $rem_qty,
                'price'                 => $detail->price,
                'total'                 => $detail->total,
                'base_total'            => $detail->base_total,
                'currency'              => $detail->currency,
                'ex_rate'               => $detail->ex_rate,
                'item_cost'             => $detail->item_cost,
                'warehouse'             => $detail->warehouse,
                'alloc_type'            => $detail->alloc_type,
                'particular'            => $detail->particular,
                'grn_detail_id'         => $detail->grn_detail_id,
                'grn_no'                => $detail->grn_no,
                'allocated_id'          => $detail->allocated_id,
                'order_id'              => $detail->order_id,
                'product_type'          => $detail->product_type,
                'is_deleted'            => 0,
                'indexInt'              => $detail->id . rand(1, 100),
                'age_type'              => 'old',
                'delete_type'           => '',
            ];
        })->values();

        $list = [
            'id'                    => $so->id,
            'customer_id'           => $so->customer_id,
            'customer_code'         => $so->customer->customer_code ?? '',
            'account_name_en'       => $account_name_en,
            'account_name_cn'       => $account_name_cn,
            'billing_address_en'    => $billing_address_en,
            'billing_address_cn'    => $billing_address_cn,
            'delivery_address_en'   => $delivery_address_en,
            'delivery_address_cn'   => $delivery_address_cn,
            'so_number'             => $so->so_number,
            'so_date'               => $so->so_date,
            'ex_rate'               => $so->ex_rate,
            'invoice_status_id'     => $so->invoice_status_id,
            'shipping_stat_id'      => $so->shipping_stat_id,
            'shipping_terms_id'     => $so->customer->shipping_terms_id,
            'sales_person_name'     => $so->customer->salesPerson->fullname,
            'sales_person_id'       => $so->sales_person_id,
            'payment_terms_id'      => $so->payment_terms_id,
            'invoice_type'          => $so->invoice_type,
            'due_date'              => $so->due_date,
            'delivery_date'         => $so->delivery_date,
            'tax'                   => $so->tax,
            'currency'              => $so->currency,
            'total'                 => $so->total,
            'base_total'            => $so->base_total,
            'current_credit'        => $so->current_credit,
            'base_current_credit'   => $so->base_current_credit,
            'cr_amount'             => $so->cr_amount,
            'base_cr_amount'        => $so->base_cr_amount,
            'adv_amount'            => $so->adv_amount,
            'base_adv_amount'       => $so->base_adv_amount,
            'credit_used'           => $so->credit_used,
            'base_credit_used'      => $so->base_credit_used,
            'total_deposit'         => $so->total_deposit,
            'base_total_deposit'    => $so->base_total_deposit,
            'voucher_amount'        => $so->voucher_amount,
            'base_voucher_amount'   => $so->base_voucher_amount,
            'sub_total'             => $so->sub_total,
            'base_sub_total'        => $so->base_sub_total,
            'tax_amount'            => $so->tax_amount,
            'base_tax_amount'       => $so->base_tax_amount,
            'total_deduction'       => $so->total_deduction,
            'base_total_deduction'  => $so->base_total_deduction,
            'total_to_pay'          => $so->total_to_pay,
            'base_total_to_pay'     => $so->base_total_to_pay,
            'excess_amount'         => $so->excess_amount,
            'base_excess_amount'    => $so->base_excess_amount,
            'sub_total_on_cost'     => $so->sub_total_on_cost,
            'details'               => $mergedDetails,
        ];
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    private function transformOrderData($so){
        $account_name_en = optional($so->customer)->account_name_en;
        $account_name_cn = optional($so->customer)->account_name_cn ?: $account_name_en;
        $so->customer_code = optional($so->customer)->customer_code;
        $so->source_en = optional(optional($so->customer)->source)->description_en ?? '';
        $so->source_cn = optional(optional($so->customer)->source)->description_cn ?? '';
        $so->customer_type = optional($so->customer)->customer_type;
        $so->user_id = optional($so->customer)->user_id;
        $so->account_name_en = $account_name_en;
        $so->account_name_cn = $account_name_cn;
        $so->ex_rate = number_format($so->ex_rate, 4);
        $so->status_value_en = optional($so->invoiceStatus)->status_value_en;
        $so->status_value_cn = optional($so->invoiceStatus)->status_value_cn;
        return $so;
    }
    private function getOrderMasterData($so){
        $current_credit = Credits::where('customer_id',$so->customer_id)->value('current_credit');
        return [
            'id' => $so->id,
            'so_number' => $so->so_number,
            'so_date' => $so->so_date,
            'customer_code' => $so->customer_code,
            'source_en' => $so->source_en,
            'source_cn' => $so->source_cn,
            'customer_id' => $so->customer_id,
            'customer_type' => $so->customer_type,
            'user_id' => $so->user_id,
            'account_name_en' => $so->account_name_en,
            'account_name_cn' => $so->account_name_cn,
            'status_value_en' => $so->status_value_en,
            'status_value_cn' => $so->status_value_cn,
            'currency' => $so->currency,
            'ex_rate' => $so->ex_rate,
            'total' => $so->total,
            'total_deposit' => $so->total_deposit,
            'credit_used' => $so->credit_used,
            'total_to_pay' => $so->total_to_pay,
            'invoice_status_id' => $so->invoice_status_id,
            'invoice_no' => $so->invoice_no,
            'cnt_products' => $so->cnt_products,
            'current_credit' => $current_credit ?? 0,
        ];
    }
    private function getOrderDetailsData($so){
        if($so->invoice_status_id != 5){
            $details = $so->salesOrderDetails->map(function($detail) {
                $product_code = '';
                $table_id = 0;
                $product_id = optional($detail->productItem)->product_code;
                if($product_id){
                    $table_id = optional($detail->productItem)->id;
                    $product_code = optional($detail->productItem)->product_code;
                    $product_title_en = optional($detail->productItem)->product_title_en;
                    $product_title_cn = optional($detail->productItem)->product_title_cn;
                }
                else{
                    $table_id = optional($detail->services)->id;
                    $product_code = optional($detail->services)->service_code;
                    $product_title_en = optional($detail->services)->description_en;
                    $product_title_cn = optional($detail->services)->description_cn;
                }
                return [
                    'table_id' => $table_id,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'currency' => $detail->currency,
                    'qty' => $detail->qty,
                    'price' => $detail->price,
                    'total' => $detail->total,
                    'deposit' => $detail->deposit,
                    'source' => 'main', // Optional: to distinguish origin
                ];
            });
            return $details;

        }
        else{
            $detailsCopy = $so->salesOrderDetailsCopy->map(function($detail) {
                $product_code = '';
                $table_id = 0;
                $product_id = optional($detail->productItem)->product_code;
                if($product_id){
                    $table_id = optional($detail->productItem)->id;
                    $product_code = optional($detail->productItem)->product_code;
                    $product_title_en = optional($detail->productItem)->product_title_en;
                    $product_title_cn = optional($detail->productItem)->product_title_cn;
                }
                else{
                    $table_id = optional($detail->services)->id;
                    $product_code = optional($detail->services)->service_code;
                    $product_title_en = optional($detail->services)->description_en;
                    $product_title_cn = optional($detail->services)->description_cn;
                }
                return [
                    'table_id' => $table_id,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'currency' => $detail->currency,
                    'qty' => $detail->qty,
                    'price' => $detail->price,
                    'total' => $detail->total,
                    'deposit' => $detail->deposit,
                    'source' => 'copy', // Optional: to distinguish origin
                ];
            });
            return $detailsCopy;
        }
    }
    public function confirmSalesOrder(Request $request){
        $resultArray = [];

        DB::beginTransaction(); // Begin transaction

        try {
            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                        $so_number = $list['so_number'];
                        $is_shipment = $list['is_shipment'];
                        $invoice_no = isset($list['so_number'])
                            ? Invoice_master::where('so_number', $list['so_number'])->value('invoice_no')
                            : null;

                        if($invoice_no){
                            $soMaster = Sales_order_master::where('so_number', $list['so_number'])->first();
                            $invMaster = Invoice_master::where('invoice_no', $invoice_no)->first();
                            $invMaster->invoice_date = date('M d Y');
                            $invMaster->so_number = $soMaster->so_number;
                            $invMaster->payment = $soMaster->payment;
                            $invMaster->shipping_stat_id = $soMaster->shipping_stat_id;
                            $invMaster->current_credit = $soMaster->current_credit;
                            $invMaster->base_current_credit = $soMaster->base_current_credit;
                            $invMaster->credit_used = $soMaster->credit_used;
                            $invMaster->base_credit_used = $soMaster->base_credit_used;
                            $invMaster->due_date = $soMaster->due_date;
                            $invMaster->delivery_date = $soMaster->delivery_date;
                            $invMaster->save();
                        }
                        else{
                            $AutoGenerated = new AutoGenerated();
                            $invoice_no = $AutoGenerated->getNextNo("invoice_no","INV","t_invoice_master");
                            $soMaster = Sales_order_master::where('so_number', $list['so_number'])->first();

                            $cnt_ship = ($is_shipment > 0 ? 1 : ($soMaster->cnt_products == 0 ? 1 : 0));

                            $inserMaster = [
                                'invoice_no' => $invoice_no,
                                'invoice_date' => date('M d Y'),
                                'so_number' => $soMaster->so_number,
                                'customer_id' => $soMaster->customer_id,
                                'invoice_status_id' => 2,
                                'currency' => $soMaster->currency,
                                'ex_rate' => $soMaster->ex_rate,
                                'sub_total' => $soMaster->sub_total,
                                'base_sub_total' => $soMaster->base_sub_total,
                                'total' => $soMaster->total,
                                'base_total' => $soMaster->base_total,
                                'total_deposit' => $soMaster->total_deposit,
                                'base_total_deposit' => $soMaster->base_total_deposit,
                                'total_to_pay' => $soMaster->total_to_pay,
                                'base_total_to_pay' => $soMaster->base_total_to_pay,
                                'total_deduction' => $soMaster->total_deduction,
                                'base_total_deduction' => $soMaster->base_total_deduction,
                                'payment' => $soMaster->payment,
                                'balance' => $soMaster->balance,
                                'current_credit' => $soMaster->current_credit,
                                'base_current_credit' => $soMaster->base_current_credit,
                                'credit_used' => $soMaster->credit_used,
                                'base_credit_used' => $soMaster->base_credit_used,
                                'cr_amount' => $soMaster->cr_amount,
                                'base_cr_amount' => $soMaster->base_cr_amount,
                                'adv_amount' => $soMaster->adv_amount,
                                'base_adv_amount' => $soMaster->base_adv_amount,
                                'excess_amount' => $soMaster->excess_amount,
                                'base_excess_amount' => $soMaster->base_excess_amount,
                                'voucher_amount' => $soMaster->voucher_amount,
                                'base_voucher_amount' => $soMaster->base_voucher_amount,
                                'base_row_total' => $soMaster->base_total,
                                'sub_total_on_cost' => $soMaster->sub_total_on_cost,
                                'tax_amount' => $soMaster->tax_amount,
                                'base_tax_amount' => $soMaster->base_tax_amount,
                                'shipping_stat_id' => $soMaster->shipping_stat_id,
                                'payment_terms_id' => $soMaster->payment_terms_id,
                                'sales_person_id' => $soMaster->sales_person_id,
                                'due_date' => $soMaster->due_date,
                                'delivery_date' => $soMaster->delivery_date,
                                'cnt_ship' => $cnt_ship,
                                'invoice_type' => 1,
                            ];
                            $newMaster = Invoice_master::create($inserMaster);
                            $soDetail = Sales_order_detail::where('so_number', $list['so_number'])->get();
                            foreach($soDetail as $detail){
                                $on_ship_out_qty = ($is_shipment > 0 ? $detail->qty : 0);
                                $inserDetail = [
                                    'invoice_no' => $invoice_no,
                                    'invoice_date' => date('M d Y'),
                                    'product_id' => $detail->product_id,
                                    'service_id' => $detail->service_id,
                                    'qty' => $detail->qty,
                                    'price' => $detail->price,
                                    'total' => $detail->total,
                                    'order_id' => $detail->order_id,
                                    'allocated_id' => $detail->allocated_id,
                                    'grn_detail_id' => $detail->grn_detail_id,
                                    'sales_person_id' => $detail->sales_person_id,
                                    'currency' => $detail->currency,
                                    'customer_id' => $detail->customer_id,
                                    'shipping_stat_id' => $detail->shipping_stat_id,
                                    'invoice_status_id' => 2,
                                    'deposit' => $detail->deposit,
                                    'on_ship_out_qty' => $on_ship_out_qty,
                                    'ex_rate' => $detail->ex_rate,
                                    'base_total' => $detail->base_total,
                                    'alloc_type' => $detail->alloc_type,
                                    'warehouse' => $detail->warehouse,
                                    'product_type' => $detail->product_type,
                                    'particular' => $detail->particular,
                                    'item_cost' => $detail->item_cost,
                                    'shipped_qty' => 0,
                                    'remarks' => '',
                                ];
                                $newDetail = Invoice_detail::create($inserDetail);
                                if($is_shipment > 0){
                                    $shipping_no = $AutoGenerated->getNextNo("shipping_no","SHP","t_shipout_items");
                                    $insertShipment = [
                                        'shipping_no' => $shipping_no,
                                        'customer_id' => $detail->customer_id,
                                        'invoice_no' => $newDetail->invoice_no,
                                        'status' => 1,
                                        'date' => date('Y-m-d'),
                                        'product_id' => $detail->product_id,
                                        'qty' => $detail->qty,
                                        'invoice_detail_id' => $newDetail->id,
                                    ];
                                    $newShipment = Shipout_items::create($insertShipment);
                                }
                                Inventory_allocation::where('id',$newDetail->allocated_id)->update([
                                    'invoice_no' => $newDetail->invoice_no,
                                    'allocated_qty' => $newDetail->qty,
                                ]);
                                Customer_deposit::where('order_id',$newDetail->order_id)->update([
                                    'invoice_no' => $newDetail->invoice_no,
                                    'used_deposit' => $newDetail->deposit,
                                ]);
                            }
                            $resultArray[] = [
                                'invoice_no' => $newMaster->invoice_no
                            ];
                        }
                        $globalController = new GlobalController();
                        $globalController->logAction(
                            'Sales Order', 't_so_master',
                            'insert',
                            'Cofirm SO Number : ' . $so_number
                        );
                    }
                }

                event(new CustInvoiceEvent('insert'));
                event(new ShipmentEvent('insert'));
                event(new CustomerEvent('insert'));
                event(new SOEvent('insert'));

                DB::commit(); // Commit transaction
                return response()->json([
                    'token'     => 'Success',
                    'invArr'    => $resultArray,
                    'message'   => 'Has been created',
                    'action'    => 'insert'
                ]);
            }
            return response()->json([
                'token'     => 'Error',
                'message'   => 'No details found.',
                'action'    => 'insert'
            ]);
        } catch (\Exception $e) {
            DB::rollBack(); // Rollback on error
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    =>'insert'
            ]);
        }
    }
    public function getDepositPaid(Request $request){
        $totalDepositPaid = 0;
        $idsArr = [];
        if ($request->has('details')) {
            foreach ($request->details as $list) {
                if (is_string($list)) {
                    $list = json_decode($list, true);
                    $so_number = $list['so_number'];

                    $order_ids = Sales_order_detail::where('so_number', $so_number)
                        ->whereNotNull('order_id')
                        ->pluck('order_id')
                        ->toArray();

                    if($order_ids){
                        $totalDepositPaid = $this->getPaidAmounts($order_ids);
                        $idsArr[] = [
                            'order_id'  => $order_ids,
                            'so_number'  => $so_number,
                        ];
                    }
                }
            }
        }
        return response()->json([
            'deposit' => $totalDepositPaid,
            'idsArr' => $idsArr,
        ]);
    }
    public function getPaidAmounts($order_ids){
        $sumRV = Receive_voucher_detail::whereIn('order_id', $order_ids)->sum('amount');
        $sumJV = Payment_orders_cn::whereIn('order_id', $order_ids)->get()
            ->groupBy('order_id')
            ->reduce(function ($carry, $group) {
                $amount = $group->contains('is_combined', 1)
                    ? $group->where('is_combined', 1)->max('payment_order')
                    : $group->where('is_combined', 0)->sum('payment_order');

                return $carry + $amount;
            }, 0);

        $totalDepositPaid = $sumRV + $sumJV;
        return $totalDepositPaid;
    }
    public function getDepositOnDelete(Request $request) {
        $order_ids = $request->input('ids');  // Get the order IDs from the request body

        if (empty($order_ids) || !is_array($order_ids)) {
            return response()->json(['success' => false, 'message' => 'Invalid order IDs provided.']);
        }

        $sumRV = Receive_voucher_detail::whereIn('order_id', $order_ids)->sum('amount');
        $sumJV = Payment_orders_cn::whereIn('order_id', $order_ids)->get()
            ->groupBy('order_id')
            ->reduce(function ($carry, $group) {
                $amount = $group->contains('is_combined', 1)
                    ? $group->where('is_combined', 1)->max('payment_order')
                    : $group->where('is_combined', 0)->sum('payment_order');

                return $carry + $amount;
            }, 0);

        $totalDepositPaid = $sumRV + $sumJV;
        return response()->json([
            'success' => true,
            'list' => $totalDepositPaid
        ]);
    }
    public function voidSalesOrder(Request $request){
        DB::beginTransaction();

        try {
            if (!$request->has('details') || empty($request->details)) {
                return response()->json([
                    'token'   => 'Error',
                    'message' => 'No details found.',
                    'action'  => 'update'
                ]);
            }

            foreach ($request->details as $list) {
                // Ensure $list is an array (in case it's a JSON string)
                if (is_string($list)) {
                    $list = json_decode($list, true);
                }

                if (!is_array($list) || !isset($list['so_number'])) {
                    throw new \Exception('Invalid SO detail format.');
                }

                $so_number = $list['so_number'];

                Sales_order_master::where('so_number', $so_number)
                    ->update(['invoice_status_id' => 5]);

                // Call logAction from a service, not controller
                app(GlobalController::class)->logAction(
                    'Sales Order',
                    't_so_master',
                    'void',
                    'Void SO Number: ' . $so_number
                );
            }

            // Fire related events
            event(new CustInvoiceEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit();

            return response()->json([
                'token'   => 'Success',
                'message' => 'Successfully Voided',
                'action'  => 'update'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();

            return response()->json([
                'token'   => 'Error',
                'message' => $e->getMessage(),
                'action'  => 'update'
            ]);
        }
    }
    public function cancelDepositPaid(Request $request){
        $row_arrays = $request->input('row_arrays');
        $type = $request->input('type');
        $token = $request->input('token');

        DB::beginTransaction();

        try {
            $resultArray = [];
            foreach($row_arrays as $row){

                $so_number = $row['so_number'];
                $ids = $row['order_id'];

                $order = Orders::with(['product', 'customer'])->whereIn('id', $ids)->first();
                $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
                $customerCurrency = $order->currency;
                $operator = Operator::where('convertion', $customerCurrency . $baseCurrency)->value('operator') ?? '';

                $request2 = new Request([
                    'currency' => $order->currency,
                    'basecurrency' => $baseCurrency
                ]);

                $globalController = new GlobalController();
                $globalResponse = $globalController->getCurrentExRate($request2);
                $global = $globalResponse->getData();

                $totalPaidRVJV = 0;
                $baseTotalPaidRVJV = 0;

                foreach ($ids as $id) {
                    $sumRV = Receive_voucher_detail::where('order_id', $id)->sum('amount');
                    $sumJV = Payment_orders_cn::where('order_id', $id)->get()
                        ->groupBy('order_id')
                        ->reduce(function ($carry, $group) {
                            $amount = $group->contains('is_combined', 1)
                                ? $group->where('is_combined', 1)->max('payment_order')
                                : $group->where('is_combined', 0)->sum('payment_order');

                            return $carry + $amount;
                        }, 0);

                    $singleOrder = Orders::find($id); // renamed to avoid conflict

                    $totalAmount = $sumRV + $sumJV;
                    $resultArray[] = [
                        'order_id' => $id,
                        'product_id' => $singleOrder->product_id,
                        'totalAmount' => $totalAmount,
                    ];

                    $totalPaidRVJV += $totalAmount;
                }

                if ($baseCurrency == $customerCurrency) {
                    $baseTotalPaidRVJV = $totalPaidRVJV;
                } else {
                    if ($operator === "Divide") {
                        $baseTotalPaidRVJV = $totalPaidRVJV / $global->ex_rate;
                    } elseif ($operator === "Multiply") {
                        $baseTotalPaidRVJV = $totalPaidRVJV * $global->ex_rate;
                    }
                }
                if ($totalPaidRVJV > 0) {
                    switch ($type) {
                        case 'CTOCUST': // Credit to Customer
                            $accountCode = 21313;
                            $particulars = 'Credit to Customer~记到客户账号';
                            $AutoGenerated = new AutoGenerated();
                            $cr_number = $AutoGenerated->getNextNo("cr_number", "CRN", "t_credit_note_customer_master");

                            $insertMaster = [
                                'cr_status_id' => 7,
                                'customer_id' => $order->customer_id,
                                'amount' => $totalPaidRVJV,
                                'base_amount' => $baseTotalPaidRVJV,
                                'cr_number' => $cr_number,
                                'cr_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $customerCurrency,
                                'account_code' => $accountCode,
                                'particulars' => $particulars,
                            ];

                            Credit_note_customer::create($insertMaster);

                            foreach ($resultArray as $list) {
                                $amount = $list['totalAmount'];
                                $baseAmount = ($baseCurrency === $customerCurrency)
                                    ? $amount
                                    : ($operator === "Divide"
                                        ? $amount / $global->ex_rate
                                        : $amount * $global->ex_rate);

                                Credit_note_customer_detail::create([
                                    'account_code' => 21604,
                                    'customer_id' => $order->customer_id,
                                    'cr_number' => $cr_number,
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $customerCurrency,
                                    'remarks' => 'Credit Note (Cancelled Order)',
                                    'cr_date' => date('M d Y'),
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'product_id' => $list['product_id'],
                                    'order_id' => $list['order_id'],
                                ]);
                            }

                        break;
                        case 'NRTOMI': // Misc Income
                            $accountCode = Accounting_settings::where('chart_fix_code', 'CUSTDEP')->value('account_code');
                            General_ledger::create([
                                'account_code' => $accountCode,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $customerCurrency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $order->customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => $baseTotalPaidRVJV,
                                'credit' => 0,
                            ]);
                            General_ledger::create([
                                'account_code' => 70001,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $customerCurrency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $order->customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => 0,
                                'credit' => $baseTotalPaidRVJV,
                            ]);
                            foreach ($resultArray as $list) {
                                $orderId = $list['order_id'];
                                $paymentOrders = Payment_orders_cn::where('order_id', $orderId)->get();
                                foreach ($paymentOrders as $payment) {
                                    $accountCustomer = $payment->accountCustomerCn;
                                    if ($accountCustomer) {
                                        $accountCustomer->update([
                                            'account_code' => 70001,
                                            'particulars' => 'Non-refundable deposit due to cancellation~订单取消订金不退协议',
                                            'ref_data'    => 'Cancelled Order',
                                        ]);
                                    }
                                }
                            }
                        break;
                        case 'RPTOC': // REFUND TO CUSTOMER
                            $accountCode = Accounting_settings::where('chart_fix_code', 'MISCINCOME')->value('account_code');
                            $AutoGenerated = new AutoGenerated();
                            $pv_number = $AutoGenerated->getNextNo("pv_number", "PV", "t_pv_master");
                            $bank = Receive_voucher_master::where('customer_id', $order->customer_id)->value('bank');

                            $insertMaster = [
                                'pv_number' => $pv_number,
                                'pv_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $customerCurrency,
                                'pv_status_id' => 7,
                                'payment_type_id' => 3,
                                'pay_to_en' => '',
                                'pay_to_cn' => '',
                                'customer_id' => $order->customer_id,
                                'total_amount' => $totalPaidRVJV,
                                'base_total_amount' => $baseTotalPaidRVJV,
                                'sub_total' => $totalPaidRVJV,
                                'base_sub_total' => $baseTotalPaidRVJV,
                                'bank' => $bank
                            ];
                            Payment_voucher_master::create($insertMaster);
                            foreach ($resultArray as $list) {
                                $amount = $list['totalAmount'];
                                $baseAmount = ($baseCurrency === $customerCurrency)
                                    ? $amount
                                    : ($operator === "Divide"
                                        ? $amount / $global->ex_rate
                                        : $amount * $global->ex_rate);

                                Payment_voucher_detail::create([
                                    'account_code' => 21602,
                                    'product_id' => $list['product_id'],
                                    'ref_data' => $list['order_id'],
                                    'account_no' => '',
                                    'ap_invoice_no' => '',
                                    'pv_number' => $pv_number,
                                    'pv_date' => date('M d Y'),
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $customerCurrency,
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'payment_type_id' => 3,
                                    'qty' => 0,
                                ]);
                            }
                        break;
                        case 'PREORDER':
                            foreach ($resultArray as $list) {
                                $order_id = $list['order_id'];
                                Orders::where('id', $list)->update(['show_category' => 'orders', 'allocated_qty' => 0]);
                            }
                        break;
                    }
                }
                if($token == 'full'){
                    Sales_order_master::where('so_number', $so_number)->update(['invoice_status_id' => 5]);
                }
                $globalController = new GlobalController();
                $globalController->logAction(
                    'Sales Order', 't_so_master',
                    'void',
                    'Void SO Number : ' . $so_number
                );
            }

            event(new InventoryEvent( 'void'));
            event(new SOEvent( 'void'));
            event(new AllocationEvent( 'void'));
            event(new CustomerEvent( 'void'));
            event(new PreorderEvent( 'void'));
            event(new ProductEvent( 'void'));
            event(new LogEvent( 'void'));

            DB::commit();

            return response()->json([
                'token' => 'Success',
                'message' => 'Successfully Voided'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Transaction failed: ' . $e->getMessage(),
                'action'    => 'Delete'
            ]);

        }
    }
    public function voidSelectedItem($groupedOrders,$so_number){
        DB::beginTransaction();
        try {
            $resultArray = [];
            foreach ($groupedOrders as $type => $orderIds) {
                $ids = $orderIds;

                $order = Orders::with(['product', 'customer'])->whereIn('id', $ids)->first();
                $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
                $customerCurrency = $order->currency;
                $operator = Operator::where('convertion', $customerCurrency . $baseCurrency)->value('operator') ?? '';

                $request2 = new Request([
                    'currency' => $order->currency,
                    'basecurrency' => $baseCurrency
                ]);

                $globalController = new GlobalController();
                $globalResponse = $globalController->getCurrentExRate($request2);
                $global = $globalResponse->getData();

                $totalPaidRVJV = 0;
                $baseTotalPaidRVJV = 0;

                foreach ($ids as $id) {
                    $sumRV = Receive_voucher_detail::where('order_id', $id)->sum('amount');
                    $sumJV = Payment_orders_cn::where('order_id', $id)->get()
                        ->groupBy('order_id')
                        ->reduce(function ($carry, $group) {
                            $amount = $group->contains('is_combined', 1)
                                ? $group->where('is_combined', 1)->max('payment_order')
                                : $group->where('is_combined', 0)->sum('payment_order');

                            return $carry + $amount;
                        }, 0);

                    $singleOrder = Orders::find($id); // renamed to avoid conflict

                    $totalAmount = $sumRV + $sumJV;
                    $resultArray[] = [
                        'order_id' => $id,
                        'product_id' => $singleOrder->product_id,
                        'totalAmount' => $totalAmount,
                    ];

                    $totalPaidRVJV += $totalAmount;
                }

                if ($baseCurrency == $customerCurrency) {
                    $baseTotalPaidRVJV = $totalPaidRVJV;
                } else {
                    if ($operator === "Divide") {
                        $baseTotalPaidRVJV = $totalPaidRVJV / $global->ex_rate;
                    } elseif ($operator === "Multiply") {
                        $baseTotalPaidRVJV = $totalPaidRVJV * $global->ex_rate;
                    }
                }
                if ($totalPaidRVJV > 0) {
                    switch ($type) {
                        case 'CTOCUST': // Credit to Customer
                            $accountCode = 21313;
                            $particulars = 'Credit to Customer~记到客户账号';
                            $AutoGenerated = new AutoGenerated();
                            $cr_number = $AutoGenerated->getNextNo("cr_number", "CRN", "t_credit_note_customer_master");

                            $insertMaster = [
                                'cr_status_id' => 7,
                                'customer_id' => $order->customer_id,
                                'amount' => $totalPaidRVJV,
                                'base_amount' => $baseTotalPaidRVJV,
                                'cr_number' => $cr_number,
                                'cr_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $customerCurrency,
                                'account_code' => $accountCode,
                                'particulars' => $particulars,
                            ];

                            Credit_note_customer::create($insertMaster);

                            foreach ($resultArray as $list) {
                                $amount = $list['totalAmount'];
                                $baseAmount = ($baseCurrency === $customerCurrency)
                                    ? $amount
                                    : ($operator === "Divide"
                                        ? $amount / $global->ex_rate
                                        : $amount * $global->ex_rate);

                                Credit_note_customer_detail::create([
                                    'account_code' => 21604,
                                    'customer_id' => $order->customer_id,
                                    'cr_number' => $cr_number,
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $customerCurrency,
                                    'remarks' => 'Credit Note (Cancelled Order)',
                                    'cr_date' => date('M d Y'),
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'product_id' => $list['product_id'],
                                    'order_id' => $list['order_id'],
                                ]);
                            }

                        break;
                        case 'NRTOMI': // Misc Income
                            $accountCode = Accounting_settings::where('chart_fix_code', 'CUSTDEP')->value('account_code');
                            General_ledger::create([
                                'account_code' => $accountCode,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $customerCurrency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $order->customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => $baseTotalPaidRVJV,
                                'credit' => 0,
                            ]);
                            General_ledger::create([
                                'account_code' => 70001,
                                'transaction_date' => date('M d Y'),
                                'acc_table' => 'order',
                                'acc_table_id' => '',
                                'currency' => $customerCurrency,
                                'ex_rate' => $global->ex_rate,
                                'customer_id' => $order->customer_id,
                                'ref_data' => 'Cancelled Order',
                                'amount' => $totalPaidRVJV,
                                'debit' => 0,
                                'credit' => $baseTotalPaidRVJV,
                            ]);
                            foreach ($resultArray as $list) {
                                $orderId = $list['order_id'];
                                $paymentOrders = Payment_orders_cn::where('order_id', $orderId)->get();
                                foreach ($paymentOrders as $payment) {
                                    $accountCustomer = $payment->accountCustomerCn;
                                    if ($accountCustomer) {
                                        $accountCustomer->update([
                                            'account_code' => 70001,
                                            'particulars' => 'Non-refundable deposit due to cancellation~订单取消订金不退协议',
                                            'ref_data'    => 'Cancelled Order',
                                        ]);
                                    }
                                }
                            }
                        break;
                        case 'RPTOC': // REFUND TO CUSTOMER
                            $accountCode = Accounting_settings::where('chart_fix_code', 'MISCINCOME')->value('account_code');
                            $AutoGenerated = new AutoGenerated();
                            $pv_number = $AutoGenerated->getNextNo("pv_number", "PV", "t_pv_master");
                            $bank = Receive_voucher_master::where('customer_id', $order->customer_id)->value('bank');

                            $insertMaster = [
                                'pv_number' => $pv_number,
                                'pv_date' => date('M d Y'),
                                'ex_rate' => $global->ex_rate,
                                'currency' => $customerCurrency,
                                'pv_status_id' => 7,
                                'payment_type_id' => 3,
                                'pay_to_en' => '',
                                'pay_to_cn' => '',
                                'customer_id' => $order->customer_id,
                                'total_amount' => $totalPaidRVJV,
                                'base_total_amount' => $baseTotalPaidRVJV,
                                'sub_total' => $totalPaidRVJV,
                                'base_sub_total' => $baseTotalPaidRVJV,
                                'bank' => $bank
                            ];
                            Payment_voucher_master::create($insertMaster);
                            foreach ($resultArray as $list) {
                                $amount = $list['totalAmount'];
                                $baseAmount = ($baseCurrency === $customerCurrency)
                                    ? $amount
                                    : ($operator === "Divide"
                                        ? $amount / $global->ex_rate
                                        : $amount * $global->ex_rate);

                                Payment_voucher_detail::create([
                                    'account_code' => 21602,
                                    'product_id' => $list['product_id'],
                                    'ref_data' => $list['order_id'],
                                    'account_no' => '',
                                    'ap_invoice_no' => '',
                                    'pv_number' => $pv_number,
                                    'pv_date' => date('M d Y'),
                                    'ex_rate' => $global->ex_rate,
                                    'currency' => $customerCurrency,
                                    'amount' => $amount,
                                    'base_amount' => $baseAmount,
                                    'payment_type_id' => 3,
                                    'qty' => 0,
                                ]);
                            }
                        break;
                        case 'PREORDER':
                            foreach ($resultArray as $list) {
                                $order_id = $list['order_id'];
                                Orders::where('id', $list)->update(['show_category' => 'orders', 'allocated_qty' => 0]);
                            }
                        break;
                    }

                    foreach ($resultArray as $list) {
                        $product_code = Products::where('id',$list['product_id'])->value('product_code');
                        $globalController = new GlobalController();
                        $globalController->logAction(
                            'Sales Order', 't_so_master',
                            'void',
                            'Void SO Number : ' . $so_number . ' - Product Code : ' . $product_code
                        );
                    }
                }
            }

            event(new InventoryEvent( 'void'));
            event(new SOEvent( 'void'));
            event(new AllocationEvent( 'void'));
            event(new CustomerEvent( 'void'));
            event(new PreorderEvent( 'void'));
            event(new ProductEvent( 'void'));
            event(new LogEvent( 'void'));

            DB::commit();

            return response()->json([
                'token' => 'Success',
                'message' => 'Successfully Voided'
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Transaction failed: ' . $e->getMessage(),
                'action'    => 'Delete'
            ]);

        }
    }
    public function getCustomerInfoByCode($customer_code,$action){

        if($action === 'enter'){
            $customer = Customer::with(['salesPerson'])->where('customer_code', 'like', "%{$customer_code}%")->get();
        }
        else{
            $customer = Customer::with(['salesPerson'])->where('customer_code',$customer_code)->get();
        }

        $count = $customer->count();
        if ($count === 0) {
            return response()->json([
                'success' => true,
                'token'   => 'CustomerNotExists',
                'message' => 'Customer Code is not exists',
                'list'    => [],
            ]);
        }
        if ($count > 1) {
            return response()->json([
                'success' => true,
                'token'   => 'MultipleCustomer',
                'message' => 'Multiple Customer',
                'list'    => [],
            ]);
        }
        $customer = $customer->first(); // 🔑 get the model from the collection
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $ex_rate = GlobalController::getCurrentDateExRate($customer->currency, $baseCurrency);
      
        $account_name_en = $customer->account_name_en;
        $account_name_cn = $customer->account_name_cn;
        $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);

        $billing_address_en = $customer->billing_address_en;
        $billing_address_cn = $customer->billing_address_cn;
        $billing_address_cn = ($billing_address_cn === '' ? $billing_address_en : $billing_address_cn);

        $delivery_address_en = $customer->delivery_address_en;
        $delivery_address_cn = $customer->delivery_address_cn;
        $delivery_address_cn = ($delivery_address_cn === '' ? $delivery_address_en : $delivery_address_cn);

        $countExists = Sales_order_master::where('customer_id', $customer->id)
            ->where('invoice_status_id', 2)
            ->first();

        $existsSOID = $countExists ? $countExists->id : 0;
        $list = [
            'customer_id'           => $customer->id,
            'customer_code'         => $customer->customer_code,
            'account_name_en'       => $account_name_en,
            'account_name_cn'       => $account_name_cn,
            'billing_address_en'    => $billing_address_en,
            'billing_address_cn'    => $billing_address_cn,
            'delivery_address_en'   => $delivery_address_en,
            'delivery_address_cn'   => $delivery_address_cn,
            'currency'              => $customer->currency,
            'preferred_shipping_id' => $customer->preferred_shipping_id,
            'shipping_terms_id'     => $customer->shipping_terms_id,
            'payment_terms_id'      => $customer->payment_terms_id,
            'sales_person_id'       => $customer->sales_person_id,
            'sales_person_name'     => $customer->salesPerson->fullname ?? '',
            'tax_group'             => $customer->tax_group,
            'ex_rate'               => $ex_rate,
            'existsSOID'            => $existsSOID,
        ];

        return response()->json([
            'success' => true,
            'token'   => 'Success',
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function getProductByInventory(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');
        $sortId = $request->input('sortId', []);
        $prodType = $request->input('prodType','Products');

        if($prodType === "Products"){
            // If sortId is not an array, convert it to an array
            if (!is_array($sortId)) {
                $sortId = explode(',', $sortId);  // Convert comma-separated string to array
            }

            $query = Inventory_tblmaster::with(['product','whList'])
                ->whereNotNull('product_id')
                ->whereRaw('qty - allocated_qty > 0');

            if ($search) {
                $query->where(function ($q) use ($search) {
                    $q->where('warehouse', 'like', "%{$search}%")
                    ->orWhereHas('product', function ($q) use ($search) {
                        $q->where('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%")
                            ->orWhere('product_code', 'like', "%{$search}%");
                    });
                });
            }

            // If 'sortId' is provided, modify the order query to prioritize these IDs
            // Apply custom sort if provided
            if (!empty($sortId)) {
                $query->orderByRaw("FIELD(id, " . implode(',', $sortId) . ") DESC")
                    ->orderByDesc('id');
            } else {
                $query->orderByDesc('id');
            }
        }
        else{
            $query = Product_services::where('is_deleted',0)->orderBy('id', 'desc');
            if ($search) {
                $query->where(function ($q) use ($search) {
                    $q->where('service_code', 'like', "%{$search}%")
                        ->orWhere('description_en', 'like', "%{$search}%")
                        ->orWhere('description_cn', 'like', "%{$search}%");
                });
            }
        }

        $results = $query->get(); // ✅ Only call get() at the end

        // 📌 Handle perPage = -1 (return all data)
        if ($perPage === -1) {
            $data = $query->get();
            $result = [
                'current_page' => 1,
                'data'         => $data->map(function ($item) {
                    $product_code = $item->product->product_code ?? '';
                    if($product_code != ''){
                        $qty = $item->qty - $item->allocated_qty;
                    }
                    else{
                        $qty = 1;
                    }
                    return [
                        'id'                => $item->id,
                        'warehouse'         => $item->warehouse ?? '',
                        'product_id'        => $item->product->id ?? $item->id,
                        'product_code'      => $item->product->product_code ?? $item->service_code,
                        'product_title_en'  => $item->product->product_title_en ?? $item->description_en,
                        'product_title_cn'  => $item->product->product_title_cn ?? $item->description_cn,
                        'product_thumbnail' => $item->product->product_thumbnail ?? '',
                        'item_cost'         => $item->product->item_cost ?? 0,
                        'warehouse_en'      => $item->whList->warehouse_en ?? '',
                        'warehouse_cn'      => $item->whList->warehouse_cn ?? '',
                        'qty'               => $qty,
                        'new_qty'           => 0
                    ];
                }),
                'last_page'    => 1,
                'per_page'     => $data->count(),
                'total'        => $data->count(),
            ];
        } else {
            $result = $query->paginate($perPage);

            // Transform only the `data` part
            $result->getCollection()->transform(function ($item) {
                $product_code = $item->product->product_code ?? '';
                if($product_code != ''){
                    $qty = $item->qty - $item->allocated_qty;
                }
                else{
                    $qty = 1;
                }
                return [
                    'id'                => $item->id,
                    'warehouse'         => $item->warehouse ?? '',
                    'product_id'        => $item->product->id ?? $item->id,
                    'product_code'      => $item->product->product_code ?? $item->service_code,
                    'product_title_en'  => $item->product->product_title_en ?? $item->description_en,
                    'product_title_cn'  => $item->product->product_title_cn ?? $item->description_cn,
                    'product_thumbnail' => $item->product->product_thumbnail ?? '',
                    'item_cost'         => $item->product->item_cost ?? 0,
                    'warehouse_en'      => $item->whList->warehouse_en ?? '',
                    'warehouse_cn'      => $item->whList->warehouse_cn ?? '',
                    'qty'               => $qty,
                    'new_qty'           => 0
                ];
            });
        }

        return response()->json([
            'success' => true,
            'message' => 'success',
            'product' => $result,
        ]);
    }
    public function doGetPrice($customer_id, $qty, $product_id){
        $price = 0;

        $orders = Orders::where('product_id', $product_id)
            ->where('show_category','orders')
            ->where('customer_id', $customer_id);
        $qtySum = $orders->sum('qty');
        $firstId = $orders->value('id') ?? 0; // gets first matching ID, or 0

        // Get customer's group
        $customer = Customer::where('id', $customer_id)->first();
        $grn_detail = Grn_details::where('product_id', $product_id)
            ->orderBy('id', 'desc')
            ->first();

        $customer_group_id = Customer_group_list::where('customer_id',$customer->id)->value('customer_group_id');

        if (!$customer) {
            return response()->json([
                'price' => 0,
                'grn_detail_id' => $grn_detail->id,
                'grn_no' => $grn_detail->grn_no,
                'order_qty' => $qtySum,
                'order_id' => $firstId,
            ]);
        }
        // Get price setup for this product and customer group
        $priceSetup = Price_setup::where('product_id', $product_id)
            ->where('customer_group_id', $customer_group_id)
            ->first();

        if (!$priceSetup) {
            return response()->json([
                'price' => 0,
                'grn_detail_id' => $grn_detail->id,
                'grn_no' => $grn_detail->grn_no,
                'order_qty' => $qtySum,
                'order_id' => $firstId,
            ]);
        }

        // Apply price logic in PHP (equivalent to CASE in SQL)
        if ($qty >= $priceSetup->price_a_pcs_crtn) {
            $price = $priceSetup->price_a;
        } elseif ($qty >= $priceSetup->price_b_pcs_crtn && $qty <= $priceSetup->price_b_to_pcs_crtn) {
            $price = $priceSetup->price_b;
        } else {
            $price = $priceSetup->price_c;
        }

        return response()->json([
            'price' => $price,
            'grn_detail_id' => $grn_detail->id,
            'grn_no' => $grn_detail->grn_no,
            'order_qty' => $qtySum,
            'order_id' => $firstId,
        ]);
    }
    public function updateSalesOrder(Request $request, $id){
        $OrigID = $id;
        $GlobalTableNo = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');
        $product_ids = $request->product_ids;

        $countCustomer = $this->getCountExistCustomer($request->customer_code);
        if($countCustomer === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Customer Account does not exist',
                'id'        => $id,
                'action'    => $Action
            ]);
        }

        if($request->ex_rate === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Exchange Rate is Required',
                'action'    => 'Insert'
            ]);
        }

        if ($request->has('product_ids')) {
            // ✅ Get the raw input (as string or array)
            $product_ids_raw = $request->input('product_ids');

            // ✅ Decode if it's a JSON string
            $product_ids = is_string($product_ids_raw)
                ? json_decode($product_ids_raw, true)
                : $product_ids_raw;

            // ✅ Check if products exist in orders
            $countOrders = Orders::where('customer_id', $request->customer_id)
                ->whereIn('product_id', $product_ids)
                ->count();

            if ($countOrders > 0) {
                return response()->json([
                    'token'   => 'Warning',
                    'message' => 'Products are under Preorder',
                    'id'      => $id ?? null,
                    'action'  => $Action ?? null,
                ]);
            }
        }

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            if ((int) $id === 0) {
                $AutoGenerated = new AutoGenerated();
                $so_number = $AutoGenerated->getNextNo("so_number","SO","t_so_master");
                $inserMaster = [
                    'so_number'         => $so_number,
                    'cnt_products'      => $request->cnt_products,
                    'customer_id'       => $request->customer_id,
                    'ex_rate'           => $request->ex_rate,
                    'tax'               => $request->tax,
                    'currency'          => $request->currency,
                    'sales_person_id'   => $request->sales_person_id,
                    'shipping_stat_id'  => $request->shipping_stat_id,
                    'so_date'           => $request->so_date,
                    'invoice_status_id' => $request->invoice_status_id,
                    'invoice_type'      => $request->invoice_type,
                    'delivery_date'     => $request->delivery_date ?? '',
                    'due_date'          => $request->due_date ?? '',
                    'payment_terms_id'  => $request->payment_terms_id,
                    'credit_used'       => $request->credit_used,
                    'base_credit_used'  => $request->base_credit_used,
                    'current_credit'    => $request->current_credit,
                    'base_current_credit'   => $request->base_current_credit,
                    'total_deposit'     => $request->total_deposit,
                    'base_total_deposit'    => $request->base_total_deposit,
                    'sub_total'         => $request->sub_total,
                    'base_sub_total'    => $request->base_sub_total,
                    'tax_amount'        => $request->tax_amount,
                    'base_tax_amount'   => $request->base_tax_amount,
                    'total'             => $request->total,
                    'base_total'        => $request->base_total,
                    'total_to_pay'      => $request->total_to_pay,
                    'base_total_to_pay' => $request->base_total_to_pay,
                    'cr_amount'         => $request->cr_amount,
                    'base_cr_amount'    => $request->base_cr_amount,
                    'adv_amount'        => $request->adv_amount,
                    'base_adv_amount'   => $request->base_adv_amount,
                    'excess_amount'     => $request->excess_amount,
                    'base_excess_amount'    => $request->base_excess_amount,
                    'total_deduction'   => $request->total_deduction,
                    'base_total_deduction'  => $request->base_total_deduction,
                    'sub_total_on_cost' => $request->sub_total_on_cost,
                ];
                $master = Sales_order_master::create($inserMaster);
                $OrigID = $master->id;
                $GlobalTableNo = $so_number;
            }
            else{
                $master = Sales_order_master::find($request['id']);
                if ($master) {
                    $master->so_number = $request->so_number;
                    $master->cnt_products = $request->cnt_products;
                    $master->customer_id = $request->customer_id;
                    $master->ex_rate = $request->ex_rate;
                    $master->tax = $request->tax;
                    $master->currency = $request->currency;
                    $master->sales_person_id = $request->sales_person_id;
                    $master->shipping_stat_id = $request->shipping_stat_id;
                    $master->so_date = $request->so_date;
                    $master->invoice_status_id = $request->invoice_status_id;
                    $master->invoice_type = $request->invoice_type;
                    $master->delivery_date = $request->delivery_date ?? '';
                    $master->due_date = $request->due_date ?? '';
                    $master->payment_terms_id = $request->payment_terms_id;
                    $master->credit_used = $request->credit_used;
                    $master->base_credit_used = $request->base_credit_used;
                    $master->current_credit = $request->current_credit;
                    $master->base_current_credit = $request->base_current_credit;
                    $master->total_deposit = $request->total_deposit;
                    $master->base_total_deposit = $request->base_total_deposit;
                    $master->sub_total = $request->sub_total;
                    $master->base_sub_total = $request->base_sub_total;
                    $master->tax_amount = $request->tax_amount;
                    $master->base_tax_amount = $request->base_tax_amount;
                    $master->total = $request->total;
                    $master->base_total = $request->base_total;
                    $master->total_to_pay = $request->total_to_pay;
                    $master->base_total_to_pay = $request->base_total_to_pay;
                    $master->cr_amount = $request->cr_amount;
                    $master->base_cr_amount = $request->base_cr_amount;
                    $master->adv_amount = $request->adv_amount;
                    $master->base_adv_amount = $request->base_adv_amount;
                    $master->excess_amount = $request->excess_amount;
                    $master->base_excess_amount = $request->base_excess_amount;
                    $master->total_deduction = $request->total_deduction;
                    $master->base_total_deduction = $request->base_total_deduction;
                    $master->sub_total_on_cost = $request->sub_total_on_cost;
                    $master->save();
                }
                $GlobalTableNo = $master->so_number;
            }
            $is_delete_array = [];
            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }
                    $base_total = 0;
                    if($baseCurrency != $currency){
                        $base_total = (float) $list['total'];
                    }
                    else{
                        if($operator === 'Divide'){
                            $base_total = (float) $list['total'] / (float) $request->ex_rate;
                        }
                        if($operator === 'Multiply'){
                            $base_total = (float) $list['total'] * (float) $request->ex_rate;
                        }
                    }

                    $recordID = $list['id'];
                    $detail_id = 0;

                    if ((int) $list['is_deleted'] === 1) {
                        if($list['delete_type']){
                            $is_delete_array[] = [
                                'order_id' => $list['order_id'],
                                'so_number' => $GlobalTableNo,
                                'type' => $list['delete_type'],
                            ];
                        }
                        $detail = Sales_order_detail::find($recordID);
                        if ($detail) {
                            $detail->delete(); // ✅ Triggers observer
                        }
                    }
                    if((int) $list['is_deleted'] === 0){
                        if ((int) $recordID === 0) {
                            $allocation_id = 0;
                            if($list['alloc_type'] === 'Manual'){
                                $alloc = Inventory_allocation::create([
                                    'customer_id' => $request->customer_id,
                                    'qty' => $list['qty'],
                                    'allocated_qty' => 0,
                                    'currency' => $request->currency,
                                    'price' => $list['price'],
                                    'total' => $list['total'],
                                    'product_id' => $list['product_id'],
                                    'pod' => $list['warehouse'],
                                    'warehouse' => $list['warehouse'],
                                    'sales_person_id' => $request->sales_person_id,
                                    'so_number' => $GlobalTableNo,
                                    'grn_detail_id' => $list['grn_detail_id'],
                                    'grn_no' => $list['grn_no'],
                                ]);
                                $allocation_id = $alloc->id;
                            }
                            else{
                                $alloc = Inventory_allocation::create([
                                    'customer_id' => $request->customer_id,
                                    'qty' => $list['qty'],
                                    'allocated_qty' => 0,
                                    'currency' => $request->currency,
                                    'price' => $list['price'],
                                    'total' => $list['total'],
                                    'deposit' => $list['deposit'],
                                    'product_id' => $list['product_id'],
                                    'pod' => $list['warehouse'],
                                    'warehouse' => $list['warehouse'],
                                    'sales_person_id' => $request->sales_person_id,
                                    'so_number' => $GlobalTableNo,
                                    'grn_detail_id' => $list['grn_detail_id'],
                                    'order_id' => $list['order_id'],
                                    'grn_no' => $list['grn_no'],
                                ]);
                                $allocation_id = $alloc->id;
                            }
                            $insertDetail = [
                                'so_number' => $GlobalTableNo,
                                'so_date' => $request->so_date,
                                'product_type' => $list['product_type'],
                                'item_cost' => $list['item_cost'],
                                'product_id' => ($list['product_id'] === 0 ? null : $list['product_id']),
                                'service_id' => ($list['service_id'] === 0 ? null : $list['service_id']),
                                'deposit' => $list['deposit'],
                                'qty' => $list['qty'],
                                'price' => $list['price'],
                                'total' => $list['total'],
                                'base_total' => $base_total,
                                'so_date' => $request->so_date,
                                'ex_rate' => $request->ex_rate,
                                'customer_id' => $request->customer_id,
                                'invoice_status_id' => $request->invoice_status_id,
                                'currency' => $request->currency,
                                'allocated_id' => ($allocation_id === 0 ? null : $allocation_id),
                                'grn_detail_id' => ($list['grn_detail_id'] === 0 ? null : $list['grn_detail_id']),
                                'sales_person_id' => $request->sales_person_id,
                                'order_id' => ($list['order_id'] === 0 ? null : $list['order_id']),
                                'alloc_type' => $list['alloc_type'],
                                'warehouse' => $list['warehouse'],
                                'particular' => $list['particular'],
                                'delivery_date' => $request->delivery_date,
                                'due_date' => $request->due_date,
                                'remarks' => ''
                            ];
                            $detail = Sales_order_detail::create($insertDetail);
                            $detail_id = $detail->id;
                        }
                        else{
                            if($list['alloc_type'] === "Manual"){
                                $allocation = Inventory_allocation::where('id',$list['allocated_id'])->first();
                                if($allocation){
                                    $allocation->customer_id = $request->customer_id;
                                    $allocation->qty = $list['qty'];
                                    $allocation->currency = $request->currency;
                                    $allocation->price = $list['price'];
                                    $allocation->total = $list['total'];
                                    $allocation->pod = $list['warehouse'];
                                    $allocation->sales_person_id = $request->sales_person_id;
                                    $allocation->warehouse = $list['warehouse'];
                                    $allocation->so_number = $GlobalTableNo;
                                    $allocation->grn_detail_id = ($list['grn_detail_id'] === 0 ? null : $list['grn_detail_id']);
                                    $allocation->grn_no = ($list['grn_no'] === '' ? null : $list['grn_no']);
                                    $detail->save();
                                }
                            }
                            $detail = Sales_order_detail::find($list['id']);
                            if ($detail) {

                                $allocated_id = ($list['allocated_id'] === 0 ? null : $list['allocated_id']);
                                $grn_detail_id = ($list['grn_detail_id'] === 0 ? null : $list['grn_detail_id']);
                                $order_id = ($list['order_id'] === 0 ? null : $list['order_id']);
                                $product_id = ($list['product_id'] === 0 ? null : $list['product_id']);
                                $service_id = ($list['service_id'] === 0 ? null : $list['service_id']);

                                if($detail->qty != $list['qty']){
                                    $this->updateOrderDetails($allocated_id,$order_id,$list['qty'],$list['deposit'],$request->ex_rate,$request->currency,$baseCurrency);
                                }
                                $detail->product_type = $list['product_type'];
                                $detail->item_cost = $list['item_cost'];
                                $detail->product_id = $product_id;
                                $detail->service_id = $service_id;
                                $detail->deposit = $list['deposit'];
                                $detail->qty = $list['qty'];
                                $detail->price = $list['price'];
                                $detail->total = $list['total'];
                                $detail->base_total = $base_total;
                                $detail->so_date = $request->so_date;
                                $detail->ex_rate = $request->ex_rate;
                                $detail->customer_id = $request->customer_id;
                                $detail->invoice_status_id = $request->invoice_status_id;
                                $detail->currency = $request->currency;
                                $detail->allocated_id = $allocated_id;
                                $detail->grn_detail_id = $grn_detail_id;
                                $detail->sales_person_id = $request->sales_person_id;
                                $detail->order_id = $order_id;
                                $detail->alloc_type = $list['alloc_type'];
                                $detail->warehouse = $list['warehouse'];
                                $detail->particular = $list['particular'];
                                $detail->delivery_date = $request->delivery_date;
                                $detail->due_date = $request->due_date;
                                $detail->remarks = '';
                                $detail->save();
                                $detail_id = $detail->id;
                            }
                        }
                    }
                }   
                if(count($is_delete_array) > 0){
                    $groupedOrders = array_reduce($is_delete_array, function($carry, $order) {
                        $type = $order['type'];
                        if (!isset($carry[$type])) {
                            $carry[$type] = [];
                        }
                        $carry[$type][] = $order['order_id'];  // Add the order_id to the array for the given type
                        return $carry;
                    }, []);
                    $this->voidSelectedItem($groupedOrders,$GlobalTableNo);
                }
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Sales Order', 't_so_master',
                $Action,
                'SO No : ' . $request->so_number
            );

            event(new SOEvent($Action));
            event(new AllocationEvent($Action));
            event(new PreorderEvent($Action));
            event(new LogEvent($Action));
            event(new ProductEvent($Action));
            event(new CustomerEvent($Action));
            event(new InventoryEvent($Action));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Customer Sales Order Successfully Saved',
                'id'        => $OrigID,
                'action'    => $Action
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }
    }
    public function updateOrderDetails($allocation_id, $order_id, $qty, $deposit, $ex_rate, $currency, $base_currency){
        // 1. Update inventory_allocation
        $inventory = Inventory_allocation::findOrFail($allocation_id);
        $inventory->qty = $qty;
        $inventory->total = $inventory->price * $qty;
        $inventory->save();

        // 2. Get operator
        $conversionKey = $currency . $base_currency;
        $operator = Operator::where('convertion', $conversionKey)->value('operator');

        // 3. Calculate BaseItemDeposit
        if ($base_currency === $currency) {
            $baseItemDeposit = $deposit;
        } else {
            if ($operator === 'Divide') {
                $baseItemDeposit = $deposit / $ex_rate;
            } elseif ($operator === 'Multiply') {
                $baseItemDeposit = $deposit * $ex_rate;
            } else {
                throw new \Exception("Unknown operator: $operator");
            }
        }

        // 4. Update customerdeposit
        $customerDeposit = Customer_deposit::where('order_id', $order_id)->first();
        if ($customerDeposit) {
            $customerDeposit->qty = $qty;
            $customerDeposit->item_deposit = $deposit;
            $customerDeposit->base_item_deposit = $baseItemDeposit;
            $customerDeposit->save();
        }

        // 5. Update orders_history
        $orderHistory = Orders::find($order_id); // Assuming ID = order_id
        if ($orderHistory) {
            $orderHistory->qty = $qty;
            $orderHistory->item_deposit = $deposit;
            $orderHistory->base_item_deposit = $baseItemDeposit;
            $orderHistory->save();
        }
    }
    public function getCountExistCustomer($customer_code){
        return Customer::where('customer_code', $customer_code)->count();
    }
    public function getProductByCode($product_code, $customer_id){
        
        $orders = Orders::with('product')
            ->where('customer_id', $customer_id)
            ->where('show_category', 'orders')
            ->whereRaw('qty - allocated_qty > 0')
            ->whereHas('product', function ($query) use ($product_code) {
                $query->where('product_code', 'like', "%{$product_code}%");
            })->get();
            

        if ($orders->count() > 1) {
            return response()->json([
                'success' => true,
                'token'   => 'MultipleProducts',
                'message' => 'Multiple Products Found',
                'list'    => [],
            ]);
        }

        if ($orders->count() === 1){

            $order = $orders->first();
            $product = $order->product;

            if (!$product) {
                return response()->json([
                    'success' => true,
                    'token'   => 'ProductNotExists',
                    'message' => 'Product relation is missing',
                    'list'    => [],
                ]);
            }

            $product_title_en = $product->product_title_en ?? '';
            $product_title_cn = $product->product_title_cn ?? $product_title_en;

            $grn_detail = Grn_details::where('product_id', $product->id)->orderBy('id', 'desc')->first();
            $voucher_amount = Order_Voucher::where('voucher_no', $order->voucher_code ?? null)->value('value');

            $inventory = Inventory_tblmaster::where('product_id', $product->id)->get();
            $inventory_qty = $inventory->sum('qty');
            $inventory_allocated_qty = $inventory->sum('allocated_qty');
            $inventory_rem_qty = $inventory_qty - $inventory_allocated_qty;

            $internal = Internal_Transfer::where('product_id', $product->id)->get();
            $internal_qty = $internal->sum('qty');
            $item_deposit = ($order->order_status ?? 0) === 2 ? 0 : ($order->item_deposit ?? 0);

            $order_qty = $order->qty ?? 0;
            $allocated_qty = $order->allocated_qty ?? 0;
            $qty = $order_qty - $allocated_qty - $internal_qty;

            $list = [
                'order_id'          => $order->id ?? 0,
                'price'             => $order->price ?? 0,
                'qty'               => $qty ?? 0,
                'product_id'        => $product->id ?? 0,
                'product_code'      => $product->product_code ?? '',
                'item_cost'         => $product->item_cost ?? 0,
                'product_title_en'  => $product_title_en,
                'product_title_cn'  => $product_title_cn,
                'grn_detail_id'     => $grn_detail->id ?? 0,
                'grn_no'            => $grn_detail->grn_no ?? '',
                'voucher_amount'    => $voucher_amount ?? 0,
                'inventory_qty'     => $inventory_rem_qty ?? 0,
                'internal_qty'      => $internal_qty ?? 0,
                'item_deposit'      => $item_deposit ?? 0,
                'alloc_type'        => ""
            ];
        }
        else{
            $inventory = Inventory_tblmaster::with('product')
                ->whereRaw('qty - allocated_qty > 0')
                ->whereHas('product', function ($query) use ($product_code) {
                    $query->where('product_code', 'like', "%{$product_code}%");
                })->get();

            if ($inventory->count() > 1) {
                return response()->json([
                    'success' => true,
                    'token'   => 'MultipleProducts',
                    'message' => 'Multiple Products Found',
                    'list'    => [],
                ]);
            }
            else if($inventory->count() === 1){
                $inv = $inventory->first();
                $item_cost = Products::where('id',$inv->product_id)->value('item_cost');
                $order = Orders::where('product_id',$inv->product_id)
                    ->where('show_category','orders')
                    ->where('customer_id',$customer_id)
                    ->first();

                $order_qty = $order->qty ?? 0;

                $inventory = Inventory_tblmaster::where('product_id', $inv->id)->get();
                $inventory_qty = $inventory->sum('qty');
                $inventory_allocated_qty = $inventory->sum('allocated_qty');
                $qty = $inventory_qty - $inventory_allocated_qty;

                $alloc_type = "";
                $order_id = 0;
                $item_cost = 0;

                if($order_qty > 0){
                    if($order_qty != $qty){
                        $alloc_type = "";
                        $order_id = 0;
                        $item_cost = 0;
                    }
                    else{
                        $alloc_type = "";
                        $order_id = $order->id;
                        $item_cost = $item_cost;
                    }
                }
                else{
                    $alloc_type = "Manual";
                    $order_id = 0;
                    $item_cost = 0;
                }

                $product_title_en = $inv->product->product_title_en ?? '';
                $product_title_cn = $inv->product->product_title_cn ?? $product_title_en;

                $internal = Internal_Transfer::where('product_id', $inv->product_id)->get();
                $internal_qty = $internal->sum('qty');

                $grn_detail = Grn_details::where('product_id', $inv->product_id)->orderBy('id', 'desc')->first();

                $getPrice = $this->doGetPrice($customer_id, 1, $inv->product_id);
                $data = $getPrice->getData(); // Laravel method to extract the data from JsonResponse
                $price = $data->price; // object access

                $list = [
                    'order_id'          => $order_id ?? 0,
                    'price'             => $price ?? 0,
                    'qty'               => 1,
                    'product_id'        => $inv->product_id ?? 0,
                    'product_code'      => $inv->product->product_code ?? '',
                    'item_cost'         => $item_cost ?? 0,
                    'product_title_en'  => $product_title_en,
                    'product_title_cn'  => $product_title_cn,
                    'grn_detail_id'     => $grn_detail->id ?? 0,
                    'grn_no'            => $grn_detail->grn_no ?? '',
                    'voucher_amount'    => 0,
                    'inventory_qty'     => $qty ?? 0,
                    'internal_qty'      => $internal_qty ?? 0,
                    'item_deposit'      => 0,
                    'alloc_type'        => $alloc_type 
                ];
            }
            else{
                return response()->json([
                    'success' => true,
                    'token'   => 'ProductNotExists',
                    'message' => 'Product relation is missing',
                    'list'    => [],
                ]);
            }
        }

        return response()->json([
            'success' => true,
            'token'   => 'Success',
            'message' => 'Product Found',
            'list'    => $list,
        ]);
    }
    public function doCheckChangeDeposit($OrderID, $DepositVal, $OldDepositVal, $Typ){
        $allowedDeposit = 0;
        // Fetch deposit info
        $deposit = Customer_deposit::where('order_id', $OrderID)->first();

        if ($deposit) {
            if ($Typ === "Saved") {
                $allowedDeposit = ($deposit->item_deposit - $deposit->used_deposit) + $OldDepositVal;
            } else {
                $allowedDeposit = ($deposit->item_deposit - $deposit->used_deposit);
            }

            if ($DepositVal > $allowedDeposit) {
                return response()->json([
                    'is_bool' => false,
                    'deposit' => 0
                ]);

            } else {
                return response()->json([
                    'is_bool' => True,
                    'deposit' => $allowedDeposit
                ]);

            }
        }
    }
    public function convertToInvoice(Request $request){
        $soNumber = $request->input('soNumber');
        $salesOrder = Sales_order_master::with('salesOrderDetails')->where('so_number', $soNumber)->first();
        $existingInvoice = Invoice_master::where('so_number', $soNumber)->first();
        $invoiceNumber = "";

        DB::beginTransaction();
        try {
            if ($existingInvoice) {
                // Update existing invoice
                $existingInvoice->update([
                    'invoice_date' => date('M d Y'),
                    'invoice_type' => $salesOrder->invoice_type,
                    'payment' => $salesOrder->payment,
                    'shipping_stat_id' => $salesOrder->shipping_stat_id,
                    'current_credit' => $salesOrder->current_credit,
                    'base_current_credit' => $salesOrder->base_current_credit,
                    'credit_used' => $salesOrder->credit_used,
                    'base_credit_used' => $salesOrder->base_credit_used,
                    'due_date' => $salesOrder->due_date,
                    'payment_terms_id' => $salesOrder->payment_terms_id,
                    'delivery_date' => $salesOrder->delivery_date,
                    'sales_person_id' => $salesOrder->sales_person_id,
                    'cr_amount' => $salesOrder->cr_amount,
                    'adv_amount' => $salesOrder->adv_amount,
                    'excess_amount' => $salesOrder->excess_amount,
                    'base_cr_amount' => $salesOrder->base_cr_amount,
                    'base_adv_amount' => $salesOrder->base_adv_amount,
                    'base_excess_amount' => $salesOrder->base_excess_amount,
                    'tax_amount' => $salesOrder->tax_amount,
                    'base_tax_amount' => $salesOrder->base_tax_amount,
                    'sub_total' => $salesOrder->sub_total,
                    'base_sub_total' => $salesOrder->base_sub_total,
                    'tax_amount' => $salesOrder->tax_amount,
                    'currency' => $salesOrder->currency,
                    'ex_rate' => $salesOrder->ex_rate,
                    'total' => $salesOrder->total,
                    'base_total' => $salesOrder->base_total,
                    'total_deposit' => $salesOrder->total_deposit,
                    'base_total_deposit' => $salesOrder->base_total_deposit,
                    'total_to_pay' => $salesOrder->total_to_pay,
                    'base_total_to_pay' => $salesOrder->base_total_to_pay,
                    'total_deduction' => $salesOrder->total_deduction,
                    'base_total_deduction' => $salesOrder->base_total_deduction,
                    'voucher_amount' => $salesOrder->voucher_amount,
                    'base_voucher_amount' => $salesOrder->base_voucher_amount,
                    'base_row_total' => $salesOrder->base_total,
                    'invoice_status_id' => 2,
                ]);
                $invoiceNumber = $existingInvoice->invoice_no;
            } else {
                // Generate new invoice number
                $AutoGenerated = new AutoGenerated();
                $invoiceNumber = $AutoGenerated->getNextNo("invoice_no","INV","t_invoice_master");

                $cntProducts = $salesOrder->cnt_products ?? 0;

                Invoice_master::create([
                    'invoice_no' => $invoiceNumber,
                    'cnt_ship' => ($cntProducts == 0 ? 1 : 0),
                    'invoice_date' => date('M d Y'),
                    'invoice_type' => $salesOrder->invoice_type,
                    'payment' => $salesOrder->payment,
                    'shipping_stat_id' => $salesOrder->shipping_stat_id,
                    'current_credit' => $salesOrder->current_credit,
                    'base_current_credit' => $salesOrder->base_current_credit,
                    'credit_used' => $salesOrder->credit_used,
                    'base_credit_used' => $salesOrder->base_credit_used,
                    'due_date' => $salesOrder->due_date,
                    'payment_terms_id' => $salesOrder->payment_terms_id,
                    'delivery_date' => $salesOrder->delivery_date,
                    'sales_person_id' => $salesOrder->sales_person_id,
                    'cr_amount' => $salesOrder->cr_amount,
                    'adv_amount' => $salesOrder->adv_amount,
                    'excess_amount' => $salesOrder->excess_amount,
                    'base_cr_amount' => $salesOrder->base_cr_amount,
                    'base_adv_amount' => $salesOrder->base_adv_amount,
                    'base_excess_amount' => $salesOrder->base_excess_amount,
                    'invoice_status_id' => 2,
                    'tax_amount' => $salesOrder->tax_amount,
                    'base_tax_amount' => $salesOrder->base_tax_amount,
                    'sub_total' => $salesOrder->sub_total,
                    'base_sub_total' => $salesOrder->base_sub_total,
                    'sub_total_on_cost' => $salesOrder->sub_total_on_cost,
                    'currency' => $salesOrder->currency,
                    'ex_rate' => $salesOrder->ex_rate,
                    'total' => $salesOrder->total,
                    'base_total' => $salesOrder->base_total,
                    'total_deposit' => $salesOrder->total_deposit,
                    'base_total_deposit' => $salesOrder->base_total_deposit,
                    'total_to_pay' => $salesOrder->total_to_pay,
                    'base_total_to_pay' => $salesOrder->base_total_to_pay,
                    'total_deduction' => $salesOrder->total_deduction,
                    'base_total_deduction' => $salesOrder->base_total_deduction,
                    'voucher_amount' => $salesOrder->voucher_amount,
                    'base_voucher_amount' => $salesOrder->base_voucher_amount,
                    'base_row_total' => $salesOrder->base_total,
                    'so_number' => $salesOrder->so_number,
                    'customer_id' => $salesOrder->customer_id,
                ]);
            }

            // Insert invoice details
            foreach ($salesOrder->salesOrderDetails as $detail) {
                Invoice_detail::create([
                    'invoice_no' => $invoiceNumber,
                    'invoice_date' => date('M d Y'),
                    'product_id' => $detail->product_id,
                    'service_id' => $detail->service_id,
                    'qty' => $detail->qty,
                    'price' => $detail->price,
                    'total' => $detail->total,
                    'base_total' => $detail->base_total,
                    'deposit' => $detail->deposit,
                    'ex_rate' => $detail->ex_rate,
                    'order_id' => $detail->order_id,
                    'allocated_id' => $detail->allocated_id,
                    'grn_detail_id' => $detail->grn_detail_id,
                    'sales_person_id' => $detail->sales_person_id,
                    'currency' => $detail->currency,
                    'customer_id' => $detail->customer_id,
                    'shipping_stat_id' => $detail->shipping_stat_id,
                    'invoice_status_id' => 2,
                    'product_type' => $detail->product_type,
                    'alloc_type' => $detail->alloc_type,
                    'warehouse' => $detail->warehouse,
                    'particular' => $detail->particular,
                    'shipped_qty' => 0,
                    'on_ship_out_qty' => 0,
                    'remarks' => ''
                ]);

                Inventory_allocation::where('id',$detail->allocated_id)->update([
                    'invoice_no' => $invoiceNumber,
                    'allocated_qty' => $detail->qty,
                ]);
                Customer_deposit::where('order_id',$detail->order_id)->update([
                    'invoice_no' => $invoiceNumber,
                    'used_deposit' => $detail->deposit,
                ]);
            }

            event(new CustInvoiceEvent('insert'));
            event(new ShipmentEvent('insert'));
            event(new CustomerEvent('insert'));
            event(new SOEvent('insert'));

            DB::commit(); // Commit transaction
            return response()->json([
                'token'         => 'Success',
                'invoice_no'    => $invoiceNumber,
                'message'       => 'Has been created',
                'action'        => 'insert'
            ]);

        } catch (\Exception $e) {
            DB::rollBack(); // Rollback on error
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    =>'insert'
            ]);
        }
    }
}
