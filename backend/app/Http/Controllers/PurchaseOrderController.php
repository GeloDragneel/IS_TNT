<?php

namespace App\Http\Controllers;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use App\Models\POrder_master;
use App\Models\POrder_detail;
use App\Models\POrder_detail_copy;
use App\Models\Payment_voucher_master;
use App\Models\Payment_voucher_detail;
use App\Models\Credit_note_supplier_master;
use App\Models\Credit_note_supplier_detail;
use App\Models\Credit_supplier;
use App\Models\Products;
use App\Models\Orders;
use App\Models\Account_supplier_cn;
use App\Models\ISSettings;
use App\Models\Operator;
use App\Models\Accounting_settings;
use App\Models\Price_setup;
use App\Models\Supplier;
use App\Models\Grn_details;
use App\Models\General_ledger;
use App\Models\Accounts_payable_master;
use App\Models\Accounts_payable_details;
use App\Models\Sales_order_qty_ids;
use App\Models\Currencies;
use App\Services\AutoGenerated;
use App\Services\ProductStatusService;
use Carbon\Carbon;
use App\Http\Controllers\GlobalController;
use App\Events\POEvent;
use App\Events\PVEvent;
use App\Events\PreorderEvent;
use App\Events\LogEvent;

class PurchaseOrderController extends Controller{
    
    public function getAllPurchaseOrder(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $supplierCodes = $request->input('supplier_codes', []);
        $poStatus = $request->input('postatus', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        // Base query with eager loading
        $query = POrder_master::with([
            'supplier:id,suppliername_en,suppliername_cn,supplier_code',
            'details.product:id,product_code,product_title_en,product_title_cn',
            'detailsCopy.product:id,product_code,product_title_en,product_title_cn',
            'invoiceStatus:id,postatus_en,postatus_cn',
            'accountSupplier:id,supplier_id,cr_number',
            'bankList',
            'pvDetails',
        ])->orderByDesc('id');

        // Filters
        if (!empty($supplierCodes)) {
            $query->whereIn('supplier_id', $supplierCodes);
        }
        if (!empty($poStatus)) {
            $query->whereIn('postatus', $poStatus);
        }
        if ($categoryDates === 'PurchaseDate' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(po_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('po_number', 'like', "%{$search}%")
                    ->orWhereHas('supplier', function ($q) use ($search) {
                        $q->where('suppliername_en', 'like', "%{$search}%")
                        ->orWhere('suppliername_cn', 'like', "%{$search}%")
                        ->orWhere('supplier_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceStatus', function ($q) use ($search) {
                        $q->where('postatus_en', 'like', "%{$search}%")
                        ->orWhere('postatus_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('details.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('deposit_pv', 'like', "%{$search}%")
                        ->orWhere('invoice_pv', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();

        // Preload all supplier credits to avoid N+1
        $supplierCredits = Credit_supplier::select('supplier_id', DB::raw('SUM(COALESCE(current_credit,0)) as total_credit'))
            ->whereIn('supplier_id', $allData->pluck('supplier_id')->unique())
            ->groupBy('supplier_id')
            ->pluck('total_credit', 'supplier_id');

        // Transform all orders
        $allDataTransformed = $allData->map(fn($order) => $this->transformOrderData($order, $supplierCredits));

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];
        // Get all active currencies

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allDataTransformed->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'po_amount' => $items->sum('po_amount'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'po_amount' => $currency === 'BASE_RMB'
                ? $allDataTransformed->sum('base_currency') // total BASE_RMB
                : ($groupedTotals->get($currency)['po_amount'] ?? 0),
        ])->values();
    
        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item, $supplierCredits))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item, $supplierCredits));

        // Footer for current page
        $footer = [
            'po_amount' => $paginatedData->sum('po_amount'),
        ];

        // Return JSON
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result instanceof LengthAwarePaginator ? $result->currentPage() : 1,
                'data' => $paginatedData,
                'footer' => $footer,
                'footer2' => $footer2,
                'last_page' => $result instanceof LengthAwarePaginator ? $result->lastPage() : 1,
                'per_page' => $result instanceof LengthAwarePaginator ? $result->perPage() : $paginatedData->count(),
                'total' => $result instanceof LengthAwarePaginator ? $result->total() : $paginatedData->count(),
            ]
        ]);
    }
    private function transformOrderData($list, $supplierCredits){
        $suppliername_en = optional($list->supplier)->suppliername_en;
        $suppliername_cn = optional($list->supplier)->suppliername_cn ?: $suppliername_en;

        $list->supplier_code = optional($list->supplier)->supplier_code;
        $list->suppliername_en = $suppliername_en;
        $list->suppliername_cn = $suppliername_cn;
        $list->ex_rate = number_format($list->ex_rate, 4);
        $list->postatus_en = optional($list->invoiceStatus)->postatus_en;
        $list->postatus_cn = optional($list->invoiceStatus)->postatus_cn;
        $list->credit = $supplierCredits[$list->supplier_id] ?? 0;

        $list->deposit_pv = collect($list->details)->pluck('deposit_pv')->filter()->unique()->implode(', ');
        $list->deposit_jv = collect($list->accountSupplier)->pluck('cr_number')->filter()->unique()->implode(', ');

        return $list;
    }
    public function getPurchaseOrderInfo($id){
        $po = POrder_master::with(['supplier', 'details.product', 'detailsCopy.product','creditSupplier'])->where('id', $id)->first();
        if (!$po) {
            return [];
        }

        $suppliername_en = $po->supplier->suppliername_en ?? '';
        $suppliername_cn = $po->supplier->suppliername_cn ?? '';
        $suppliername_cn = $suppliername_cn === '' ? $suppliername_en : $suppliername_cn;

        $supplier_address_en = $po->supplier->supplier_address_en ?? '';
        $supplier_address_cn = $po->supplier->supplier_address_cn ?? '';
        $supplier_address_cn = $supplier_address_cn === '' ? $supplier_address_en : $supplier_address_cn;

        $IsPOExistOnPV = $this->doIsPOExistOnPV($po->po_number);

        // Merge the details and detailsCopy collections **before** mapping
        $mergedDetailsModels = $po->details->merge($po->detailsCopy);

        // Map merged collection to arrays
        $mergedDetails = $mergedDetailsModels->map(function ($detail) {
            return [
                'id'                => $detail->id,
                'po_number'         => $detail->po_number,
                'product_id'        => $detail->product_id,
                'supplier_id'       => $detail->supplier_id,
                'qty'               => $detail->qty,
                'orig_qty'          => $detail->qty,
                'price'             => $detail->price,
                'total'             => $detail->total,
                'base_price'        => $detail->base_price,
                'base_total'        => $detail->base_total,
                'deposit'           => $detail->deposit,
                'base_deposit'      => $detail->base_deposit,
                'currency'          => $detail->currency,
                'ex_rate'           => $detail->ex_rate,
                'item_cost'         => $detail->item_cost,
                'retail_price'      => $detail->retail_price,
                'allocated_qty'     => $detail->allocated_qty,
                'receive_qty'       => $detail->receive_qty,
                'receive_date'      => $detail->receive_date,
                'deposit_rv'        => $detail->deposit_rv,
                'deposit_pv'        => $detail->deposit_pv,
                'invoice_pv'        => $detail->invoice_pv,
                'is_allocated'      => $detail->is_allocated,
                'product_code'      => optional($detail->product)->product_code,
                'product_title_en'  => optional($detail->product)->product_title_en,
                'product_title_cn'  => optional($detail->product)->product_title_cn,
                'release_date'      => optional($detail->product)->release_date,
                'po_dateline'       => optional($detail->product)->po_dateline,
                'is_deleted'        => 0,
                'indexInt'          => $detail->id . rand(1, 100),
                'age_type'          => 'old',
            ];
        })->values();
        $pvDetails = $this->doGetPVDepositInfo($po->po_number);
        $list = [
            'id'                    => $po->id,
            'supplier_id'           => $po->supplier_id,
            'supplier_code'         => $po->supplier->supplier_code ?? '',
            'suppliername_en'       => $suppliername_en,
            'suppliername_cn'       => $suppliername_cn,
            'supplier_address_en'   => $supplier_address_en,
            'supplier_address_cn'   => $supplier_address_cn,
            'procurement_by_id'     => $po->procurement_by_id,
            'ship_to'               => $po->ship_to,
            'po_number'             => $po->po_number,
            'po_date'               => $po->po_date,
            'ex_rate'               => $po->ex_rate,
            'postatus_id'           => $po->postatus_id,
            'currency'              => $po->currency,
            'delivery_method_id'    => $po->delivery_method_id,
            'payment_terms_id'      => $po->payment_terms_id,
            'shipping_terms_id'     => $po->shipping_terms_id,
            'delivery_date'         => $po->delivery_date,
            'due_date'              => $po->due_date,
            'po_amount'             => $po->po_amount,
            'base_currency'         => $po->base_currency,
            'bank'                  => $po->bank,
            'deposit'               => $po->deposit,
            'base_deposit'          => $po->base_deposit,
            'bank_charges'          => $po->bank_charges,
            'base_bank_charges'     => $po->base_bank_charges,
            'current_credit'        => $po->creditSupplier->current_credit ?? 0,
            'PVJVDeposit'           => $IsPOExistOnPV['total'],
            'details'               => $mergedDetails,
            'pvDetails'             => $pvDetails,
        ];
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function doGetPVDepositInfo(string $poNumber){
        return Payment_voucher_master::with(['details.product', 'details.chartOfAccount'])
            ->get()
            ->filter(function ($pv) use ($poNumber) {
                $refDataArray = explode('|', $pv->ref_data);
                return in_array($poNumber, $refDataArray);
            })
            ->map(function ($pv) {
                // Add product and chart account fields inside details for easy access
                $pv->details->transform(function ($detail) {

                    $product_title_en = $detail->product->product_title_en ?? null;
                    $product_title_cn = $detail->product->product_title_cn ?? null;
                    $product_title_cn = ($product_title_cn === '' ? $product_title_en : $product_title_cn);

                    $account_name_en = $detail->chartOfAccount->account_name_en ?? null;
                    $account_name_cn = $detail->chartOfAccount->account_name_cn ?? null;
                    $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);

                    return [
                        'id' => $detail->id,
                        'currency' => $detail->currency,
                        'account_code' => $detail->account_code,
                        'amount' => $detail->amount,
                        'base_amount' => $detail->base_amount,
                        'ex_rate' => $detail->ex_rate,
                        'pv_number' => $detail->pv_number,
                        'qty' => $detail->qty,
                        'currency' => $detail->currency,
                        'product_code' => $detail->product->product_code ?? null,
                        'product_title_en' => $product_title_en,
                        'product_title_cn' => $product_title_cn,
                        'account_name_en' => $account_name_en,
                        'account_name_cn' => $account_name_cn,
                    ];
                });
                return $pv;
            })
            ->sortByDesc('id')
            ->values();
    }
    public function getPOProductInfo($productCode){
        $product = Products::where('product_code', 'like', "%{$productCode}%")->get();
        $count = $product->count();
        if ($count === 0) {
            return response()->json([
                'success' => true,
                'token'   => 'ProductNotExists',
                'message' => 'Product Code is not exists',
                'list'    => [],
            ]);
        }
        if ($count > 1) {
            return response()->json([
                'success' => true,
                'token'   => 'MultipleProducts',
                'message' => 'Multiple Products',
                'list'    => [],
            ]);
        }
        $poDetails = POrder_detail::where('postatus_id',1)->whereHas('product', function ($query) use ($productCode) {
            $query->where('product_code', 'like', "%{$productCode}%");
        })->with('product')->get();
        $countDtls = $poDetails->count();

        if ($countDtls > 0) {
            $productCodesString = $poDetails->pluck('po_number')->implode(',');
            return response()->json([
                'success' => true,
                'token'   => 'ActivePO',
                'message' => $productCode . ' is active in PO No. ' . $productCodesString,
                'list'    => [],
            ]);
        }

        $product = $product->first(); // 🔑 get the model from the collection
        $total_qty = Orders::where('product_id', $product->id)->sum('qty');
        $total = $total_qty * $product->offered_cost;
        $retail_price = Price_setup::where('product_id',$product->id)->where('customer_group_id',6)->value('retail_price');

        $list = [
            'product_id'    => $product->id,
            'product_code'  => $product->product_code,
            'product_title_en'  => $product->product_title_en,
            'product_title_cn'  => $product->product_title_cn,
            'qty'           => $total_qty,
            'price'         => $product->offered_cost,
            'total'         => $total,
            'retail_price'  => $retail_price,
            'item_cost'     => $product->item_cost,
            'release_date'  => $product->release_date,
            'po_dateline'   => $product->po_dateline,
        ];

        return response()->json([
            'success' => true,
            'token'   => 'Success',
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function getPOSupplierinfo($supplierCode){
        $supplier = Supplier::where('supplier_code', 'like', "%{$supplierCode}%")->get();
        $count = $supplier->count();
        if ($count === 0) {
            return response()->json([
                'success' => true,
                'token'   => 'SupplierNotExists',
                'message' => 'Supplier Code is not exists',
                'list'    => [],
            ]);
        }
        if ($count > 1) {
            return response()->json([
                'success' => true,
                'token'   => 'MultipleSupplier',
                'message' => 'Multiple Supplier',
                'list'    => [],
            ]);
        }
        $supplier = $supplier->first(); // 🔑 get the model from the collection
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $ex_rate = GlobalController::getCurrentDateExRate($supplier->currency, $baseCurrency);
      
        $suppliername_en = $supplier->suppliername_en;
        $suppliername_cn = $supplier->suppliername_cn;
        $suppliername_cn = ($suppliername_cn === '' ? $suppliername_en : $suppliername_cn);

        $supplier_address_en = $supplier->supplier_address_en;
        $supplier_address_cn = $supplier->supplier_address_cn;
        $supplier_address_cn = ($supplier_address_cn === '' ? $supplier_address_en : $supplier_address_cn);

        $list = [
            'supplier_id'           => $supplier->id,
            'supplier_code'         => $supplier->supplier_code,
            'suppliername_en'       => $suppliername_en,
            'suppliername_cn'       => $suppliername_cn,
            'supplier_address_en'   => $supplier_address_en,
            'supplier_address_cn'   => $supplier_address_cn,
            'currency'              => $supplier->currency,
            'delivery_method_id'    => $supplier->delivery_method_id,
            'shipping_terms_id'     => $supplier->shipping_terms_id,
            'payment_terms_id'      => $supplier->payment_terms_id,
            'tax_group'             => $supplier->tax,
            'ex_rate'               => $ex_rate,
        ];

        return response()->json([
            'success' => true,
            'token'   => 'Success',
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function doIsPOExistOnPV($poNumber){
        // Step 1: Total from account_supplier_cn
        $amount1 = Account_supplier_cn::where('ref_data', $poNumber)->sum('amount');

        // Step 2: Total + voucher list from t_pv_master
        $pvoucher = DB::table('t_pv_master')
            ->selectRaw('COALESCE(SUM(total_amount),0) as total_amount, GROUP_CONCAT(pv_number) as pv_number')
            ->whereRaw("FIND_IN_SET(?, REPLACE(ref_data, '|', ','))", [$poNumber])
            ->first();

        $amount2 = $pvoucher->total_amount ?? 0;
        $voucherNos = $pvoucher->pv_number ?? '';

        // Combine results
        $total = $amount1 + $amount2;

        $data = [
            'total' => $total,
            'voucherNos' => $voucherNos,
        ];
        return $data;
    }
    public function doVoidPO($PONumber){
        // Begin a transaction
        DB::beginTransaction();
        try {
            // Update the POrder_master status
            $poMaster = POrder_master::where('po_number', $PONumber)->first();
            if ($poMaster) {
                $poMaster->postatus_id = 4;  // assuming "4" is the void status
                $poMaster->save();
                // Get the related Payment Voucher numbers
                $pvoucherNo = POrder_detail::where('po_number', $PONumber)
                    ->distinct()
                    ->pluck('deposit_pv')
                    ->implode(',');

                // Insert data into POrder_detail_copy
                $pOrderDetails = POrder_detail::where('po_number', $PONumber)->get();
                foreach ($pOrderDetails as $detail) {
                    // First, create a copy of the record in POrder_detail_copy table
                    POrder_detail_copy::create($detail->toArray());

                    // Now, delete the record from POrder_detail
                    POrder_detail::where('id', $detail->id)->delete();

                    // After deletion, run the update product status
                    $this->getUpdateProductStatus($detail->product_id); // On Trigger
                }

                // Update the payment voucher status
                $paymentVouchers = Payment_voucher_master::whereIn('pv_number', explode(',', $pvoucherNo))->get();
                foreach ($paymentVouchers as $voucher) {
                    $voucher->pv_status_id = 5; // assuming "5" is the cancelled status
                    $voucher->save();
                }

                $globalController = new GlobalController();
                $globalController->logAction(
                    'Purchase Order', 't_porder_master',
                    'Void',
                    'Void PO : ' . $PONumber
                );

                event(new POEvent( 'void'));
                event(new PVEvent( 'void'));
                event(new LogEvent( 'void'));

                // Commit the transaction
                DB::commit();
                return response()->json([
                    'token'     => 'Success',
                    'message'   => 'Record(s) Voided',
                    'message2'  => '',
                    'id'        => $PONumber,
                    'action'    => 'Void'
                ]);
            } else {
                return response()->json([
                    'token'     => 'Error',
                    'message'   => 'Error while processing data',
                    'message2'  => '',
                    'id'        => $PONumber,
                    'action'    => 'Void'
                ]);
            }
        } catch (\Exception $e) {
            // Rollback the transaction if anything goes wrong
            DB::rollBack();
            // Optionally, log the exception or return the error message
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'message2'  => '',
                'id'        => $PONumber,
                'action'    => 'Void'
            ]);
        }
    }
    public function getUpdateProductStatus($productId){
        $ProductStatusService = new ProductStatusService;
        $ProductStatus = $ProductStatusService->getProductStatus($productId);

        Products::where('id', $productId)->update([
            'product_status' => $ProductStatus,
        ]);

        $this->getUpdateProductRemQty($productId);
    }
    public function getProductStatus(int $productId): string|null{
        $product = Products::find($productId);

        if (!$product) return null;

        $hasGRN = DB::table('t_grn_detail')->where('product_id', $productId)->exists();

        $today = Carbon::today();
        $preorderEnd = null;

        if (!empty($product->preorder_end_date)) {
            try {
                $preorderEnd = Carbon::createFromFormat('M d Y', $product->preorder_end_date);
            } catch (\Exception $e) {
                return 'Retail'; // fallback in case of bad format
            }
        }

        if (!$hasGRN && $preorderEnd && $today->lessThanOrEqualTo($preorderEnd)) {
            return 'Preorder';
        }
        return 'Retail';
    }
    public function getUpdateProductRemQty($productId){
        $orderQty = Orders::where('product_id', $productId)->sum('qty');
        $poQty = POrder_detail::where('product_id', $productId)
            ->whereIn('postatus_id', [1, 2])
            ->sum('qty');

        $remPOQty = POrder_detail::where('product_id', $productId)
            ->whereIn('postatus_id', [1, 2])
            ->selectRaw('COALESCE(SUM(qty - receive_qty), 0) AS qty')
            ->value('qty');

        $product_status = Products::where('id', $productId)
            ->value('product_status');

        switch($product_status){
            case 'Pre-order': 
                Products::where('id', $productId)->update([
                    'rem_qty' => $orderQty,
                    'is_po_qty' => 0
                ]);
            break;
            case 'Coming Soon': 
                
                if((int) $poQty > 0){
                    Products::where('id', $productId)->update([
                        'rem_qty' => $poQty,
                        'is_po_qty' => 1
                    ]);
                }
                else{
                    Products::where('id', $productId)->update([
                        'rem_qty' => $orderQty,
                        'is_po_qty' => 0
                    ]);
                }
                
            break;
            case 'Partial Received':
                Products::where('id', $productId)->update([
                    'rem_qty' => $remPOQty,
                    'is_po_qty' => 0
                ]);
            break;
            case 'No Order': 
                Products::where('id', $productId)->update([
                    'rem_qty' => $poQty,
                    'is_po_qty' => 0
                ]);
            break;
            case 'Sold Out': 
                Products::where('id', $productId)->update([
                    'rem_qty' => 0,
                    'is_po_qty' => 0
                ]);
            break;
        }

    }
    public function doGetSupplierCRDetails($supplierId){
        $all = Account_supplier_cn::with('chartAccount')
            ->where('supplier_id', $supplierId)
            ->get()
            ->groupBy(fn ($item) => $item->account_code . '|' . $item->currency)
            ->map(function ($group) {
                $first = $group->first();
                $amount = $group->sum(fn ($item) => $item->credit - $item->debit);
                $account_name_en = optional($first->chartAccount)->account_name_en;
                $account_name_cn = optional($first->chartAccount)->account_name_cn;
                $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);
                return (object) [
                    'account_code' => $first->account_code,
                    'currency' => $first->currency,
                    'amount' => $amount,
                    'account_name_en' => $account_name_en,
                    'account_name_cn' => $account_name_cn,
                ];
            })
            ->values();
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => $all,
        ]);
    }
    public function createPVDeposit(Request $request){
        DB::beginTransaction();
        try {

            $AutoGenerated = new AutoGenerated();
            $pv_number = $AutoGenerated->getNextNo("pv_number","PV","t_pv_master");
            $currency = $request->currency;
            $type = $request->type;

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $ex_rate = GlobalController::getCurrentDateExRate($currency, $baseCurrency);
            $operator = GlobalController::getOperator($currency . $baseCurrency);
            $account_code = Accounting_settings::where('chart_fix_code', 'DEPSUP')->value('account_code');

            $base_total_amount = 0;
            $base_sub_total = 0;
            $base_credit_used = 0;
            $ref_data = implode('|', $request->po_numbers);

            $total_amount = $request->deposit_to_pay;
            $sub_total = $request->deposit_to_pay;
            $credit_used = $request->credit_used;
            $supplier_id = $request->supplier_id;

            if($ex_rate === 0){
                return response()->json([
                    'token'     => 'Error',
                    'message'   => 'Exchange Rate is Required',
                    'action'    => 'Insert'
                ]);
            }

            if($baseCurrency === $currency){
                $base_total_amount = $total_amount;
                $base_sub_total = $total_amount;
                $base_credit_used = $credit_used;
            }
            else{
                if($operator === 'Divide'){
                    $base_total_amount = $total_amount / $ex_rate;
                    $base_sub_total = $total_amount / $ex_rate;
                    $base_credit_used = $credit_used / $ex_rate;
                }
                if($operator === 'Multiply'){
                    $base_total_amount = $total_amount * $ex_rate;
                    $base_sub_total = $total_amount * $ex_rate;
                    $base_credit_used = $credit_used * $ex_rate;
                }
            }
            if($type === "PV"){
                $dataMaster = [
                    'pv_number' => $pv_number,
                    'pv_date' => $request->pv_date,
                    'currency' => $currency,
                    'ex_rate' => $ex_rate,
                    'total_amount' => $total_amount,
                    'base_total_amount' => $base_total_amount,
                    'sub_total' => $sub_total,
                    'base_sub_total' => $base_sub_total,
                    'tax_amount' => 0,
                    'base_tax_amount' => 0,
                    'bank_charges' => 0,
                    'base_bank_charges' => 0,
                    'credit_used' => $credit_used,
                    'deposits' => 0,
                    'bank' => $request->bank,
                    'pv_status_id' => 7,
                    'supplier_id' => $supplier_id,
                    'payment_type_id' => 5,
                    'chart_fix_code' => 'DEPSUP',
                    'ref_data' => $ref_data,
                ];
                Payment_voucher_master::create($dataMaster);
                foreach($request->po_numbers as $poNumber){
                    $po_details = POrder_detail::where('po_number',$poNumber)->get();
                    foreach($po_details as $list){

                        $base_deposit = 0;
                        if($baseCurrency === $currency){
                            $base_deposit = $list->deposit;
                        }
                        else{
                            if($operator === 'Divide'){
                                $base_deposit = $list->deposit / $ex_rate;
                            }
                            if($operator === 'Multiply'){
                                $base_deposit = $list->deposit * $ex_rate;
                            }
                        }

                        $data = [
                            'pv_number' => $pv_number,
                            'pv_date' => $request->pv_date,
                            'account_code' => $account_code,
                            'product_id' => $list->product_id,
                            'payment_type_id' => 1,
                            'po_detail_id' => $list->id,
                            'qty' => $list->qty,
                            'account_no' => '',
                            'ap_invoice_no' => '',
                            'ref_data' => $list->po_number,
                            'currency' => $list->currency,
                            'ex_rate' => $ex_rate,
                            'amount' => $list->deposit,
                            'base_amount' => $base_deposit,
                        ];
                        Payment_voucher_detail::create($data);
                    }
                    $globalController = new GlobalController();
                    $globalController->logAction(
                        'Purchase Order', 't_porder_master',
                        'insert',
                        'Create deposit PV on PO Number : ' . $poNumber . ' - PV Number : ' . $pv_number
                    );
                }
            }
            else{
                $JVNo = $AutoGenerated->getNextNo("cr_number","JV","t_account_supplier_cn");
                $dataMaster = [
                    'cr_number' => $JVNo,
                    'account_code' => 12410,
                    'supplier_id' => $supplier_id,
                    'amount' => $credit_used,
                    'base_amount' => $base_credit_used,
                    'debit' => $credit_used,
                    'credit' => 0,
                    'transaction_date' => $request->pv_date,
                    'currency' => $currency,
                    'particulars' => '',
                    'ex_rate' => $ex_rate,
                    'ap_invoice_no' => '',
                    'ref_data' => $ref_data,
                ];
                Account_supplier_cn::create($dataMaster);
            }

            event(new POEvent( 'insert'));
            event(new PVEvent( 'insert'));
            event(new LogEvent( 'insert'));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Payment Voucher Successfully Created',
                'action'    => 'Insert'
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack(); // ❌ Failed
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'action'    => 'Insert'
            ]);
        }
    }
    public function getDepositPaidData(Request $request){
        $search = $request->input('search');
        $sort_by = $request->input('sort_by','Default');
        $page = $request->input('page', 1);
        $perPage  = $request->input('per_page', 15);
        $exclude = ['PO-211118-008','PO-210820-005','PO-210716-007'];

        $detailsQuery = POrder_detail::with([
            'product',
            'depositVoucher', // ✅ Relationship on POrder_detail
            'poMaster.supplier',
            'poMaster.bankList',
            'poMaster.creditSupplier' // ✅ (assuming this one exists on poMaster)
        ])
        ->where('deposit', '>', 0)
        ->where('receive_qty', 0)
        ->whereNotIn('po_number', $exclude);

        // 🔍 Apply search filter on related product fields and deposit_pv
        if ($search) {
            $detailsQuery->where(function ($q) use ($search) {
                $q->where('po_number', 'like', "%$search%") // Search by po_number
                ->orWhereHas('depositVoucher', function ($subQuery) use ($search) {
                    $subQuery->where('deposit_pv', 'like', "%$search%"); // Search by deposit_pv in depositVoucher
                })
                ->orWhereHas('product', function ($subQuery) use ($search) {
                    $subQuery->where('product_code', 'like', "%$search%")
                            ->orWhere('product_title_en', 'like', "%$search%")
                            ->orWhere('product_title_cn', 'like', "%$search%");
                })
                ->orWhereHas('poMaster.supplier', function ($subQuery) use ($search) {
                    $subQuery->where('supplier_code', 'like', "%$search%")  // Search by supplier_code
                            ->orWhere('suppliername_en', 'like', "%$search%") // Search by suppliername_en
                            ->orWhere('suppliername_cn', 'like', "%$search%"); // Search by suppliername_cn
                });
            });
        }

        $details = $detailsQuery->get();

        // Grouping and aggregation logic same as before:
        $grouped = $details->groupBy('po_number');

        $results = $grouped->map(function ($items, $poNumber) {
            $first = $items->first();

            return [
                'id'                => $items->pluck('id')->implode(','),
                'pv_date'           => optional($first->depositVoucher)->pv_date,
                'pv_count'          => $first->depositVoucher && $first->depositVoucher->pv_date ? 1 : 0,
                'po_number'         => $poNumber,
                'currency'          => $first->currency,
                'total'             => $items->sum('total'),
                'base_total'        => $items->sum('base_total'),
                'ex_rate'           => $items->max('ex_rate'),
                'receive_qty'       => $items->max('receive_qty'),
                'supplier_id'       => optional($first->poMaster->supplier)->id,
                'deposit'           => $items->sum('deposit'),
                'base_deposit'      => $items->sum('base_deposit'),
                'deposit_pv'        => $items->pluck('deposit_pv')->filter()->max() ?? '',
                'current_credit'    => optional($first->poMaster->creditSupplier)->current_credit ?? 0,
                'bank'              => optional($first->poMaster->bankList)->account_code ?? '',
                'supplier_code'     => optional($first->poMaster->supplier)->supplier_code ?? '',
                'suppliername_en'   => optional($first->poMaster->supplier)->suppliername_en ?? '',
                'suppliername_cn'   => optional($first->poMaster->supplier)->suppliername_cn ?? '',
                'details'           => $items->map(function ($item) {
                    return [
                        'id'                => $item->id,
                        'product_code'      => optional($item->product)->product_code,
                        'product_title_en'  => optional($item->product)->product_title_en,
                        'product_title_cn'  => optional($item->product)->product_title_cn,
                        'qty'               => $item->qty,
                        'price'             => $item->price,
                        'total'             => $item->total,
                        'base_total'        => $item->base_total,
                        'deposit'           => $item->deposit,
                        'base_deposit'      => $item->base_deposit,
                        'currency'          => $item->currency,
                        'ex_rate'           => $item->ex_rate,
                        'deposit_pv'        => $item->deposit_pv,
                    ];
                })->values(),
            ];
        })->values();

        // After $results = $grouped->map(...)->values();
        if ($sort_by === 'Default') {
            // Sort by pv_date desc (empty last), then id desc
            $results = $results->sortByDesc(function ($item) {
                return $item['pv_date'] ? strtotime($item['pv_date']) : 0;
            })->values();
        }
        elseif ($sort_by === 'CodeAZ') {
            $results = $results->sortBy('supplier_code')->values();
        }
        elseif ($sort_by === 'CodeZA') {
            $results = $results->sortByDesc('supplier_code')->values();
        }
        elseif ($sort_by === 'NameAZ') {
            $results = $results->sortBy('suppliername_en')->values();
        }
        elseif ($sort_by === 'NameZA') {
            $results = $results->sortByDesc('suppliername_en')->values();
        }

        // Paginate
        $paginated = new LengthAwarePaginator(
            $results->forPage($page, $perPage)->values(),
            $results->count(),
            $perPage,
            $page,
            ['path' => url()->current()]
        );

        // Footer sums by currency
        $footerRaw = $results
            ->groupBy('currency')
            ->map(fn ($group, $currency) => [
                'currency'  => $currency,
                'po_amount' => $group->sum('deposit'),
            ])
            ->all();

        // Always include fixed currencies in the correct order
        $currencies = ['RMB', 'SG$', 'BASE_RMB', 'US$'];
        $footer = collect($currencies)->map(function ($cur) use ($footerRaw, $results) {
            if ($cur === 'BASE_RMB') {
                return [
                    'currency'  => 'BASE_RMB',
                    'po_amount' => $results->sum('base_deposit'),
                ];
            }

            return [
                'currency'  => $cur,
                'po_amount' => $footerRaw[$cur]['po_amount'] ?? 0,
            ];
        })->values();

        return response()->json([
            'success' => true,
            'message' => 'Success',
            'list'    => [
                'current_page'  => $paginated->currentPage(),
                'data'          => $paginated->items(),
                'footer2'       => $footer,
                'last_page'     => $paginated->lastPage(),
                'per_page'      => $paginated->perPage(),
                'total'         => $paginated->total(),
            ],
        ]);
    }
    public function getPOProductsList(Request $request){
        $sortBy      = $request->input('sortBy', 'Default');
        $listCode    = $request->input('listCode'); // comma separated product codes
        $sortByCodes = $request->input('sortByCodes'); // comma separated IDs
        $search      = $request->input('search', '');
        $perPage     = (int) $request->input('perPage', 15);

        $query = Products::query()->where('is_deleted', 0);

        // 🔍 Search
        if (!empty($search)) {
            $query->where(function ($q) use ($search) {
                $q->where('product_code', 'like', "%{$search}%")
                ->orWhere('product_title_en', 'like', "%{$search}%")
                ->orWhere('product_title_cn', 'like', "%{$search}%");
            });
        }

        // 📌 Exclude list of product codes
        if (!empty($listCode)) {
            $codes = explode(',', $listCode);
            $query->whereNotIn('product_code', $codes);
        }

        // 📌 Sorting logic
        if ($sortBy !== 'Default') {
            if (!empty($sortByCodes)) {
                $ids = explode(',', $sortByCodes);
                $idList = implode(',', $ids);
                $query->orderByRaw("FIELD(id, $idList) DESC")
                    ->orderByDesc('id');
            } else {
                $query->orderByDesc('id');
            }
        } else {
            $query->orderByDesc('id');
        }

        // 📌 Handle perPage = -1 (return all data)
        if ($perPage === -1) {
            $data = $query->get();
            $result = [
                'current_page' => 1,
                'data'         => $data->map(function ($item) {
                    return [
                        'id'               => $item->id,
                        'product_code'     => $item->product_code,
                        'product_title_en' => $item->product_title_en,
                        'product_title_cn' => $item->product_title_cn,
                        'created_date'     => $item->created_date,
                        'po_dateline'      => $item->po_dateline,
                        'release_date'     => $item->release_date,
                        'supplier_id'      => $item->supplier_id,
                    ];
                }),
                'last_page'    => 1,
                'per_page'     => $data->count(),
                'total'        => $data->count(),
            ];
        } else {
            $result = $query->paginate($perPage);

            // Transform only the `data` part
            $result->getCollection()->transform(function ($item) {
                return [
                    'id'               => $item->id,
                    'product_code'     => $item->product_code,
                    'product_title_en' => $item->product_title_en,
                    'product_title_cn' => $item->product_title_cn,
                    'created_date'     => $item->created_date,
                    'po_dateline'      => $item->po_dateline,
                    'release_date'     => $item->release_date,
                    'supplier_id'      => $item->supplier_id,
                ];
            });
        }

        return response()->json([
            'success' => true,
            'message' => 'success',
            'product' => $result,
        ]);
    }
    public function getCountGRN($poId){
        return Grn_details::where('po_id', $poId)->count();
    }
    public function getCountExistSupplier($supplier_code){
        return Supplier::where('supplier_code', $supplier_code)->count();
    }
    public function cancelPurchaseOrder(Request $request){
        $poNumber = $request->input('poNumber');
        $type = $request->input('type');

        if (!$poNumber) {
            return response()->json(['error' => 'PO number is required.']);
        }

        $poMaster = POrder_master::where('po_number', $poNumber)->first();
        $poDetails = POrder_detail::where('po_number', $poNumber)->get();
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');

        if ($poDetails->isEmpty()) {
            return response()->json([
                'message' => 'No PO details found.',
                'po_number' => $poNumber,
                'list' => []
            ]);
        }

        $detailArr = [];
        $totalAmount = 0;
        $baseTotalAmount = 0;
        $exRate = 0;

        foreach ($poDetails as $detail) {
            // Avoid duplicate where clauses by reusing the query builder
            $voucherQuery = Payment_voucher_detail::where('ref_data', $detail->po_number)->where('product_id', $detail->product_id);
            $ex_rate = GlobalController::getCurrentDateExRate($detail->currency, $baseCurrency);
            if($voucherQuery->sum('amount') > 0){
                $detailArr[] = [
                    'id'            => $detail->id,
                    'amount'        => $voucherQuery->sum('amount'),
                    'base_amount'   => $voucherQuery->sum('base_amount'),
                    'currency'      => $detail->currency,
                    'ex_rate'       => $ex_rate,
                    'supplier_id'   => $detail->supplier_id,
                    'product_id'    => $detail->product_id,
                ];
                $totalAmount += $voucherQuery->sum('amount');
                $baseTotalAmount += $voucherQuery->sum('base_amount');
                $exRate = $ex_rate;
            }
        }

        DB::beginTransaction();

        try {
            switch($type){
                case 'CTOSUPP':
                    $AutoGenerated = new AutoGenerated();
                    $cr_number = $AutoGenerated->getNextNo("cr_number","CRN","t_credit_note_supplier_master");
                    $insertMaster = [
                        'cr_status_id'  => 7,
                        'supplier_id'   => $poMaster->supplier_id,
                        'amount'        => $totalAmount,
                        'base_amount'   => $baseTotalAmount,
                        'cr_number'     => $cr_number,
                        'cr_date'       => date('M d Y'),
                        'ex_rate'       => $exRate,
                        'currency'      => $poMaster->currency,
                    ];
                    Credit_note_supplier_master::create($insertMaster);
                    foreach($detailArr as $list){
                        $insertDetail = [
                            'account_code'  => 12409,
                            'supplier_id'   => $list['supplier_id'],
                            'cr_number'     => $cr_number,
                            'ex_rate'       => $list['ex_rate'],
                            'currency'      => $poMaster->currency,
                            'cr_date'       => date('M d Y'),
                            'amount'        => $list['amount'],
                            'base_amount'   => $list['base_amount'],
                            'product_id'    => $list['product_id'],
                            'ref_data'      => $list['id'],
                            'particulars'   => ''
                        ];
                        Credit_note_supplier_detail::create($insertDetail);
                    }
                break;
                case 'MSCLSS':
                    foreach($detailArr as $list){
                        $acc_table_id = $list['id'] . '-0';
                        General_ledger::create([
                            'account_code' => 69300,
                            'transaction_date' => date('M d Y'),
                            'acc_table' => 'porder_detail',
                            'acc_table_id' => $acc_table_id,
                            'currency' => $poMaster->currency,
                            'ex_rate' => $list['ex_rate'],
                            'supplier_id' => $list['supplier_id'],
                            'ref_data' => $poMaster->po_number,
                            'amount' => $list['amount'],
                            'debit' => $list['base_amount'],
                            'credit' => 0,
                        ]);
                    }
                break;
                case 'RPTOS':
                    $AutoGenerated = new AutoGenerated();
                    $cr_number = $AutoGenerated->getNextNo("cr_number","CRN","t_credit_note_supplier_master");
                    $insertMaster = [
                        'cr_status_id'  => 7,
                        'supplier_id'   => $poMaster->supplier_id,
                        'amount'        => $totalAmount,
                        'base_amount'   => $baseTotalAmount,
                        'cr_number'     => $cr_number,
                        'cr_date'       => date('M d Y'),
                        'ex_rate'       => $exRate,
                        'currency'      => $poMaster->currency,
                    ];
                    Credit_note_supplier_master::create($insertMaster);
                    foreach($detailArr as $list){
                        $insertDetail = [
                            'account_code'  => 12600,
                            'supplier_id'   => $list['supplier_id'],
                            'cr_number'     => $cr_number,
                            'ex_rate'       => $list['ex_rate'],
                            'currency'      => $poMaster->currency,
                            'cr_date'       => date('M d Y'),
                            'amount'        => $list['amount'],
                            'base_amount'   => $list['base_amount'],
                            'product_id'    => $list['product_id'],
                            'ref_data'      => $list['id'],
                            'particulars'   => ''
                        ];
                        Credit_note_supplier_detail::create($insertDetail);
                    }
                break;
            }

            $this->doVoidPO($poMaster->po_number);

            $globalController = new GlobalController();
            $globalController->logAction(
                'Purchase Order', 't_porder_master',
                'Void',
                'Void PO : ' . $poMaster->po_number
            );

            event(new POEvent( 'insert'));
            event(new PVEvent( 'insert'));
            event(new LogEvent( 'insert'));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Purchase Order Successfully Saved',
                'action'    => 'Void'
            ]);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'action'    => 'Void'
            ]);
        }
    }
    public function cancelPurchaseOrderSelected($data){

        $supplier_id = $data['supplier_id'];
        $po_number = $data['po_number'];
        $currency = $data['currency'];
        $ex_rate = $data['ex_rate'];
        $groupedTotals = $data['detail'];
        $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
        $operator = GlobalController::getOperator( $currency . $baseCurrency);

        $totalAmount = 0;
        $totalBaseAmount = 0;
        $PVoucherNo = '';

        foreach ($groupedTotals as $type => $group) {
            $base_total = 0;
            if($baseCurrency != $currency){
                $base_total = (float) $group['total'];
            }
            else{
                if($operator === 'Divide'){
                    $base_total = (float) $group['total'] / (float) $ex_rate;
                }
                if($operator === 'Multiply'){
                    $base_total = (float) $group['total'] * (float) $ex_rate;
                }
            }

            switch($type){
                case 'CTOSUPP':
                    $AutoGenerated = new AutoGenerated();
                    $cr_number = $AutoGenerated->getNextNo("cr_number","CRN","t_credit_note_supplier_master");
                    $insertMaster = [
                        'cr_status_id'  => 7,
                        'supplier_id'   => $supplier_id,
                        'amount'        => $group['total'],
                        'base_amount'   => $base_total,
                        'cr_number'     => $cr_number,
                        'cr_date'       => date('M d Y'),
                        'ex_rate'       => $ex_rate,
                        'currency'      => $currency,
                    ];
                    Credit_note_supplier_master::create($insertMaster);
                    foreach ($group['details'] as $id => $detail) {
                        $base_amount = 0;
                        if($baseCurrency != $currency){
                            $base_amount = (float) $detail['total'];
                        }
                        else{
                            if($operator === 'Divide'){
                                $base_amount = (float) $detail['total'] / (float) $ex_rate;
                            }
                            if($operator === 'Multiply'){
                                $base_amount = (float) $detail['total'] * (float) $ex_rate;
                            }
                        }
                        $insertDetail = [
                            'account_code'  => 12409,
                            'supplier_id'   => $supplier_id,
                            'cr_number'     => $cr_number,
                            'ex_rate'       => $ex_rate,
                            'currency'      => $currency,
                            'cr_date'       => date('M d Y'),
                            'amount'        => $detail['total'],
                            'base_amount'   => $base_amount,
                            'product_id'    => $detail['product_id'],
                            'ref_data'      => $detail['id'],
                            'particulars'   => ''
                        ];
                        Credit_note_supplier_detail::create($insertDetail);
                    }
                break;
                case 'MSCLSS':
                    foreach ($group['details'] as $id => $detail) {
                        $base_amount = 0;
                        if($baseCurrency != $currency){
                            $base_amount = (float) $detail['total'];
                        }
                        else{
                            if($operator === 'Divide'){
                                $base_amount = (float) $detail['total'] / (float) $ex_rate;
                            }
                            if($operator === 'Multiply'){
                                $base_amount = (float) $detail['total'] * (float) $ex_rate;
                            }
                        }
                        $acc_table_id = $id . '-0';
                        $param = [
                            'account_code' => 69300,
                            'transaction_date' => date('M d Y'),
                            'acc_table' => 'porder_detail',
                            'acc_table_id' => $acc_table_id,
                            'currency' => $currency,
                            'ex_rate' => $ex_rate,
                            'supplier_id' => $supplier_id,
                            'ref_data' => $po_number,
                            'amount' => $detail['total'],
                            'debit' => $base_amount,
                            'credit' => 0,
                        ];
                        General_ledger::create($param);
                    }
                break;
                case 'RPTOS':
                    $AutoGenerated = new AutoGenerated();
                    $cr_number = $AutoGenerated->getNextNo("cr_number","CRN","t_credit_note_supplier_master");
                    $insertMaster = [
                        'cr_status_id'  => 7,
                        'supplier_id'   => $supplier_id,
                        'amount'        => $group['total'],
                        'base_amount'   => $base_total,
                        'cr_number'     => $cr_number,
                        'cr_date'       => date('M d Y'),
                        'ex_rate'       => $ex_rate,
                        'currency'      => $currency,
                    ];
                    Credit_note_supplier_master::create($insertMaster);
                    foreach ($group['details'] as $id => $detail) {
                        $base_amount = 0;
                        if($baseCurrency != $currency){
                            $base_amount = (float) $detail['total'];
                        }
                        else{
                            if($operator === 'Divide'){
                                $base_amount = (float) $detail['total'] / (float) $ex_rate;
                            }
                            if($operator === 'Multiply'){
                                $base_amount = (float) $detail['total'] * (float) $ex_rate;
                            }
                        }
                        $insertDetail = [
                            'account_code'  => 12600,
                            'supplier_id'   => $supplier_id,
                            'cr_number'     => $cr_number,
                            'ex_rate'       => $ex_rate,
                            'currency'      => $currency,
                            'cr_date'       => date('M d Y'),
                            'amount'        => $detail['total'],
                            'base_amount'   => $base_amount,
                            'product_id'    => $detail['product_id'],
                            'ref_data'      => $detail['id'],
                            'particulars'   => ''
                        ];
                        Credit_note_supplier_detail::create($insertDetail);
                    }
                break;
            }

            foreach ($group['details'] as $id => $detail) {
                $orders = Orders::where('product_id',$detail['product_id'])->where('show_category','orders')->get();
                foreach ($orders as $order) {
                    $order->on_po = 0;
                    $order->po_detail_id = null;
                    $order->po_number = null;
                    $order->po_received_qty = 0;
                    $order->save();
                }

                $poDetails = POrder_detail::where('id', $id)->first();
                if ($poDetails) {
                    $poDetails->delete();
                }

                $pvDetails = Payment_voucher_detail::where('product_id', $detail['product_id'])
                    ->where('ref_data', $po_number)
                    ->first();

                if ($pvDetails) {
                    $pvDetails->delete();
                }
            }

        }

        $PVoucherNo = POrder_detail::where('po_number', $po_number)
            ->whereNotNull('deposit_pv') // optional: skip NULL values
            ->distinct()
            ->pluck('deposit_pv')
            ->implode(',');

        // Step 2: Get remaining records with the same ref_data
        $remaining = Payment_voucher_detail::where('ref_data', $po_number)->get();

        // Step 3: Sum fields using Eloquent Collection
        $totalAmount = $remaining->sum('amount');
        $totalBaseAmount = $remaining->sum('base_amount');

        Payment_voucher_master::where('pv_number', $PVoucherNo)
            ->update([
                'total_amount'      => $totalAmount,
                'base_total_amount' => $totalBaseAmount,
                'sub_total'         => $totalAmount,
                'base_sub_total'    => $totalBaseAmount,
                'ref_data'          => $po_number,
            ]);

    }
    public function updatePurchaseOrder(Request $request, $id){
        $OrigID = $id;
        $GlobalPOnumber = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');

        $countSupplier = $this->getCountExistSupplier($request->supplier_code);
        if($countSupplier === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Supplier Code is not exists',
                'id'        => $id,
                'action'    => $Action
            ]);
        }

        if($request->ex_rate === 0){
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Exchange Rate is Required',
                'action'    => 'Insert'
            ]);
        }

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            if ((int) $id === 0) {
                $AutoGenerated = new AutoGenerated();
                $po_number = $AutoGenerated->getNextNo("po_number","PO-","t_porder_master");
                $inserMaster = [
                    'po_number'             => $po_number,
                    'supplier_id'           => $request->supplier_id,
                    'procurement_by_id'     => $request->procurement_by_id,
                    'ship_to'               => $request->ship_to,
                    'po_date'               => $request->po_date,
                    'ex_rate'               => $request->ex_rate,
                    'postatus_id'           => $request->postatus_id,
                    'currency'              => $request->currency,
                    'delivery_method_id'    => $request->delivery_method_id,
                    'payment_terms_id'      => $request->payment_terms_id,
                    'shipping_terms_id'     => $request->shipping_terms_id,
                    'delivery_date'         => $request->delivery_date,
                    'due_date'              => $request->due_date,
                    'po_amount'             => $request->po_amount,
                    'base_currency'         => $request->base_currency,
                    'bank'                  => $request->bank,
                    'deposit'               => $request->deposit,
                    'base_deposit'          => $request->base_deposit,
                    'bank_charges'          => $request->bank_charges,
                    'base_bank_charges'     => $request->base_bank_charges,
                ];
                $poMaster = POrder_master::create($inserMaster);
                $OrigID = $poMaster->id;
                $GlobalPOnumber = $po_number;
            }
            else{
                $master = POrder_master::find($request['id']);
                if ($master) {
                    $master->po_number = $request->po_number;
                    $master->supplier_id = $request->supplier_id;
                    $master->procurement_by_id = $request->procurement_by_id;
                    $master->ship_to = $request->ship_to;
                    $master->po_date = $request->po_date;
                    $master->ex_rate = $request->ex_rate;
                    $master->postatus_id = $request->postatus_id;
                    $master->currency = $request->currency;
                    $master->delivery_method_id = $request->delivery_method_id;
                    $master->payment_terms_id = $request->payment_terms_id;
                    $master->shipping_terms_id = $request->shipping_terms_id;
                    $master->delivery_date = $request->delivery_date;
                    $master->due_date = $request->due_date;
                    $master->po_amount = $request->po_amount;
                    $master->base_currency = $request->base_currency;
                    $master->bank = $request->bank;
                    $master->deposit = $request->deposit;
                    $master->bank_charges = $request->bank_charges;
                    $master->base_bank_charges = $request->base_bank_charges;
                    $master->save();
                }
                $GlobalPOnumber = $master->po_number;
            }

            if ($request->has('details')) {
                $rawDetails = $request->details;

                // Decode all items
                $decodedDetails = array_map(function ($item) {
                    return is_string($item) ? json_decode($item, true) : $item;
                }, $rawDetails);

                // Filter deleted items
                $deletedDetails = array_filter($decodedDetails, function ($item) {
                    return isset($item['is_deleted']) && (int) $item['is_deleted'] === 1;
                });

                // Group totals and details by delete_type
                $groupedTotals = [];

                foreach ($deletedDetails as $item) {
                    $type = $item['delete_type'] ?? 'unknown';
                    $id = $item['id'] ?? null;
                    $total = $item['total'] ?? 0;

                    if (!isset($groupedTotals[$type])) {
                        $groupedTotals[$type] = [
                            'total' => 0,
                            'details' => []
                        ];
                    }
                    $groupedTotals[$type]['total'] += $total;

                    if ($id !== null) {
                        $groupedTotals[$type]['details'][$id] = $item;
                    }
                }

                $finalArray['supplier_id'] = $request->supplier_id;
                $finalArray['po_number'] = $request->po_number;
                $finalArray['currency'] = $request->currency;
                $finalArray['ex_rate'] = $request->ex_rate;
                $finalArray['detail'] = $groupedTotals;

                $this->cancelPurchaseOrderSelected($finalArray);
            }

            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }
                    $base_price = 0;
                    $base_total = 0;
                    if($baseCurrency != $currency){
                        $base_price = (float) $list['price'];
                        $base_total = (float) $list['total'];
                    }
                    else{
                        if($operator === 'Divide'){
                            $base_price = (float) $list['price'] / (float) $request->ex_rate;
                            $base_total = (float) $list['total'] / (float) $request->ex_rate;
                        }
                        if($operator === 'Multiply'){
                            $base_price = (float) $list['price'] * (float) $request->ex_rate;
                            $base_total = (float) $list['total'] * (float) $request->ex_rate;
                        }
                    }

                    $recordID = $list['id'];
                    $po_detail_id = 0;
                    $receive_qty = 0;

                    if((int) $list['is_deleted'] === 0){
                        if ((int) $recordID === 0) {

                            $insertDetail = [
                                'po_number'     => $GlobalPOnumber,
                                'currency'      => $request->currency,
                                'product_id'    => $list['product_id'],
                                'qty'           => $list['qty'],
                                'price'         => $list['price'],
                                'base_price'    => $base_price,
                                'total'         => $list['total'],
                                'base_total'    => $base_total,
                                'retail_price'  => $list['retail_price'],
                                'item_cost'     => $list['item_cost'],
                                'deposit'       => $list['deposit'],
                                'ex_rate'       => $request->ex_rate,
                                'allocated_qty' => 0,
                                'receive_qty'   => 0,
                                'is_allocated'  => 0,
                                'receive_date'  => '',
                                'deposit_rv'    => '',
                                'deposit_pv'    => '',
                                'invoice_pv'    => '',
                            ];
                            $poDetails = POrder_detail::create($insertDetail);
                            $po_detail_id = $poDetails->id;
                            $receive_qty = $poDetails->id;
                        }
                        else{
                            $detail = POrder_detail::find($list['id']);
                            if ($detail) {
                                if($list['qty'] != $detail->qty){
                                    $this->doUpdatePOAmountQty($detail->po_number,$list['qty'],$list['total'],$base_total);
                                }
                                if($list['price'] != $detail->price){
                                    $this->doGetProductOfferedCost($list['product_id'],$list['price'],$detail->po_number,$list['total'],$request->ex_rate);
                                }
                                $detail->product_id = $list['product_id'];
                                $detail->qty = $list['qty'];
                                $detail->currency = $request->currency;
                                $detail->price = $list['price'];
                                $detail->base_price = $base_price;
                                $detail->total = $list['total'];
                                $detail->base_total = $base_total;
                                $detail->retail_price = $list['retail_price'];
                                $detail->item_cost = $list['item_cost'];
                                $detail->deposit = $list['deposit'];
                                $detail->ex_rate = $request->ex_rate;
                                $detail->save();
                                $po_detail_id = $detail->id;
                                $receive_qty = $detail->id;
                            }
                        }
                        $orders = Orders::where('product_id',$list['product_id'])->where('show_category','orders')->get();
                        foreach ($orders as $order) {
                            $exists = Sales_order_qty_ids::where('order_id', $order->id)
                                ->where('po_detail_id', $po_detail_id)
                                ->exists();

                            if (!$exists) {
                                Sales_order_qty_ids::create([
                                    'order_id'     => $order->id,
                                    'po_detail_id' => $po_detail_id,
                                ]);
                            }
                            $order->on_po = 1;
                            $order->po_detail_id = $po_detail_id;
                            $order->po_number = $GlobalPOnumber;
                            $order->po_received_qty = $receive_qty;
                            $order->save();
                        }
                        $product = Products::find($list['product_id']);
                        if ($product) {
                            $product->release_date = $list['release_date'];
                            $product->po_dateline = $list['po_dateline'];
                        }
                    }
                    $this->getUpdateProductStatus($list['product_id']); // On Trigger
                }
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Purchase Order', 't_porder_master',
                $Action,
                'PO Number : ' . $GlobalPOnumber
            );

            event(new POEvent( $Action));
            event(new PVEvent( $Action));
            event(new PreorderEvent( $Action));
            event(new LogEvent( 'insert'));

            DB::commit(); // 👍 Success

            return response()->json([
                'token'     => 'Success',
                'message'   => 'Purchase Order Successfully Saved',
                'id'        => $OrigID,
                'action'    => $Action
            ]);

        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }
    }
    public function doUpdatePOAmountQty($poNumber, $qty, $total, $baseTotal){
        $poDetails = POrder_detail::where('po_number', $poNumber)->get();
        foreach ($poDetails as $detail) {
            $poId = $detail->id;

            // Get related AP Invoice No and PV Number
            $apInvoiceNo = $this->getAPInvoiceNo($poNumber, $poId);
            $pvoucherNo = $this->getPVoucherNo($apInvoiceNo);

            // Update AP invoice detail
            Accounts_payable_details::where('po_number', $poNumber)
                ->where('po_detail_id', $poId)
                ->update([
                    'qty' => $qty,
                    'total' => $total,
                ]);

            // Update payment voucher detail
            Payment_voucher_detail::where('po_detail_id', $poId)
                ->update([
                    'qty' => $qty,
                    'amount' => $baseTotal,
                    'base_amount' => $baseTotal,
                ]);

            // Update AP invoice master totals
            $apTotals = Accounts_payable_details::where('ap_number', $apInvoiceNo)
                ->selectRaw('SUM(total) AS total, SUM(total * ex_rate) AS base_total')
                ->first();

            DB::table('t_ap_master')->where('ap_number', $apInvoiceNo)->update([
                'sub_total' => $apTotals->total,
                'base_sub_total' => $apTotals->base_total,
            ]);

            // Update PV master totals
            $pvTotals = Payment_voucher_detail::where('pv_number', $pvoucherNo)
                ->selectRaw('SUM(amount) AS total, SUM(base_amount) AS base_total')
                ->first();

            Payment_voucher_master::where('pv_number', $pvoucherNo)->update([
                'total_amount' => $pvTotals->total,
                'base_total_amount' => $pvTotals->base_total,
            ]);
        }

        return 'Save : doUpdatePOAmountQty';
    }
    public function getAPInvoiceNo($poNumber, $poId){
        return Accounts_payable_details::where('po_number', $poNumber)
            ->where('po_detail_id', $poId)
            ->value('ap_number'); // Assuming 'ap_number' is equivalent to 'APInvoiceNo'
    }
    public function getPVoucherNo($refData){
        return Payment_voucher_detail::where('ref_data', $refData)
            ->value('pv_number');
    }
    public function getDepositPV($ref_data,$product_id){
        return Payment_voucher_detail::where('ref_data', $ref_data)
            ->where('product_id',$product_id)
            ->value('amount');
    }
    public function doGetProductOfferedCost($productId,$price,$poNumber,$total,$exRate){
        $product = Products::find($productId);
        if ($product) {
            $product->offered_cost = $price;
            $product->item_cost = $price * $exRate;
            $product->save();
        }
        $this->UpdateRCPrice($productId);
        $this->UpdateWHPrice($productId);
        $this->triggerUpdateCostProductAP($productId,$price,$poNumber,$total,$exRate);

        return $product;
    }
    public function UpdateRCPrice($productId){
        // Find the price setup with type = 'retail' and join with product_items
        $priceSetups = Price_setup::where('type', 'retail')
            ->whereHas('productItem', function ($query) use ($productId) {
                $query->where('id', $productId);
            })
            ->with(['productItem'])->get();

        foreach ($priceSetups as $setup) {
            $currency = $setup->currency;
            $itemCost = $setup->productItem->item_cost ?? 0;

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $exRate = GlobalController::getCurrentDateExRate($currency, $baseCurrency);

            $priceAProfit = 0;
            $priceAPrcnt = '';

            if ($setup->retail_price > 0) {
                $priceA = $setup->retail_price * $exRate;
                $priceAProfit = $priceA - $itemCost;

                $priceAPrcnt = intval($this->getPercentage($priceAProfit, $itemCost));
            }
            $setup->profit_prcnt_a = $priceAPrcnt === '' ? 0 : $priceAPrcnt;
            $setup->save();
        }
        return $priceSetups;
    }
    public function UpdateWHPrice($productId){
        $priceSetups = Price_setup::where('type', 'wholesale')
            ->whereHas('productItem', function ($query) use ($productId) {
                $query->where('id', $productId);
            })
            ->with('productItem')
            ->get();

        foreach ($priceSetups as $setup) {
            $currency = $setup->currency;
            $itemCost = $setup->productItem->item_cost ?? 0;

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $exRate = GlobalController::getCurrentDateExRate($currency, $baseCurrency);

            // Initialize profit percentages
            $profitA = $profitB = $profitC = '';

            if ($setup->price_a > 0) {
                $priceA = $setup->price_a * $exRate;
                $profit = $priceA - $itemCost;
                $profitA = intval($this->getPercentage($profit, $itemCost));
            }

            if ($setup->price_b > 0) {
                $priceB = $setup->price_b * $exRate;
                $profit = $priceB - $itemCost;
                $profitB = intval($this->getPercentage($profit, $itemCost));
            }

            if ($setup->price_c > 0) {
                $priceC = $setup->price_c * $exRate;
                $profit = $priceC - $itemCost;
                $profitC = intval($this->getPercentage($profit, $itemCost));
            }

            $setup->profit_prcnt_a = $profitA === '' ? 0 : $profitA;
            $setup->profit_prcnt_b = $profitB === '' ? 0 : $profitB;
            $setup->profit_prcnt_c = $profitC === '' ? 0 : $profitC;
            $setup->save();
        }
        return $priceSetups;
    }
    public function triggerUpdateCostProductAP($productId, $offeredCost, $poNumber, $total, $exRate){
        // 1. Find the AP invoice detail
        $detail = Accounts_payable_details::where('product_id', $productId)->where('po_number', $poNumber)->first();

        if (!$detail) {
            return; // or throw exception
        }

        $apInvoiceNo = $detail->ap_invoice_no;
        $exRate = $detail->ex_rate;

        // 2. Update the detail
        $detail->update([
            'price' => $offeredCost,
            'total' => $total,
        ]);

        // 3. Recompute overall totals
        $masterSubTotal = POrder_detail::where('po_number', $poNumber)->sum('total');
        $masterBaseSubTotal = $masterSubTotal * $exRate;

        $master = Accounts_payable_master::where('po_number', $poNumber)->first();

        if (!$master) {
            return; // or handle error
        }

        $totalDeductions = ($master->credit_used ?? 0) + ($master->deposit ?? 0);
        $masterTotal = $masterSubTotal - $totalDeductions;
        $masterBaseTotal = $masterTotal * $exRate;

        // 4. Apply updates to the master record
        $master->update([
            'sub_total' => $masterSubTotal,
            'base_sub_total' => $masterBaseSubTotal,
            'total' => $masterTotal,
            'base_total' => $masterBaseTotal,
        ]);

        return $detail;
    }
    public function getPercentage($p_TotalProfit,$p_TotalPurchase){
        $TotalProfit = $p_TotalProfit;
        $TotalPurchase = $p_TotalPurchase;
        $returnPrcnt = ($p_TotalProfit / $p_TotalPurchase) * 100;
        return $returnPrcnt;
    }
}
