<?php

namespace App\Http\Controllers;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use App\Services\AutoGenerated;

use App\Models\Accounts_payable_master;
use App\Models\Accounts_payable_details;
use App\Models\Credit_supplier;
use App\Models\Payment_voucher_master;
use App\Models\Payment_voucher_detail;
use App\Models\Account_supplier_cn;
use App\Models\Account_supplier_invoice;
use App\Models\ISSettings;
use App\Models\Accounting_settings;
use App\Models\Grn_details;
use App\Models\POrder_master;
use App\Models\POrder_detail;
use App\Models\Supplier;
use App\Models\Products;
use App\Models\Price_setup;
use App\Models\Product_services;
use App\Models\Orders;

use App\Events\POEvent;
use App\Events\PVEvent;
use App\Events\LogEvent;
use App\Events\APEvent;

class SupplierInvoiceController extends Controller{

    public function getAllSupplierInvoice(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $page = (int) $request->input('page', 1);
        $search = $request->input('search', '');
        $supplierCodes = $request->input('supplier_codes', []);
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        $categoryDates = $request->input('category_dates');

        // Base query with eager loading
        $query = Accounts_payable_master::with([
            'supplier:id,suppliername_en,suppliername_cn,supplier_code',
            'apDetails.product:id,product_code,product_title_en,product_title_cn',
            'apDetails.service:id,service_code,description_en,description_cn',
            'invoiceStatus:id,status_value_en,status_value_cn',
        ])->orderByDesc('id');

        // Filters
        if (!empty($supplierCodes)) {
            $query->whereIn('supplier_id', $supplierCodes);
        }
        if ($categoryDates === 'Date' && $dateFrom && $dateTo) {
            $query->whereBetween(DB::raw("STR_TO_DATE(ap_date, '%b %d %Y')"), [$dateFrom, $dateTo]);
        }
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('ap_number', 'like', "%{$search}%")
                    ->orWhereHas('supplier', function ($q) use ($search) {
                        $q->where('suppliername_en', 'like', "%{$search}%")
                            ->orWhere('suppliername_cn', 'like', "%{$search}%")
                            ->orWhere('supplier_code', 'like', "%{$search}%");
                    })
                    ->orWhereHas('invoiceStatus', function ($q) use ($search) {
                        $q->where('status_value_en', 'like', "%{$search}%")
                            ->orWhere('status_value_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('apDetails.product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('apDetails.service', function ($q) use ($search) {
                        $q->where('service_code', 'like', "%{$search}%")
                            ->orWhere('description_en', 'like', "%{$search}%")
                            ->orWhere('description_cn', 'like', "%{$search}%");
                    })
                    ->orWhereExists(function ($sub) use ($search) {
                        $sub->select(DB::raw(1))
                            ->from('t_pv_master as pv')
                            ->whereRaw("FIND_IN_SET(t_ap_master.ap_number, REPLACE(pv.invoice_no, '|', ',')) > 0")
                            ->where('pv.pv_number', 'like', "%{$search}%");
                    });
            });
        }

        // Clone query to get all data for footer totals
        $allData = (clone $query)->get();

        // Preload all supplier credits to avoid N+1
        $supplierCredits = Credit_supplier::select('supplier_id', DB::raw('SUM(COALESCE(current_credit,0)) as total_credit'))
            ->whereIn('supplier_id', $allData->pluck('supplier_id')->unique())
            ->groupBy('supplier_id')
            ->pluck('total_credit', 'supplier_id');

        // Transform all orders
        $allDataTransformed = $allData->map(fn($order) => $this->transformOrderData($order, $supplierCredits));

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];
        // Get all active currencies

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $allDataTransformed->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $allDataTransformed->sum('base_currency') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();
    
        // Pagination
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        // Transform paginated data
        $paginatedData = $perPage === -1
            ? $result->map(fn($item) => $this->transformOrderData($item, $supplierCredits))
            : tap($result)->getCollection()->transform(fn($item) => $this->transformOrderData($item, $supplierCredits));

        // Return JSON
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result instanceof LengthAwarePaginator ? $result->currentPage() : 1,
                'data' => $paginatedData,
                'footer2' => $footer2,
                'last_page' => $result instanceof LengthAwarePaginator ? $result->lastPage() : 1,
                'per_page' => $result instanceof LengthAwarePaginator ? $result->perPage() : $paginatedData->count(),
                'total' => $result instanceof LengthAwarePaginator ? $result->total() : $paginatedData->count(),
            ]
        ]);
    }
    private function transformOrderData($list, $supplierCredits){
        $supplier = optional($list->supplier);
        $suppliername_en = $supplier->suppliername_en ?? '';
        $suppliername_cn = $supplier->suppliername_cn ?: $suppliername_en;

        $pv = Payment_voucher_master::selectRaw("COALESCE(pv_date, '') as pv_date,pv_number")
            ->whereRaw("FIND_IN_SET(?, REPLACE(invoice_no, '|', ',')) > 0", [$list->ap_number])
            ->first();

        $jv = Account_supplier_cn::selectRaw("COALESCE(transaction_date, '') as transaction_date")
            ->whereRaw("FIND_IN_SET(?, REPLACE(ap_invoice_no, '|', ',')) > 0", [$list->ap_number])
            ->first();

        $pv_date = $pv?->pv_date;
        $jv_date = $jv?->transaction_date;

        $payment_date = $pv_date !== '' && $pv_date !== null
            ? $pv_date
            : ($jv_date !== '' && $jv_date !== null ? $jv_date : null);

        $balance = $this->getAPInvoiceBalance($list->ap_number);

        return [
            'id' => $list->id,
            'ap_number' => $list->ap_number,
            'ap_date' => $list->ap_date,
            'currency' => $list->currency,
            'total' => $list->total,
            'supplier_id' => $list->supplier_id,
            'bank' => $list->bank,
            'ex_rate' => number_format($list->ex_rate, 4),
            'invoice_status_id' => $list->invoice_status_id,
            'status_value_en' => optional($list->invoiceStatus)->status_value_en,
            'status_value_cn' => optional($list->invoiceStatus)->status_value_cn,
            'supplier_code' => $supplier->supplier_code,
            'suppliername_en' => $suppliername_en,
            'suppliername_cn' => $suppliername_cn,
            'payment_date' => $payment_date,
            'pv_number' => $pv?->pv_number,
            'balance' => $balance,
            'credit' => $supplierCredits[$list->supplier_id] ?? 0,
            'details' => $list->apDetails->map(function ($detail) {
                $service = optional($detail->service);
                $product = optional($detail->product);
                $received_date = Grn_details::where('po_id',$detail->po_detail_id)
                    ->where('product_id',$detail->product_id)->value('grn_date');

                if($product->product_code != null){
                    $product_code = $product->product_code;
                    $product_title_en = $product->product_title_en;
                    $product_title_cn = $product->product_title_cn;
                    $product_title_cn = ($product_title_cn === '' ? $product_title_en : $product_title_cn);
                }
                else{
                    $product_code = $service->service_code;
                    $product_title_en = $service->description_en;
                    $product_title_cn = $service->description_cn;
                    $product_title_cn = ($product_title_cn === '' ? $product_title_en : $product_title_cn);
                }

                return [
                    'id' => $detail->id,
                    'qty' => $detail->qty,
                    'price' => $detail->price,
                    'total' => $detail->total,
                    'po_number' => $detail->po_number,
                    'ap_date' => $detail->ap_date,
                    'currency' => $detail->currency,
                    'service_id' => $detail->service_id,
                    'product_id' => $detail->product_id,
                    'product_code' => $product_code,
                    'product_title_en' => $product_title_en,
                    'product_title_cn' => $product_title_cn,
                    'received_date' => $received_date,
                ];
            })->values(),
        ];
    }
    public function getSupplierInvoiceInfo($id){
        $apMaster = Accounts_payable_master::with(['supplier', 'apDetails.product','apDetails.service','invoiceStatus'])->where('id', $id)->first();
        if (!$apMaster) {
            return [];
        }

        $suppliername_en = $apMaster->supplier->suppliername_en ?? '';
        $suppliername_cn = $apMaster->supplier->suppliername_cn ?? '';
        $suppliername_cn = $suppliername_cn === '' ? $suppliername_en : $suppliername_cn;

        $supplier_address_en = $apMaster->supplier->supplier_address_en ?? '';
        $supplier_address_cn = $apMaster->supplier->supplier_address_cn ?? '';
        $supplier_address_cn = $supplier_address_cn === '' ? $supplier_address_en : $supplier_address_cn;

        // Merge the apDetails and detailsCopy collections **before** mapping
        $mergedDetailsModels = $apMaster->apDetails;

        // Map merged collection to arrays
        $mergedDetails = $mergedDetailsModels->map(function ($detail) {

            $received_date = Grn_details::where('po_id',$detail->po_detail_id)
                ->where('product_id',$detail->product_id)->value('grn_date');

            $deposit_pv = POrder_detail::where('po_number',$detail->po_number)
                ->where('product_id',$detail->product_id)->value('deposit_pv');

            $product_code = "";
            $product_title_en = "";
            $product_title_cn = "";

            if($detail->product_id != null){
                $product_code = optional($detail->product)->product_code;
                $product_title_en = optional($detail->product)->product_title_en;
                $product_title_cn = optional($detail->product)->product_title_cn;
                $product_title_cn = ($product_title_cn === '' ? $product_title_en : $product_title_cn);
            }
            else{
                $product_code = optional($detail->service)->service_code;
                $product_title_en = optional($detail->service)->description_en;
                $product_title_cn = optional($detail->service)->description_cn;
                $product_title_cn = ($product_title_cn === '' ? $product_title_en : $product_title_cn);
            }

            return [
                'id' => $detail->id,
                'ap_number' => $detail->ap_number,
                'ap_date' => $detail->ap_date,
                'po_number' => $detail->po_number,
                'product_id' => $detail->product_id,
                'service_id' => $detail->service_id,
                'supplier_id' => $detail->supplier_id,
                'currency' => $detail->currency,
                'ex_rate' => $detail->ex_rate,
                'qty' => $detail->qty,
                'receive_qty' => $detail->receive_qty,
                'price' => $detail->price,
                'total' => $detail->total,
                'deposit' => $detail->deposit,
                'base_deposit' => $detail->base_deposit,
                'po_ex_rate' => $detail->po_ex_rate,
                'grn_ex_rate' => $detail->grn_ex_rate,
                'po_adv_pay' => $detail->po_adv_pay,
                'grn_base_total' => $detail->grn_base_total,
                'po_detail_id' => $detail->po_detail_id,
                'product_type' => $detail->product_type,
                'product_code' => $product_code,
                'product_title_en' => $product_title_en,
                'product_title_cn' => $product_title_cn,
                'is_deleted' => 0,
                'received_date' => $received_date,
                'deposit_pv' => $deposit_pv,
                'indexInt' => $detail->id . rand(1, 100),
                'age_type' => 'old',
            ];
        })->values();
        $list = [
            'id' => $apMaster->id,
            'supplier_id' => $apMaster->supplier_id,
            'supplier_code' => $apMaster->supplier->supplier_code ?? '',
            'suppliername_en' => $suppliername_en,
            'suppliername_cn' => $suppliername_cn,
            'supplier_address_en' => $supplier_address_en,
            'supplier_address_cn' => $supplier_address_cn,
            'ap_number' => $apMaster->ap_number,
            'ap_date' => $apMaster->ap_date,
            'currency' => $apMaster->currency,
            'ex_rate' => $apMaster->ex_rate,
            'tax' => $apMaster->tax,
            'base_tax' => $apMaster->base_tax,
            'sub_total' => $apMaster->sub_total,
            'base_sub_total' => $apMaster->base_sub_total,
            'total' => $apMaster->total,
            'base_total' => $apMaster->base_total,
            'payment' => $apMaster->payment,
            'balance' => $apMaster->balance,
            'deposit' => $apMaster->deposit,
            'base_deposit' => $apMaster->base_deposit,
            'po_ex_rate' => $apMaster->po_ex_rate,
            'grn_ex_rate' => $apMaster->grn_ex_rate,
            'po_adv_pay' => $apMaster->po_adv_pay,
            'grn_base_total' => $apMaster->grn_base_total,
            'credit_used' => $apMaster->credit_used,
            'base_credit_used' => $apMaster->base_credit_used,
            'current_credit' => $apMaster->current_credit,
            'base_current_credit' => $apMaster->base_current_credit,
            'total_deduction' => $apMaster->total_deduction,
            'base_total_deduction' => $apMaster->base_total_deduction,
            'invoice_status_id' => $apMaster->invoice_status_id,
            'ship_to_id' => $apMaster->ship_to_id,
            'bill_to_id' => $apMaster->bill_to_id,
            'payment_terms_id' => $apMaster->payment_terms_id,
            'delivery_method_id' => $apMaster->delivery_method_id,
            'shipping_terms_id' => $apMaster->shipping_terms_id,
            'bank' => $apMaster->bank,
            'due_date' => $apMaster->due_date,
            'delivery_date' => $apMaster->delivery_date,
            'tax_group' => $apMaster->tax_group,
            'remarks' => $apMaster->remarks,
            'details' => $mergedDetails,
        ];
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function getAPInvoiceBalance($ap_invoice_no){
        return Account_supplier_invoice::where('ap_invoice_no', $ap_invoice_no)
            ->selectRaw('COALESCE(SUM(credit),0) - COALESCE(SUM(debit),0) as APInvoiceBalance')
            ->value('APInvoiceBalance') ?? 0;
    }
    public function createPVInvoice(Request $request){
        DB::beginTransaction();
        try {

            $supplier_id = $request->supplier_id ?? null;

            if (!$supplier_id) {
                return response()->json([
                    'token' => 'Error',
                    'message' => 'Supplier ID is required.',
                    'action' => 'Insert'
                ]);
            }

            $AutoGenerated = new AutoGenerated();
            $pv_number = $AutoGenerated->getNextNo("pv_number","PV","t_pv_master");
            $currency = $request->currency;
            $type = $request->type;

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $ex_rate = GlobalController::getCurrentDateExRate($currency, $baseCurrency);
            $operator = GlobalController::getOperator($currency . $baseCurrency);
            $account_code = Accounting_settings::where('chart_fix_code', 'SUPTADVPAY')->value('account_code');

            $base_total_amount = 0;
            $base_sub_total = 0;
            $base_credit_used = 0;
            $ref_data = implode('|', $request->ap_numbers);

            $total_amount = $request->amount_to_pay;
            $sub_total = $request->amount_to_pay;

            if($ex_rate === 0){
                return response()->json([
                    'token'     => 'Error',
                    'message'   => 'Exchange Rate is Required',
                    'action'    => 'Insert'
                ]);
            }

            if($baseCurrency === $currency){
                $base_total_amount = $total_amount;
                $base_sub_total = $total_amount;
                $base_credit_used = $request->credit_used;
            }
            else{
                if($operator === 'Divide'){
                    $base_total_amount = $total_amount / $ex_rate;
                    $base_sub_total = $total_amount / $ex_rate;
                    $base_credit_used = $request->credit_used / $ex_rate;
                }
                if($operator === 'Multiply'){
                    $base_total_amount = $total_amount * $ex_rate;
                    $base_sub_total = $total_amount * $ex_rate;
                    $base_credit_used = $request->credit_used * $ex_rate;
                }
            }
            if($type === "PV"){
                $dataMaster = [
                    'pv_number' => $pv_number,
                    'pv_date' => $request->pv_date,
                    'currency' => $currency,
                    'ex_rate' => $ex_rate,
                    'total_amount' => $total_amount,
                    'base_total_amount' => $base_total_amount,
                    'sub_total' => $sub_total,
                    'base_sub_total' => $base_sub_total,
                    'tax_amount' => 0,
                    'base_tax_amount' => 0,
                    'bank_charges' => 0,
                    'base_bank_charges' => 0,
                    'credit_used' => $request->credit_used,
                    'deposits' => 0,
                    'bank' => $request->bank,
                    'pv_status_id' => 7,
                    'supplier_id' => $supplier_id,
                    'payment_type_id' => 1,
                    'chart_fix_code' => 'SUPTADVPAY',
                    'invoice_no' => $ref_data,
                    'ref_data' => $ref_data,
                ];
                Payment_voucher_master::create($dataMaster);
                foreach($request->ap_numbers as $apNumber){
                    $apDetails = Accounts_payable_details::where('ap_number',$apNumber)->get();
                    foreach($apDetails as $list){

                        $base_amount = 0;
                        $amount = $list->total - $list->deposit;

                        if($baseCurrency === $currency){
                            $base_amount = $amount;
                        }
                        else{
                            if($operator === 'Divide'){
                                $base_amount = $amount / $ex_rate;
                            }
                            if($operator === 'Multiply'){
                                $base_amount = $amount * $ex_rate;
                            }
                        }

                        $data = [
                            'pv_number' => $pv_number,
                            'pv_date' => $request->pv_date,
                            'account_code' => $account_code,
                            'product_id' => $list->product_id,
                            'payment_type_id' => 1,
                            'ap_detail_id' => $list->id,
                            'po_detail_id' => $list->po_detail_id,
                            'qty' => $list->qty,
                            'account_no' => '',
                            'ap_invoice_no' => $list->ap_number,
                            'ref_data' => $list->ap_number,
                            'currency' => $list->currency,
                            'ex_rate' => $ex_rate,
                            'amount' => $amount,
                            'base_amount' => $base_amount,
                        ];
                        Payment_voucher_detail::create($data);
                    }
                    $globalController = new GlobalController();
                    $globalController->logAction(
                        'Purchase Order', 't_porder_master',
                        'insert',
                        'Create  PV on AP Number : ' . $apNumber . ' - PV Number : ' . $pv_number
                    );
                }
            }
            else{
                $JVNo = $AutoGenerated->getNextNo("cr_number","JV","t_account_supplier_cn");
                $dataMaster = [
                    'cr_number' => $JVNo,
                    'account_code' => 12410,
                    'supplier_id' => $supplier_id,
                    'amount' => $request->credit_used,
                    'base_amount' => $base_credit_used,
                    'debit' => $request->credit_used,
                    'credit' => 0,
                    'transaction_date' => $request->pv_date,
                    'currency' => $currency,
                    'particulars' => '',
                    'ex_rate' => $ex_rate,
                    'ap_invoice_no' => '',
                    'ref_data' => $ref_data,
                ];
                Account_supplier_cn::create($dataMaster);
            }

            event(new POEvent( 'insert'));
            event(new PVEvent( 'insert'));
            event(new LogEvent( 'insert'));
            event(new APEvent( 'insert'));

            DB::commit(); // 👍 Success
            return response()->json([
                'token'     => 'Success',
                'message'   => 'Payment Voucher Successfully Created',
                'action'    => 'Insert'
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack(); // ❌ Failed
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'action'    => 'Insert'
            ]);
        }
    }
    public function doVoidSupplierInvoice($apInvoiceIdArr){

        $apInvoiceIds = explode(',', $apInvoiceIdArr);

        DB::beginTransaction();
        try {

            foreach ($apInvoiceIds as $apInvoiceId) {
                $apMaster = Accounts_payable_master::where('id',$apInvoiceId)->first();

                if($apMaster){

                    $no = trim($apMaster->ap_number);
                    $invoiceStatusId = $apMaster->invoice_status_id;

                    if($invoiceStatusId === 1){ // VOID IF PAID

                        $apMaster->invoice_status_id = 5;
                        $apMaster->save();

                        $pvMaster = Payment_voucher_master::where('invoice_no',$no)->first();
                        if($pvMaster){
                            $pvMaster->pv_status_id = 5;
                            $pvMaster->save();
                        }
                    }
                    else{ // DELETE IF UNPAID
                        $apMaster->delete();
                    }

                    $actionType = ($invoiceStatusId === 1) ? 'void' : 'delete';
                    $globalController = new GlobalController();
                    $globalController->logAction(
                        'Supplier Invoice', 't_ap_master',
                        $actionType,
                        'Void/Delete Invoice No : ' . $no
                    );

                }

            }

            event(new POEvent( 'void'));
            event(new PVEvent( 'void'));
            event(new LogEvent( 'void'));
            event(new APEvent( 'void'));

            DB::commit(); // 👍 Success

            return response()->json([
                'token'     => 'Success',
                'message'   => 'Record(s) Voided',
                'action'    => 'Insert'
            ]);
        }
        catch (\Exception $e) {
            DB::rollBack(); // ❌ Failed
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'action'    => 'Insert'
            ]);
        }
    }
    public function getCountExistSupplier($supplier_code){
        return Supplier::where('supplier_code', $supplier_code)->count();
    }
    public function updateSupplierInvoice(Request $request, $id){
        $OrigID = $id;
        $GlobalPOnumber = '';
        $Action = ($OrigID === 0 ? 'insert' : 'update');

        $countSupplier = $this->getCountExistSupplier($request->supplier_code);
        if($countSupplier === 0){
            return response()->json([
                'token'     => 'Warning',
                'message'   => 'Supplier Code is not exists',
                'id'        => $id,
                'action'    => $Action
            ]);
        }

        if((int) $id === 0){

            $apCount = Accounts_payable_master::where('ap_number',$request->ap_number)->count();
            if($apCount > 0){
                return response()->json([
                    'token'     => 'Warning',
                    'message'   => 'Invoice already exists',
                    'id'        => $id,
                    'action'    => $Action
                ]);
            }
        }

        if($request->ex_rate === 0){
            return response()->json([
                'token'     => 'Error',
                'message'   => 'Exchange Rate is Required',
                'action'    => 'Insert'
            ]);
        }

        DB::beginTransaction();

        try {

            $currency = $request->currency;
            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $operator = GlobalController::getOperator( $currency . $baseCurrency);

            if ((int) $id === 0) {
                $invoice_status_id = 2;
                $inserMaster = [
                    'ap_number' => $request->ap_number,
                    'bank' => $request->bank,
                    'invoice_status_id' => $invoice_status_id,
                    'supplier_id' => $request->supplier_id,
                    'delivery_method_id' => $request->delivery_method_id,
                    'shipping_terms_id' => $request->shipping_terms_id,
                    'payment_terms_id' => $request->payment_terms_id,
                    'ap_date' => $request->ap_date,
                    'currency' => $request->currency,
                    'ex_rate' => $request->ex_rate,
                    'tax_group' => $request->tax_group,
                    'bill_to_id' => $request->bill_to_id,
                    'ship_to_id' => $request->ship_to_id,
                    'delivery_date' => $request->delivery_date,
                    'due_date' => $request->due_date,
                    'remarks' => $request->remarks,
                    'sub_total' => $request->sub_total,
                    'tax' => $request->tax,
                    'total' => $request->total,
                    'base_sub_total' => $request->base_sub_total,
                    'base_tax' => $request->base_tax,
                    'base_total' => $request->base_total,
                    'deposit' => $request->deposit,
                    'base_deposit' => $request->base_deposit,
                    'po_ex_rate' => $request->po_ex_rate,
                    'grn_ex_rate' => $request->grn_ex_rate,
                    'po_adv_pay' => $request->po_adv_pay,
                    'grn_base_total' => $request->grn_base_total,
                    'credit_used' => $request->credit_used,
                    'base_credit_used' => $request->base_credit_used,
                    'current_credit' => $request->current_credit,
                    'base_current_credit' => $request->base_current_credit,
                    'total_deduction' => $request->total_deduction,
                    'base_total_deduction' => $request->base_total_deduction,
                ];
                $poMaster = Accounts_payable_master::create($inserMaster);
                $OrigID = $poMaster->id;
                $GlobalPOnumber = $poMaster->ap_number;
            }
            else{
                $master = Accounts_payable_master::find($request['id']);
                if ($master) {
                    $old_ap_number = $master->ap_number;
                    $master->ap_number = $request->ap_number;
                    $master->bank = $request->bank;
                    $master->invoice_status_id = $request->invoice_status_id;
                    $master->supplier_id = $request->supplier_id;
                    $master->delivery_method_id = $request->delivery_method_id;
                    $master->shipping_terms_id = $request->shipping_terms_id;
                    $master->payment_terms_id = $request->payment_terms_id;
                    $master->ap_date = $request->ap_date;
                    $master->currency = $request->currency;
                    $master->ex_rate = $request->ex_rate;
                    $master->tax_group = $request->tax_group;
                    $master->bill_to_id = $request->bill_to_id;
                    $master->ship_to_id = $request->ship_to_id;
                    $master->delivery_date = $request->delivery_date;
                    $master->due_date = $request->due_date;
                    $master->sub_total = $request->sub_total;
                    $master->tax = $request->tax;
                    $master->total = $request->total;
                    $master->base_sub_total = $request->base_sub_total;
                    $master->base_tax = $request->base_tax;
                    $master->base_total = $request->base_total;
                    $master->deposit = $request->deposit;
                    $master->base_deposit = $request->base_deposit;
                    $master->po_ex_rate = $request->po_ex_rate;
                    $master->grn_ex_rate = $request->grn_ex_rate;
                    $master->po_adv_pay = $request->po_adv_pay;
                    $master->grn_base_total = $request->grn_base_total;
                    $master->credit_used = $request->credit_used;
                    $master->base_credit_used = $request->base_credit_used;
                    $master->current_credit = $request->current_credit;
                    $master->base_current_credit = $request->base_current_credit;
                    $master->total_deduction = $request->total_deduction;
                    $master->base_total_deduction = $request->base_total_deduction;
                    $master->save();
                    if($old_ap_number != $request->ap_number){
                        $records = Payment_voucher_master::all()->filter(function ($record) use ($old_ap_number) {
                            $refDataItems = explode('|', $record->ref_data);
                            return in_array($old_ap_number, $refDataItems);
                        });
                        foreach ($records as $record) {
                            $record->ref_data = str_replace($old_ap_number, $request->ap_number, $record->ref_data);
                            $record->invoice_no = str_replace($old_ap_number, $request->ap_number, $record->invoice_no);
                            $record->save();
                        }
                    }
                }
                $GlobalPOnumber = $master->ap_number;
            }

            if ($request->has('details')) {
                foreach ($request->details as $list) {
                    if (is_string($list)) {
                        $list = json_decode($list, true);
                    }
                    $base_deposit = 0;
                    if($baseCurrency != $currency){
                        $base_deposit = (float) $list['deposit'];
                    }
                    else{
                        if($operator === 'Divide'){
                            $base_deposit = (float) $list['deposit'] / (float) $request->ex_rate;
                        }
                        if($operator === 'Multiply'){
                            $base_deposit = (float) $list['deposit'] * (float) $request->ex_rate;
                        }
                    }

                    $recordID = $list['id'];
                    $ap_detail_id = 0;
                 
                    if((int) $list['is_deleted'] === 1){
                        $apDetail = Accounts_payable_details::find($list['id']);
                        if($apDetail){
                            $apDetail->delete();
                        }
                    }

                    $product_id = ($list['product_id'] === 0 ? null : $list['product_id']);
                    $service_id = ($list['service_id'] === 0 ? null : $list['service_id']);
                    $po_detail_id = ($list['po_detail_id'] === 0 ? null : $list['po_detail_id']);

                    if((int) $list['is_deleted'] === 0){
                        if ((int) $recordID === 0) {

                            $insertDetail = [
                                'ap_number' => $request->ap_number,
                                'ap_date' => $request->ap_date,
                                'product_id' => $product_id,
                                'service_id' => $service_id,
                                'po_number' => $list['po_number'],
                                'qty' => $list['qty'],
                                'currency' => $request->currency,
                                'total' => $list['total'],
                                'price' => $list['price'],
                                'received_date' => $list['received_date'],
                                'ex_rate' => $request->ex_rate,
                                'supplier_id' => $request->supplier_id,
                                'po_detail_id' => $po_detail_id,
                                'deposit' => $list['deposit'],
                                'base_deposit' => $base_deposit,
                                'po_ex_rate' => $list['po_ex_rate'],
                                'grn_ex_rate' => $list['grn_ex_rate'],
                                'po_adv_pay' => $list['po_adv_pay'],
                                'product_type' => $list['product_type'],
                            ];
                            $apDetail = Accounts_payable_details::create($insertDetail);
                            $ap_detail_id = $apDetail->id;
                        }
                        else{
                            $detail = Accounts_payable_details::find($list['id']);
                            if ($detail) {
                                $detail->ap_number = $request->ap_number;
                                $detail->ap_date = $request->ap_date;
                                $detail->product_id = $product_id;
                                $detail->service_id = $service_id;
                                $detail->po_number = $list['po_number'];
                                $detail->qty = $list['qty'];
                                $detail->currency = $request->currency;
                                $detail->total = $list['total'];
                                $detail->price = $list['price'];
                                $detail->ex_rate = $request->ex_rate;
                                $detail->supplier_id = $request->supplier_id;
                                $detail->po_detail_id = $po_detail_id;
                                $detail->deposit = $list['deposit'];
                                $detail->base_deposit = $base_deposit;
                                $detail->po_ex_rate = $list['po_ex_rate'];
                                $detail->grn_ex_rate = $list['grn_ex_rate'];
                                $detail->po_adv_pay = $list['po_adv_pay'];
                                $detail->product_type = $list['product_type'];
                                $detail->save();
                                $ap_detail_id = $detail->id;

                                if($list['product_type'] == 0){
                                    $offered_cost = Products::where('id',$list['product_id'])->value('offered_cost') ?? 0;
                                    if($offered_cost != $detail->price){
                                        $this->triggerUpdateCostProductOnPO($list['product_id'],$list['price'],$list['price'],$list['po_detail_id']);
                                        $this->doGetProductOfferedCost($list['product_id'],$list['price'],$list['po_number'],$list['total'],$request->ex_rate);
                                    }

                                    $grnDetail = Grn_details::where('po_id',$list['po_detail_id'])->first();
                                    if($grnDetail){
                                        $grnDetail->ap_invoice_no = $request->ap_number;
                                        $grnDetail->save();
                                    }
                                }
                            }
                        }
                    }
                }
            }

            $globalController = new GlobalController();
            $globalController->logAction(
                'Supplier Invoice', 't_ap_master',
                $Action,
                'AP Number : ' . $GlobalPOnumber
            );

            event(new POEvent( $Action));
            event(new PVEvent( $Action));
            event(new APEvent( $Action));
            event(new LogEvent( 'insert'));

            DB::commit(); // 👍 Success

            return response()->json([
                'token'     => 'Success',
                'message'   => 'Supplier Invoice Successfully Saved',
                'id'        => $OrigID,
                'action'    => $Action
            ]);

        }
        catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'token'     => 'Error',
                'message'   => $e->getMessage(),
                'id'        => 0,
                'action'    => $Action
            ]);
        }
    }
    public function triggerUpdateCostProductOnPO(string $product_id, float $offered_cost, float $item_cost, int $po_id){
        DB::transaction(function () use ($product_id, $offered_cost, $item_cost, $po_id) {

            // Get PO Detail
            $poDetail = POrder_detail::where('product_id', $product_id)
                ->where('id', $po_id)
                ->first();

            $ex_rate = $poDetail->ex_rate ?? 1;
            $qty = $poDetail->qty ?? 0;
            $po_number = $poDetail->po_number;

            $total = $qty * $offered_cost;
            $base_price = $ex_rate * $offered_cost;
            $base_total = $ex_rate * $total;

            // Update porder_detail
            $poDetail->update([
                'price' => $offered_cost,
                'total' => $total,
                'base_price' => $base_price,
                'base_total' => $base_total,
                'item_cost' => $item_cost,
            ]);

            // Recalculate PO master totals
            $masterTotals = POrder_detail::where('po_number', $po_number)
                ->selectRaw('COALESCE(SUM(Total), 0) as total, COALESCE(SUM(base_total), 0) as base_total')
                ->first();

            // Update porder_master
            POrder_master::where('po_number', $po_number)->update([
                'po_amount' => $masterTotals->total,
                'base_currency' => $masterTotals->base_total,
            ]);
        });
    }
    public function doGetProductOfferedCost($productId,$price,$poNumber,$total,$exRate){
        $product = Products::find($productId);
        if ($product) {
            $product->offered_cost = $price;
            $product->item_cost = $price * $exRate;
            $product->save();
        }
        $this->UpdateRCPrice($productId);
        $this->UpdateWHPrice($productId);

        return $product;
    }
    public function UpdateRCPrice($productId){
        // Find the price setup with type = 'retail' and join with product_items
        $priceSetups = Price_setup::where('type', 'retail')
            ->whereHas('productItem', function ($query) use ($productId) {
                $query->where('id', $productId);
            })
            ->with(['productItem'])->get();

        foreach ($priceSetups as $setup) {
            $currency = $setup->currency;
            $itemCost = $setup->productItem->item_cost ?? 0;

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $exRate = GlobalController::getCurrentDateExRate($currency, $baseCurrency);

            $priceAProfit = 0;
            $priceAPrcnt = '';

            if ($setup->retail_price > 0) {
                $priceA = $setup->retail_price * $exRate;
                $priceAProfit = $priceA - $itemCost;

                $priceAPrcnt = intval($this->getPercentage($priceAProfit, $itemCost));
            }
            $setup->profit_prcnt_a = $priceAPrcnt === '' ? 0 : $priceAPrcnt;
            $setup->save();
        }
        return $priceSetups;
    }
    public function UpdateWHPrice($productId){
        $priceSetups = Price_setup::where('type', 'wholesale')
            ->whereHas('productItem', function ($query) use ($productId) {
                $query->where('id', $productId);
            })
            ->with('productItem')
            ->get();

        foreach ($priceSetups as $setup) {
            $currency = $setup->currency;
            $itemCost = $setup->productItem->item_cost ?? 0;

            $baseCurrency = ISSettings::where('tag', 'basecurrency')->value('en');
            $exRate = GlobalController::getCurrentDateExRate($currency, $baseCurrency);

            // Initialize profit percentages
            $profitA = $profitB = $profitC = '';

            if ($setup->price_a > 0) {
                $priceA = $setup->price_a * $exRate;
                $profit = $priceA - $itemCost;
                $profitA = intval($this->getPercentage($profit, $itemCost));
            }

            if ($setup->price_b > 0) {
                $priceB = $setup->price_b * $exRate;
                $profit = $priceB - $itemCost;
                $profitB = intval($this->getPercentage($profit, $itemCost));
            }

            if ($setup->price_c > 0) {
                $priceC = $setup->price_c * $exRate;
                $profit = $priceC - $itemCost;
                $profitC = intval($this->getPercentage($profit, $itemCost));
            }

            $setup->profit_prcnt_a = $profitA === '' ? 0 : $profitA;
            $setup->profit_prcnt_b = $profitB === '' ? 0 : $profitB;
            $setup->profit_prcnt_c = $profitC === '' ? 0 : $profitC;
            $setup->save();
        }
        return $priceSetups;
    }
    public function getPercentage($p_TotalProfit,$p_TotalPurchase){
        $TotalProfit = $p_TotalProfit;
        $TotalPurchase = $p_TotalPurchase;
        $returnPrcnt = ($p_TotalProfit / $p_TotalPurchase) * 100;
        return $returnPrcnt;
    }
    public function getSuppInvoiceProductInfo($productCode,$supplierId){
        $product = Products::where('product_code', 'like', "%{$productCode}%")->get();
        $count = $product->count();

        $list = [];

        if ($count === 0) {

            $productService = Product_services::where('service_code', 'like', "%{$productCode}%")->get();
            $countService = $productService->count();

            if ($countService === 1 && $productService->first()) {
                $service = $productService->first();

                $list = [
                    'product_id' => 0,
                    'service_id' => $service->id,
                    'product_code' => $service->service_code,
                    'product_title_en' => $service->description_en,
                    'product_title_cn' => $service->description_cn,
                    'price' => 0,
                    'qty' => 1,
                    'total' => 0,
                    'grn_ex_rate' => 0,
                    'grn_base_total' => 0,
                    'received_date' => date('M d Y'),
                    'product_type' => 1,
                    'po_number' => "",
                    'currency' => "",
                    'receive_qty' => 0,
                    'deposit_pv' => "",
                    'po_ex_rate' => 0,
                    'deposit' => 0,
                    'po_adv_pay' => 0,
                    'base_deposit' => 0,
                ];

                return response()->json([
                    'success' => true,
                    'token'   => 'Success',
                    'message' => 'success',
                    'list'    => $list,
                ]);

            } else {
                return response()->json([
                    'success' => true,
                    'token'   => 'ProductNotExists',
                    'message' => 'Product Code does not exist',
                    'list'    => [],
                ]);
            }

        }
        if ($count > 1) {
            return response()->json([
                'success' => true,
                'token'   => 'MultipleProducts',
                'message' => 'Multiple Products',
                'list'    => [],
            ]);
        }

        $poDetails = POrder_detail::where('supplier_id',$supplierId)->whereHas('product', function ($query) use ($productCode) {
            $query->where('product_code', 'like', "%{$productCode}%");
        })->with('product')->get();

        $poDetail = $poDetails->first();
        $product = $product->first();

        $apInvoiceQty = Accounts_payable_details::where('product_id',$product->id)
            ->where('po_number',$poDetail->po_number)->sum('qty');

        $qty = $poDetail->qty - $apInvoiceQty;
        $total = $qty *  $poDetail->price;

        $grnDetail = Grn_details::where('po_id',$poDetail->id)
            ->where('product_id',$poDetail->product_id)->first();
        $received_date = $grnDetail->grn_date;
        $grn_ex_rate = $grnDetail->ex_rate;
        $grn_base_total = $grnDetail->base_total;

        if($qty > 0){
            $list = [
                'product_id' => $product->id,
                'service_id' => 0,
                'product_code' => $product->product_code,
                'product_title_en' => $product->product_title_en,
                'product_title_cn' => $product->product_title_cn,
                'price' => $poDetail->price,
                'qty' => $qty,
                'total' => $total,
                'grn_ex_rate' => $grn_ex_rate,
                'grn_base_total' => $grn_base_total,
                'received_date' => $received_date,
                'product_type' => 0,
                'po_number' => $poDetail->po_number,
                'currency' => $poDetail->currency,
                'receive_qty' => $poDetail->receive_qty,
                'deposit_pv' => $poDetail->deposit_pv,
                'po_ex_rate' => $poDetail->ex_rate,
                'deposit' => $poDetail->deposit,
                'po_adv_pay' => $poDetail->base_deposit,
                'base_deposit' => $poDetail->base_deposit,
            ];
        }
        return response()->json([
            'success' => true,
            'token'   => 'Success',
            'message' => 'success',
            'list'    => $list,
        ]);
    }
    public function getAllProductsBySuppInv(Request $request, $supplierId){
        $perPage = (int) $request->input('per_page', 10);
        $search = $request->input('search', '');
        $sortId = $request->input('sortId', []);
        // If sortId is not an array, convert it to an array
        if (!is_array($sortId)) {
            $sortId = explode(',', $sortId);  // Convert comma-separated string to array
        }
        // Step 1: Build base query with relationships
        $query = POrder_detail::with(['product'])
            ->whereNotNull('product_id')
            ->where('supplier_id', $supplierId);

        // Apply search filter
        if (!empty($search)) {
            $query->where(function ($q) use ($search) {
                $q->where('po_number', 'like', "%{$search}%")
                    ->orWhereHas('product', function ($q2) use ($search) {
                        $q2->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    });
            });
        }

        // Get all matching PO details
        $poDetails = $query->get();

        // Step 2: Get AP invoiced quantities
        $productIds = $poDetails->pluck('product_id')->unique();
        $poNumbers = $poDetails->pluck('po_number')->unique();

        $apInvoiced = Accounts_payable_details::whereIn('product_id', $productIds)
            ->whereIn('po_number', $poNumbers)
            ->selectRaw('product_id, po_number, SUM(qty) as total_qty')
            ->groupBy('product_id', 'po_number')
            ->get()
            ->keyBy(function($item) {
                return $item->product_id . '_' . $item->po_number;
            });

        // Step 3: Get latest GRN for each PO detail
        $poDetailIds = $poDetails->pluck('id')->toArray();
        
        $grnData = Grn_details::whereIn('po_id', $poDetailIds)
            ->orderBy('id', 'desc')
            ->get()
            ->groupBy('po_id')
            ->map(function($group) {
                return $group->first(); // Get the latest one
            });

        // Step 4: Transform and filter data
        $data = $poDetails->map(function ($item) use ($apInvoiced, $grnData) {
            // Calculate remaining quantity
            $key = $item->product_id . '_' . $item->po_number;
            $apInvoicedQty = isset($apInvoiced[$key]) ? $apInvoiced[$key]->total_qty : 0;
            $remainingQty = $item->qty - $apInvoicedQty;

            // Filter out items with no remaining quantity
            if ($remainingQty <= 0) {
                return null;
            }

            // Get GRN data
            $grn = isset($grnData[$item->id]) ? $grnData[$item->id] : null;

            return [
                'id' => $item->id,
                'po_ex_rate' => $item->ex_rate,
                'po_number' => $item->po_number,
                'po_detail_id' => $item->id,
                'deposit_pv' => $item->deposit_pv,
                'deposit' => $item->deposit,
                'base_deposit' => $item->base_deposit,
                'po_adv_pay' => $item->base_deposit,
                'product_id' => $item->product_id,
                'supplier_id' => $item->supplier_id,
                'price' => (float) $item->price,
                'currency' => $item->currency,
                'qty' => $remainingQty,
                'total' => round($remainingQty * $item->price, 2),
                'received_date' => $grn ? $grn->grn_date : '',
                'grn_ex_rate' => $grn ? (float) $grn->ex_rate : 0,
                'grn_base_total' => $grn ? (float) $grn->base_total : 0,
                'grn_id' => $grn ? $grn->id : 0,
                'product_code' => $item->product ? $item->product->product_code : '',
                'product_title_en' => $item->product ? $item->product->product_title_en : '',
                'product_title_cn' => $item->product ? $item->product->product_title_cn : '',
            ];
        })->filter()->values(); // Remove nulls and reset array keys

        // Step 5: Sort by received_date DESC, then id DESC
        $data = $data->sort(function($a, $b) use ($sortId) {
            // First priority: Sort by sortId order if provided
            if (!empty($sortId)) {
                $posA = array_search($a['id'], $sortId);
                $posB = array_search($b['id'], $sortId);
                
                // If both IDs are in sortId array, sort by their position
                if ($posA !== false && $posB !== false) {
                    return $posA - $posB;
                }
                // If only A is in sortId, it comes first
                if ($posA !== false) {
                    return -1;
                }
                // If only B is in sortId, it comes first
                if ($posB !== false) {
                    return 1;
                }
            }
            
            // Second priority: Sort by received_date (DESC - latest first)
            $dateA = $a['received_date'] ?: '0000-00-00';
            $dateB = $b['received_date'] ?: '0000-00-00';
            
            // Convert to timestamps for proper date comparison
            $timeA = strtotime($dateA);
            $timeB = strtotime($dateB);
            
            if ($timeB !== $timeA) {
                return $timeB - $timeA; // DESC: latest dates first
            }
            
            // Third priority: Sort by id (DESC)
            return $b['id'] - $a['id'];
        })->values();

        // Step 6: Handle "load all" case
        if ($perPage === -1) {
            return response()->json([
                'success' => true,
                'message' => 'success',
                'product' => [
                    'current_page' => 1,
                    'data' => $data->all(),
                    'last_page' => 1,
                    'per_page' => $data->count(),
                    'total' => $data->count(),
                ],
            ]);
        }

        // Step 7: Manual pagination
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $total = $data->count();
        $lastPage = $total > 0 ? (int) ceil($total / $perPage) : 1;
        $currentPage = max(1, min($currentPage, $lastPage));
        
        $paginated = new LengthAwarePaginator(
            items: $data->forPage($currentPage, $perPage)->values()->all(),
            total: $total,
            perPage: $perPage,
            currentPage: $currentPage,
            options: ['path' => request()->url(), 'query' => request()->query()]
        );

        return response()->json([
            'success' => true,
            'message' => 'success',
            'product' => [
                'current_page' => $paginated->currentPage(),
                'data' => $paginated->items(),
                'last_page' => $paginated->lastPage(),
                'per_page' => $paginated->perPage(),
                'total' => $paginated->total(),
            ],
        ]);
    }
    public function getProductsBySupplierId($supplierId){
        // Step 1: Get all PO details for this supplier with product relationship
        $poDetails = POrder_detail::with(['product'])
            ->where('supplier_id', $supplierId)
            ->get();

        if ($poDetails->isEmpty()) {
            return response()->json([
                'success' => false,
                'message' => 'No records found for this supplier',
                'product' => []
            ]);
        }

        // Step 2: Get AP invoiced quantities
        $productIds = $poDetails->pluck('product_id')->unique();
        $poNumbers = $poDetails->pluck('po_number')->unique();

        $apInvoiced = Accounts_payable_details::whereIn('product_id', $productIds)
            ->whereIn('po_number', $poNumbers)
            ->selectRaw('product_id, po_number, SUM(qty) as total_qty')
            ->groupBy('product_id', 'po_number')
            ->get()
            ->keyBy(function($item) {
                return $item->product_id . '_' . $item->po_number;
            });

        // Step 3: Get latest GRN for each PO detail (using MAX aggregation like SQL)
        $poDetailIds = $poDetails->pluck('id')->toArray();
        
        $grnData = Grn_details::whereIn('po_id', $poDetailIds)
            ->selectRaw('po_id, MAX(id) as max_grn_id, MAX(grn_date) as grn_date, MAX(ex_rate) as ex_rate, MAX(base_total) as base_total')
            ->groupBy('po_id')
            ->get()
            ->keyBy('po_id');

        // Step 4: Transform and filter data
        $data = $poDetails->map(function ($item) use ($apInvoiced, $grnData) {
            // Calculate Qty: a.Qty - (SELECT COALESCE(SUM(xx.Qty), 0) FROM apinvoice_detail...)
            $key = $item->product_id . '_' . $item->po_number;
            $apInvoicedQty = isset($apInvoiced[$key]) ? $apInvoiced[$key]->total_qty : 0;
            $calculatedQty = $item->qty - $apInvoicedQty;

            // Calculate RemQty: a.Qty - a.ReceiveQty (using original qty)
            $remQty = $item->qty - $item->receive_qty;

            // Get GRN data with MAX values
            $grn = isset($grnData[$item->id]) ? $grnData[$item->id] : null;
            $grnId = $grn ? $grn->max_grn_id : 0;

            // Build result BEFORE filtering
            $result = [
                'id' => $item->id,
                'grn_id' => $grnId,
                'item_code' => $item->product ? $item->product->product_code : '',
                'po_number' => $item->po_number,
                'invoice_pv' => $item->invoice_pv ?? '',
                'qty' => $calculatedQty,  // This is the calculated qty after AP deduction
                'receive_qty' => $item->receive_qty,  // Original receive_qty
                'rem_qty' => $remQty,
                'currency' => $item->currency,
                'price' => (float) $item->price,
                'total' => round($calculatedQty * $item->price, 2),  // Price * calculated Qty
                'received_date' => $grn ? ($grn->grn_date ?? '') : '',
                'supplier' => $item->supplier_id,
                'grn_ex_rate' => $grn ? (float) ($grn->ex_rate ?? 0) : 0,
                'grn_base_total' => $grn ? (float) ($grn->base_total ?? 0) : 0,
                'deposit' => $item->deposit,
                'base_deposit' => $item->base_deposit,
                'po_adv_pay' => $item->base_deposit,
                'ex_rate' => $item->ex_rate,
                'description' => $item->product ? $item->product->product_title_en : '',
                'description_cn' => $item->product ? $item->product->product_title_cn : '',
            ];

            // Apply WHERE conditions AFTER building result
            // WHERE a.ReceiveQty > 0 AND a.Qty > 0 AND CHAR_LENGTH(a.InvoicePV) < 4
            if ($item->receive_qty > 0 && $calculatedQty > 0 && strlen($item->invoice_pv ?? '') < 4) {
                return $result;
            }

            return null;
        })->filter()->values();

        // Step 5: Sort by GRNID DESC, ID DESC (matching SQL ORDER BY)
        $data = $data->sort(function($a, $b) {
            // First sort by grn_id DESC
            if ($b['grn_id'] !== $a['grn_id']) {
                return $b['grn_id'] - $a['grn_id'];
            }
            // Then sort by id DESC
            return $b['id'] - $a['id'];
        })->values();

        return response()->json([
            'success' => true,
            'message' => 'success',
            'product' => $data->all()
        ]);
    }
    public function getPaidItemNotReceived(Request $request){
        $perPage = (int) $request->input('per_page', 10);
        $search = $request->input('search', '');

        // Step 1: Build base query with relationships
        $query = Accounts_payable_details::with([
            'product',
            'apMaster.supplier',
            'apMaster.invoiceStatus'
        ])
        ->join('t_ap_master as B', 'B.ap_number', '=', 't_ap_detail.ap_number')
        ->where('t_ap_detail.product_type', 0)
        ->where('B.invoice_status_id', 1);

        // Apply search filter
        if (!empty($search)) {
            $query->where(function ($q) use ($search) {
                $q->where('t_ap_detail.ap_number', 'like', "%{$search}%")
                    ->orWhere('t_ap_detail.po_number', 'like', "%{$search}%")
                    ->orWhereHas('product', function ($q2) use ($search) {
                        $q2->where('product_code', 'like', "%{$search}%")
                            ->orWhere('product_title_en', 'like', "%{$search}%")
                            ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('apMaster.supplier', function ($q3) use ($search) {
                        $q3->where('suppliername_en', 'like', "%{$search}%")
                            ->orWhere('suppliername_cn', 'like', "%{$search}%")
                            ->orWhere('supplier_code', 'like', "%{$search}%");
                    });
            });
        }

        // Get all AP invoice details grouped by ap_number
        $apDetails = $query->select('t_ap_detail.*')
            ->orderBy('B.id', 'desc')
            ->get()
            ->groupBy('ap_number');

        // Step 2: Get PO details for comparison (F.ReceiveQty < A.Qty check)
        $poNumbers = $apDetails->flatten()->pluck('po_number')->unique();
        $productIds = $apDetails->flatten()->pluck('product_id')->unique();

        $poDetails = POrder_detail::whereIn('po_number', $poNumbers)
            ->whereIn('product_id', $productIds)
            ->get()
            ->keyBy(function($item) {
                return $item->po_number . '_' . $item->product_id;
            });

        // Step 3: Get Payment Voucher data (LEFT JOIN with FIND_IN_SET logic)
        $apNumbers = $apDetails->keys();
        $paymentVouchers = Payment_voucher_master::whereRaw("FIND_IN_SET(?, REPLACE(invoice_no, '|', ',')) <> 0", [$apNumbers->first()])
            ->orWhere(function($q) use ($apNumbers) {
                foreach($apNumbers as $apNo) {
                    $q->orWhereRaw("FIND_IN_SET(?, REPLACE(invoice_no, '|', ',')) <> 0", [$apNo]);
                }
            })
            ->get()
            ->keyBy('pv_number');

        // Step 4: Transform and aggregate data
        $data = $apDetails->map(function ($items, $apNumber) use ($poDetails, $paymentVouchers) {
            $firstItem = $items->first();
            $apMaster = $firstItem->apMaster;

            // Aggregate product codes and descriptions
            $itemCodes = [];
            $descriptions = [];
            $descriptionsCN = [];
            $poNumbers = [];
            $remPOAmount = 0;
            $baseRemPOAmount = 0;

            $hasValidItems = false;

            foreach ($items as $item) {
                $key = $item->po_number . '_' . $item->product_id;
                $poDetail = $poDetails->get($key);

                // Check: F.ReceiveQty < A.Qty
                if ($poDetail && $poDetail->receive_qty < $item->qty) {
                    $hasValidItems = true;
                    
                    // Calculate (A.Qty - F.ReceiveQty) * A.Price
                    $qtyDiff = $item->qty - $poDetail->receive_qty;
                    $remPOAmount += $qtyDiff * $item->price;
                    $baseRemPOAmount += $qtyDiff * $item->price * $item->ex_rate;

                    if ($item->product) {
                        $itemCodes[] = $item->product->product_code;
                        $descriptions[] = $item->product->product_title_en;
                        $descriptionsCN[] = $item->product->product_title_cn;
                    }
                    $poNumbers[] = $item->po_number;
                }
            }

            // Filter: WHERE F.ReceiveQty < A.Qty (if no valid items, return null)
            if (!$hasValidItems || $remPOAmount <= 0) {
                return null;
            }

            // Find matching payment voucher
            $pv = null;
            foreach ($paymentVouchers as $voucher) {
                $invoiceNos = str_replace('|', ',', $voucher->invoice_no ?? '');
                if (strpos($invoiceNos, $apNumber) !== false) {
                    $pv = $voucher;
                    break;
                }
            }
            $suppliername_en = $apMaster->supplier ? $apMaster->supplier->suppliername_en : '';
            $suppliername_cn = $apMaster->supplier ? $apMaster->supplier->suppliername_cn : '';
            $suppliername_cn = ($suppliername_cn === '' ? $suppliername_en : $suppliername_cn);
            return [
                'id' => $apMaster->id,
                'pv_date' => $pv ? $pv->pv_date : null,
                'ap_number' => $apNumber,
                'pv_number' => $pv ? $pv->pv_number : null,
                'supplier_id' => $apMaster->supplier_id,
                'supplier_code' => $apMaster->supplier ? $apMaster->supplier->supplier_code : '',
                'suppliername_en' => $suppliername_en,
                'suppliername_cn' => $suppliername_cn,
                'po_number' => implode(',', array_unique($poNumbers)),
                'currency' => $apMaster->currency,
                'total_deduction' => $apMaster->total_deduction,
                'base_total_deduction' => $apMaster->base_total_deduction,
                'total' => round($remPOAmount, 2),
                'base_total' => round($baseRemPOAmount, 2),
                'total0' => round($remPOAmount, 2),
                'default_currency0' => round($baseRemPOAmount, 2),
                'total' => round($remPOAmount, 2),
                'default_currency' => round($baseRemPOAmount, 2),
                'details' => $items->map(function ($item) use ($poDetails) {
                    $key = $item->po_number . '_' . $item->product_id;
                    $poDetail = $poDetails->get($key);

                    $qtyDiff = $poDetail && $poDetail->receive_qty < $item->qty
                        ? $item->qty - $poDetail->receive_qty
                        : 0;
                    $total = round($qtyDiff * $item->price, 2);
                    if($total > 0){
                        return [
                            'ap_detail_id' => $item->id,
                            'po_number' => $item->po_number,
                            'product_id' => $item->product_id,
                            'product_code' => optional($item->product)->product_code,
                            'product_title_en' => optional($item->product)->product_title_en,
                            'product_title_cn' => optional($item->product)->product_title_cn,
                            'qty' => $qtyDiff,
                            'currency' => $item->currency,
                            'receive_qty' => $poDetail ? $poDetail->receive_qty : 0,
                            'diff_qty' => $qtyDiff,
                            'price' => $item->price,
                            'total' => round($qtyDiff * $item->price, 2),
                            'base_total' => round($qtyDiff * $item->price * $item->ex_rate, 2),
                        ];
                    }
                })->filter()->values()


            ];
        })->filter()->values();

        // Step 5: Sort by ID DESC (matching ORDER BY B.ID DESC)
        $data = $data->sortByDesc('id')->values();

        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];
        // Get all active currencies

        // Footer2 totals for all records, including 0 if no orders
        $groupedTotals = $data->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total0'),
            ]);

        // Build footer2 in fixed order
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $data->sum('default_currency0') // total BASE_RMB
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();

        // Step 6: Handle "load all" case
        if ($perPage === -1) {
            return response()->json([
                'success' => true,
                'message' => 'success',
                'data' => [
                    'current_page' => 1,
                    'data' => $data->all(),
                    'footer2' => $footer2,
                    'last_page' => 1,
                    'per_page' => $data->count(),
                    'total' => $data->count(),
                ],
            ]);
        }

        // Step 7: Manual pagination
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $total = $data->count();
        $lastPage = $total > 0 ? (int) ceil($total / $perPage) : 1;
        $currentPage = max(1, min($currentPage, $lastPage));
        
        $paginated = new LengthAwarePaginator(
            items: $data->forPage($currentPage, $perPage)->values()->all(),
            total: $total,
            perPage: $perPage,
            currentPage: $currentPage,
            options: ['path' => request()->url(), 'query' => request()->query()]
        );

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $paginated->currentPage(),
                'data' => $paginated->items(),
                'footer2' => $footer2,
                'last_page' => $paginated->lastPage(),
                'per_page' => $paginated->perPage(),
                'total' => $paginated->total(),
            ],
        ]);
    }
    public function getAllPreorderByProduct(Request $request){
        $perPage = (int) $request->input('per_page', 10);
        $search = $request->input('search', '');

        $productIds = $request->input('productIds', []);
     
        // Base query optimized with selectRaw for specific columns
        $query = Orders::with(['customer', 'product', 'status'])
            ->where('show_category', 'orders')
            ->orderByRaw("FIELD(order_status, 3) DESC")
            ->orderByRaw("DATE_FORMAT(STR_TO_DATE(order_date, '%b %d %Y'), '%Y%m%d') DESC")
            ->orderByDesc('id');

        if (!empty($productIds)) {
            $query->whereHas('product', fn($q) => $q->whereIn('id', $productIds));
        }

        // Optimized search filter
        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('order_id', 'like', "%{$search}%")
                    ->orWhere('rvoucher_no', 'like', "%{$search}%")
                    ->orWhere('po_number', 'like', "%{$search}%")
                    ->orWhere('rwarehouse', 'like', "%{$search}%")
                    ->orWhere('pod', 'like', "%{$search}%")
                    ->orWhereHas('product', function ($q) use ($search) {
                        $q->where('product_code', 'like', "%{$search}%")
                        ->orWhere('product_title_en', 'like', "%{$search}%")
                        ->orWhere('product_title_cn', 'like', "%{$search}%");
                    })
                    ->orWhereHas('customer', function ($q) use ($search) {
                        $q->where('customer_code', 'like', "%{$search}%");
                    });
            });
        }

        // Paginate the results (don't fetch all records if unnecessary)
        $result = $perPage === -1 ? $query->get() : $query->paginate($perPage);

        $data = $result->map($this->transformOrderDataPreorder());

        // Preparing the response
        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $result->currentPage(),
                'data' => $data,
                'last_page' => $result->lastPage(),
                'per_page' => $result->perPage(),
                'total' => $result->total(),
            ]
        ]);
    }
    private function transformOrderDataPreorder(){
        return function ($list) {
            // Transforming the order data

            $account_name_en = optional($list->customer)->account_name_en;
            $account_name_cn = optional($list->customer)->account_name_cn;
            $account_name_cn = ($account_name_cn === '' ? $account_name_en : $account_name_cn);

            $list->sales_person_name = optional($list->salesPerson)->full_name ?? '';
            $list->status_en = optional($list->status)->status_en;
            $list->status_cn = optional($list->status)->status_cn;
            $list->customer_code = optional($list->customer)->customer_code;
            $list->account_name_en = $account_name_en;
            $list->account_name_cn = $account_name_cn;
            $list->product_code = optional($list->product)->product_code;
            $list->product_title_en = optional($list->product)->product_title_en;
            $list->product_title_cn = optional($list->product)->product_title_cn;
            $list->source_en = optional($list->customer->source)->description_en;
            $list->source_cn = optional($list->customer->source)->source_cn;
            $list->customer_type = optional($list->customer)->customer_type;
            $list->total = $list->qty * $list->price;
            $list->deposit = $list->order_status == 2 ? 0 : $list->item_deposit;
            $list->base_deposit = $list->order_status == 2 ? 0 : $list->base_item_deposit;
            return $list;
        };
    }
    public function getUnpaidItemReceived(Request $request){
        $perPage = (int) $request->input('per_page', 15);
        $search = $request->input('search', '');

        // Base query builder reflecting your SQL grouping
        $builder = DB::table('t_grn_detail as a')
            ->leftJoin('t_ap_detail as b', function ($join) {
                $join->on('b.product_id', '=', 'a.product_id')
                    ->on('b.po_number', '=', 'a.po_number');
            })
            ->leftJoin('t_ap_master as c', 'c.ap_number', '=', 'b.ap_number')
            ->join('m_suppliers as d', 'd.id', '=', 'a.supplier_id')
            ->join('t_grn_master as e', 'e.grn_no', '=', 'a.grn_no')
            ->leftJoin('t_porder_detail as f', function ($join) {
                $join->on('f.po_number', '=', 'a.po_number')
                    ->on('f.product_id', '=', 'a.product_id');
            })
            ->leftJoin('m_products as g', 'g.id', '=', 'a.product_id')
            ->select([
                DB::raw("FLOOR(RAND() * 1000000) AS index_id"),
                DB::raw("GROUP_CONCAT(a.id SEPARATOR ',') AS id"),
                DB::raw("MAX(a.supplier_id) AS supplier_id"),
                DB::raw("MAX(d.supplier_code) AS supplier_code"),
                DB::raw("MAX(d.suppliername_en) AS suppliername_en"),
                DB::raw("MAX(d.suppliername_cn) AS suppliername_cn"),
                'a.grn_no',
                DB::raw("MAX(a.currency) AS currency"),
                DB::raw("MAX(a.ex_rate) AS ex_rate"),
                DB::raw("MAX(a.ap_invoice_no) AS ap_number"),
                DB::raw("MAX(a.grn_date) AS grn_date"),
                DB::raw("MAX(DATE_FORMAT(STR_TO_DATE(a.grn_date, '%M %d %Y'), '%Y-%m-%d')) AS grn_dateNumber"),
                DB::raw("MAX(COALESCE(c.due_date, '')) AS due_date"),
                DB::raw("MAX(COALESCE(c.invoice_status_id, 0)) AS invoice_status_id"),
                DB::raw("COALESCE(SUM(f.deposit), 0) AS deposit"),
                DB::raw("COALESCE(SUM(f.base_deposit), 0) AS base_deposit"),
                DB::raw("SUM(a.total) AS total"),
                DB::raw("SUM(a.base_total) AS base_total"),
            ])
            ->whereRaw("COALESCE(c.invoice_status_id, 0) <> 1")
            ->whereNotNull('a.product_id')
            ->whereRaw("COALESCE(a.total, 0) - COALESCE(f.deposit, 0) > 0")
            ->where('e.grn_status_id', 2)
            ->where('a.imported', 0);

        // Apply search filter
        if (!empty($search)) {
            $builder->where(function ($q) use ($search) {
                $q->where('a.grn_no', 'like', "%{$search}%")
                ->orWhere('d.supplier_code', 'like', "%{$search}%")
                ->orWhere('d.suppliername_en', 'like', "%{$search}%")
                ->orWhere('d.suppliername_cn', 'like', "%{$search}%")
                ->orWhere('g.product_code', 'like', "%{$search}%")          // added
                ->orWhere('g.product_title_en', 'like', "%{$search}%")     // added
                ->orWhere('g.product_title_cn', 'like', "%{$search}%");    // added
            });
        }

        $builder->groupBy('a.grn_no')
            ->orderByDesc('a.grn_no');

        // Handle "get all" case with per_page = -1
        if ($perPage === -1) {
            $allGrouped = $builder->get();

            // Get all grn_no for details fetch
            $allGrnNos = $allGrouped->pluck('grn_no')->all();

            // Fetch ungrouped details for all grn_no
            $allDetails = DB::table('t_grn_detail as a')
                ->leftJoin('t_ap_detail as b', function ($join) {
                    $join->on('b.product_id', '=', 'a.product_id')
                        ->on('b.po_number', '=', 'a.po_number');
                })
                ->leftJoin('t_ap_master as c', 'c.ap_number', '=', 'b.ap_number')
                ->join('m_suppliers as d', 'd.id', '=', 'a.supplier_id')
                ->join('t_grn_master as e', 'e.grn_no', '=', 'a.grn_no')
                ->leftJoin('t_porder_detail as f', function ($join) {
                    $join->on('f.po_number', '=', 'a.po_number')
                        ->on('f.product_id', '=', 'a.product_id');
                })
                ->leftJoin('m_products as g', 'g.id', '=', 'a.product_id')
                ->select([
                    'a.id',
                    'a.grn_no',
                    'a.product_id',
                    'g.product_code',
                    'g.product_title_en',
                    'g.product_title_cn',
                    'a.total',
                    'a.base_total',
                    'a.currency',
                    'a.qty',
                    'a.price',
                    'f.deposit',
                    'f.base_deposit',
                ])
                ->whereIn('a.grn_no', $allGrnNos)
                ->get()
                ->groupBy('grn_no');

            // Attach details to grouped
            $allGrouped = $allGrouped->map(function ($item) use ($allDetails) {
                $item->details = $allDetails->get($item->grn_no, collect())->values();
                return $item;
            });

            return response()->json([
                'success' => true,
                'message' => 'success',
                'list' => [
                    'current_page' => 1,
                    'data' => $allGrouped,
                    'last_page' => 1,
                    'per_page' => $allGrouped->count(),
                    'total' => $allGrouped->count(),
                ],
            ]);
        }

        // Paginate normally
        $page = LengthAwarePaginator::resolveCurrentPage();
        $total = $builder->cloneWithout(['orders', 'limit', 'offset'])->count(DB::raw('DISTINCT a.grn_no'));
        $groupedResults = $builder
            ->skip(($page - 1) * $perPage)
            ->take($perPage)
            ->get();

        $grnNosForPage = $groupedResults->pluck('id') // Collection of strings like "1322,1321,1320"
            ->map(function ($idString) {
                return explode(',', $idString);  // split string into array of IDs
            })
            ->flatten()  // flatten array of arrays to single array
            ->map(function ($id) {
                return (int) $id;  // convert string IDs to integers
            })
            ->all();  // convert to plain array

        // Fetch ungrouped detail rows for current page's grn_no
        $details = DB::table('t_grn_detail as a')
            ->leftJoin('t_ap_detail as b', function ($join) {
                $join->on('b.product_id', '=', 'a.product_id')
                    ->on('b.po_number', '=', 'a.po_number');
            })
            ->leftJoin('t_porder_detail as f', function ($join) {
                $join->on('f.po_number', '=', 'a.po_number')
                    ->on('f.product_id', '=', 'a.product_id');
            })
            ->join('m_products as g', 'g.id', '=', 'a.product_id')
            ->select([
                'a.id',
                'a.grn_no',
                'a.product_id',
                'g.product_code',
                'g.product_title_en',
                'g.product_title_cn',
                'a.total',
                'a.base_total',
                'a.currency',
                'a.qty',
                'a.price',
                'f.deposit',
                'f.base_deposit',
                // Add more fields as needed
            ])
            ->whereIn('a.id', $grnNosForPage)
            ->get()
            ->groupBy('grn_no');

        // Attach details to each grouped item
        $groupedResults = $groupedResults->map(function ($item) use ($details) {
            $item->details = $details->get($item->grn_no, collect())->values();
            return $item;
        });

        // Group totals by currency
        $groupedTotals = $groupedResults->groupBy('currency')
            ->map(fn($items, $currency) => [
                'currency' => $currency,
                'total' => $items->sum('total'),
            ]);

        // Define fixed currency order
        $currencyOrder = ['RMB', 'SG$', 'BASE_RMB', 'US$'];

        // Build footer2 totals
        $footer2 = collect($currencyOrder)->map(fn($currency) => [
            'currency' => $currency,
            'total' => $currency === 'BASE_RMB'
                ? $groupedResults->sum('base_total')
                : ($groupedTotals->get($currency)['total'] ?? 0),
        ])->values();

        // Build paginator
        $paginator = new LengthAwarePaginator(
            $groupedResults,
            $total,
            $perPage,
            $page,
            ['path' => request()->url(), 'query' => request()->query()]
        );

        return response()->json([
            'success' => true,
            'message' => 'success',
            'list' => [
                'current_page' => $paginator->currentPage(),
                'data' => $paginator->items(),
                'footer2' => $footer2,
                'last_page' => $paginator->lastPage(),
                'per_page' => $paginator->perPage(),
                'total' => $paginator->total(),
            ],
        ]);
    }
}
